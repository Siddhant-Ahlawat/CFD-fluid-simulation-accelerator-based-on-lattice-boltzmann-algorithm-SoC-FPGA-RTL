// Computer_System_mm_interconnect_1.v

// This file was auto-generated from altera_mm_interconnect_hw.tcl.  If you edit it your changes
// will probably be lost.
// 
// Generated using ACDS version 18.1 625

`timescale 1 ps / 1 ps
module Computer_System_mm_interconnect_1 (
		input  wire [11:0] ARM_A9_HPS_h2f_lw_axi_master_awid,                                        //                                       ARM_A9_HPS_h2f_lw_axi_master.awid
		input  wire [20:0] ARM_A9_HPS_h2f_lw_axi_master_awaddr,                                      //                                                                   .awaddr
		input  wire [3:0]  ARM_A9_HPS_h2f_lw_axi_master_awlen,                                       //                                                                   .awlen
		input  wire [2:0]  ARM_A9_HPS_h2f_lw_axi_master_awsize,                                      //                                                                   .awsize
		input  wire [1:0]  ARM_A9_HPS_h2f_lw_axi_master_awburst,                                     //                                                                   .awburst
		input  wire [1:0]  ARM_A9_HPS_h2f_lw_axi_master_awlock,                                      //                                                                   .awlock
		input  wire [3:0]  ARM_A9_HPS_h2f_lw_axi_master_awcache,                                     //                                                                   .awcache
		input  wire [2:0]  ARM_A9_HPS_h2f_lw_axi_master_awprot,                                      //                                                                   .awprot
		input  wire        ARM_A9_HPS_h2f_lw_axi_master_awvalid,                                     //                                                                   .awvalid
		output wire        ARM_A9_HPS_h2f_lw_axi_master_awready,                                     //                                                                   .awready
		input  wire [11:0] ARM_A9_HPS_h2f_lw_axi_master_wid,                                         //                                                                   .wid
		input  wire [31:0] ARM_A9_HPS_h2f_lw_axi_master_wdata,                                       //                                                                   .wdata
		input  wire [3:0]  ARM_A9_HPS_h2f_lw_axi_master_wstrb,                                       //                                                                   .wstrb
		input  wire        ARM_A9_HPS_h2f_lw_axi_master_wlast,                                       //                                                                   .wlast
		input  wire        ARM_A9_HPS_h2f_lw_axi_master_wvalid,                                      //                                                                   .wvalid
		output wire        ARM_A9_HPS_h2f_lw_axi_master_wready,                                      //                                                                   .wready
		output wire [11:0] ARM_A9_HPS_h2f_lw_axi_master_bid,                                         //                                                                   .bid
		output wire [1:0]  ARM_A9_HPS_h2f_lw_axi_master_bresp,                                       //                                                                   .bresp
		output wire        ARM_A9_HPS_h2f_lw_axi_master_bvalid,                                      //                                                                   .bvalid
		input  wire        ARM_A9_HPS_h2f_lw_axi_master_bready,                                      //                                                                   .bready
		input  wire [11:0] ARM_A9_HPS_h2f_lw_axi_master_arid,                                        //                                                                   .arid
		input  wire [20:0] ARM_A9_HPS_h2f_lw_axi_master_araddr,                                      //                                                                   .araddr
		input  wire [3:0]  ARM_A9_HPS_h2f_lw_axi_master_arlen,                                       //                                                                   .arlen
		input  wire [2:0]  ARM_A9_HPS_h2f_lw_axi_master_arsize,                                      //                                                                   .arsize
		input  wire [1:0]  ARM_A9_HPS_h2f_lw_axi_master_arburst,                                     //                                                                   .arburst
		input  wire [1:0]  ARM_A9_HPS_h2f_lw_axi_master_arlock,                                      //                                                                   .arlock
		input  wire [3:0]  ARM_A9_HPS_h2f_lw_axi_master_arcache,                                     //                                                                   .arcache
		input  wire [2:0]  ARM_A9_HPS_h2f_lw_axi_master_arprot,                                      //                                                                   .arprot
		input  wire        ARM_A9_HPS_h2f_lw_axi_master_arvalid,                                     //                                                                   .arvalid
		output wire        ARM_A9_HPS_h2f_lw_axi_master_arready,                                     //                                                                   .arready
		output wire [11:0] ARM_A9_HPS_h2f_lw_axi_master_rid,                                         //                                                                   .rid
		output wire [31:0] ARM_A9_HPS_h2f_lw_axi_master_rdata,                                       //                                                                   .rdata
		output wire [1:0]  ARM_A9_HPS_h2f_lw_axi_master_rresp,                                       //                                                                   .rresp
		output wire        ARM_A9_HPS_h2f_lw_axi_master_rlast,                                       //                                                                   .rlast
		output wire        ARM_A9_HPS_h2f_lw_axi_master_rvalid,                                      //                                                                   .rvalid
		input  wire        ARM_A9_HPS_h2f_lw_axi_master_rready,                                      //                                                                   .rready
		input  wire        System_PLL_sys_clk_clk,                                                   //                                                 System_PLL_sys_clk.clk
		input  wire        ARM_A9_HPS_h2f_lw_axi_master_agent_clk_reset_reset_bridge_in_reset_reset, // ARM_A9_HPS_h2f_lw_axi_master_agent_clk_reset_reset_bridge_in_reset.reset
		input  wire        AV_Config_reset_reset_bridge_in_reset_reset,                              //                              AV_Config_reset_reset_bridge_in_reset.reset
		input  wire        n0_from_hps_reset_reset_bridge_in_reset_reset,                            //                            n0_from_hps_reset_reset_bridge_in_reset.reset
		input  wire        VGA_Subsystem_sys_reset_reset_bridge_in_reset_reset,                      //                      VGA_Subsystem_sys_reset_reset_bridge_in_reset.reset
		output wire [1:0]  AV_Config_avalon_av_config_slave_address,                                 //                                   AV_Config_avalon_av_config_slave.address
		output wire        AV_Config_avalon_av_config_slave_write,                                   //                                                                   .write
		output wire        AV_Config_avalon_av_config_slave_read,                                    //                                                                   .read
		input  wire [31:0] AV_Config_avalon_av_config_slave_readdata,                                //                                                                   .readdata
		output wire [31:0] AV_Config_avalon_av_config_slave_writedata,                               //                                                                   .writedata
		output wire [3:0]  AV_Config_avalon_av_config_slave_byteenable,                              //                                                                   .byteenable
		input  wire        AV_Config_avalon_av_config_slave_waitrequest,                             //                                                                   .waitrequest
		output wire [1:0]  n0_from_fpga_s1_address,                                                  //                                                    n0_from_fpga_s1.address
		input  wire [31:0] n0_from_fpga_s1_readdata,                                                 //                                                                   .readdata
		output wire [1:0]  n0_from_hps_s1_address,                                                   //                                                     n0_from_hps_s1.address
		output wire        n0_from_hps_s1_write,                                                     //                                                                   .write
		input  wire [31:0] n0_from_hps_s1_readdata,                                                  //                                                                   .readdata
		output wire [31:0] n0_from_hps_s1_writedata,                                                 //                                                                   .writedata
		output wire        n0_from_hps_s1_chipselect,                                                //                                                                   .chipselect
		output wire [1:0]  ne_from_fpga_s1_address,                                                  //                                                    ne_from_fpga_s1.address
		input  wire [31:0] ne_from_fpga_s1_readdata,                                                 //                                                                   .readdata
		output wire [1:0]  ne_from_hps_s1_address,                                                   //                                                     ne_from_hps_s1.address
		output wire        ne_from_hps_s1_write,                                                     //                                                                   .write
		input  wire [31:0] ne_from_hps_s1_readdata,                                                  //                                                                   .readdata
		output wire [31:0] ne_from_hps_s1_writedata,                                                 //                                                                   .writedata
		output wire        ne_from_hps_s1_chipselect,                                                //                                                                   .chipselect
		output wire [1:0]  nn_from_fpga_s1_address,                                                  //                                                    nn_from_fpga_s1.address
		input  wire [31:0] nn_from_fpga_s1_readdata,                                                 //                                                                   .readdata
		output wire [1:0]  nn_from_hps_s1_address,                                                   //                                                     nn_from_hps_s1.address
		output wire        nn_from_hps_s1_write,                                                     //                                                                   .write
		input  wire [31:0] nn_from_hps_s1_readdata,                                                  //                                                                   .readdata
		output wire [31:0] nn_from_hps_s1_writedata,                                                 //                                                                   .writedata
		output wire        nn_from_hps_s1_chipselect,                                                //                                                                   .chipselect
		output wire [1:0]  nne_from_fpga_s1_address,                                                 //                                                   nne_from_fpga_s1.address
		input  wire [31:0] nne_from_fpga_s1_readdata,                                                //                                                                   .readdata
		output wire [1:0]  nne_from_hps_s1_address,                                                  //                                                    nne_from_hps_s1.address
		output wire        nne_from_hps_s1_write,                                                    //                                                                   .write
		input  wire [31:0] nne_from_hps_s1_readdata,                                                 //                                                                   .readdata
		output wire [31:0] nne_from_hps_s1_writedata,                                                //                                                                   .writedata
		output wire        nne_from_hps_s1_chipselect,                                               //                                                                   .chipselect
		output wire [1:0]  nnw_from_fpga_s1_address,                                                 //                                                   nnw_from_fpga_s1.address
		input  wire [31:0] nnw_from_fpga_s1_readdata,                                                //                                                                   .readdata
		output wire [1:0]  nnw_from_hps_s1_address,                                                  //                                                    nnw_from_hps_s1.address
		output wire        nnw_from_hps_s1_write,                                                    //                                                                   .write
		input  wire [31:0] nnw_from_hps_s1_readdata,                                                 //                                                                   .readdata
		output wire [31:0] nnw_from_hps_s1_writedata,                                                //                                                                   .writedata
		output wire        nnw_from_hps_s1_chipselect,                                               //                                                                   .chipselect
		output wire [1:0]  ns_from_fpga_s1_address,                                                  //                                                    ns_from_fpga_s1.address
		input  wire [31:0] ns_from_fpga_s1_readdata,                                                 //                                                                   .readdata
		output wire [1:0]  ns_from_hps_s1_address,                                                   //                                                     ns_from_hps_s1.address
		output wire        ns_from_hps_s1_write,                                                     //                                                                   .write
		input  wire [31:0] ns_from_hps_s1_readdata,                                                  //                                                                   .readdata
		output wire [31:0] ns_from_hps_s1_writedata,                                                 //                                                                   .writedata
		output wire        ns_from_hps_s1_chipselect,                                                //                                                                   .chipselect
		output wire [1:0]  nse_from_fpga_s1_address,                                                 //                                                   nse_from_fpga_s1.address
		input  wire [31:0] nse_from_fpga_s1_readdata,                                                //                                                                   .readdata
		output wire [1:0]  nse_from_hps_s1_address,                                                  //                                                    nse_from_hps_s1.address
		output wire        nse_from_hps_s1_write,                                                    //                                                                   .write
		input  wire [31:0] nse_from_hps_s1_readdata,                                                 //                                                                   .readdata
		output wire [31:0] nse_from_hps_s1_writedata,                                                //                                                                   .writedata
		output wire        nse_from_hps_s1_chipselect,                                               //                                                                   .chipselect
		output wire [1:0]  nsw_from_fpga_s1_address,                                                 //                                                   nsw_from_fpga_s1.address
		input  wire [31:0] nsw_from_fpga_s1_readdata,                                                //                                                                   .readdata
		output wire [1:0]  nsw_from_hps_s1_address,                                                  //                                                    nsw_from_hps_s1.address
		output wire        nsw_from_hps_s1_write,                                                    //                                                                   .write
		input  wire [31:0] nsw_from_hps_s1_readdata,                                                 //                                                                   .readdata
		output wire [31:0] nsw_from_hps_s1_writedata,                                                //                                                                   .writedata
		output wire        nsw_from_hps_s1_chipselect,                                               //                                                                   .chipselect
		output wire [1:0]  nw_from_fpga_s1_address,                                                  //                                                    nw_from_fpga_s1.address
		input  wire [31:0] nw_from_fpga_s1_readdata,                                                 //                                                                   .readdata
		output wire [1:0]  nw_from_hps_s1_address,                                                   //                                                     nw_from_hps_s1.address
		output wire        nw_from_hps_s1_write,                                                     //                                                                   .write
		input  wire [31:0] nw_from_hps_s1_readdata,                                                  //                                                                   .readdata
		output wire [31:0] nw_from_hps_s1_writedata,                                                 //                                                                   .writedata
		output wire        nw_from_hps_s1_chipselect,                                                //                                                                   .chipselect
		output wire [1:0]  omega_s1_address,                                                         //                                                           omega_s1.address
		output wire        omega_s1_write,                                                           //                                                                   .write
		input  wire [31:0] omega_s1_readdata,                                                        //                                                                   .readdata
		output wire [31:0] omega_s1_writedata,                                                       //                                                                   .writedata
		output wire        omega_s1_chipselect,                                                      //                                                                   .chipselect
		output wire [1:0]  one36th_s1_address,                                                       //                                                         one36th_s1.address
		output wire        one36th_s1_write,                                                         //                                                                   .write
		input  wire [31:0] one36th_s1_readdata,                                                      //                                                                   .readdata
		output wire [31:0] one36th_s1_writedata,                                                     //                                                                   .writedata
		output wire        one36th_s1_chipselect,                                                    //                                                                   .chipselect
		output wire [1:0]  one9th_s1_address,                                                        //                                                          one9th_s1.address
		output wire        one9th_s1_write,                                                          //                                                                   .write
		input  wire [31:0] one9th_s1_readdata,                                                       //                                                                   .readdata
		output wire [31:0] one9th_s1_writedata,                                                      //                                                                   .writedata
		output wire        one9th_s1_chipselect,                                                     //                                                                   .chipselect
		output wire [1:0]  pipes_s1_address,                                                         //                                                           pipes_s1.address
		input  wire [31:0] pipes_s1_readdata,                                                        //                                                                   .readdata
		output wire [1:0]  Pixel_DMA_Addr_Translation_slave_address,                                 //                                   Pixel_DMA_Addr_Translation_slave.address
		output wire        Pixel_DMA_Addr_Translation_slave_write,                                   //                                                                   .write
		output wire        Pixel_DMA_Addr_Translation_slave_read,                                    //                                                                   .read
		input  wire [31:0] Pixel_DMA_Addr_Translation_slave_readdata,                                //                                                                   .readdata
		output wire [31:0] Pixel_DMA_Addr_Translation_slave_writedata,                               //                                                                   .writedata
		output wire [3:0]  Pixel_DMA_Addr_Translation_slave_byteenable,                              //                                                                   .byteenable
		input  wire        Pixel_DMA_Addr_Translation_slave_waitrequest,                             //                                                                   .waitrequest
		output wire [1:0]  ux_s1_address,                                                            //                                                              ux_s1.address
		input  wire [31:0] ux_s1_readdata,                                                           //                                                                   .readdata
		output wire [1:0]  uy_s1_address,                                                            //                                                              uy_s1.address
		input  wire [31:0] uy_s1_readdata,                                                           //                                                                   .readdata
		output wire [0:0]  VGA_Subsystem_char_buffer_control_slave_address,                          //                            VGA_Subsystem_char_buffer_control_slave.address
		output wire        VGA_Subsystem_char_buffer_control_slave_write,                            //                                                                   .write
		output wire        VGA_Subsystem_char_buffer_control_slave_read,                             //                                                                   .read
		input  wire [31:0] VGA_Subsystem_char_buffer_control_slave_readdata,                         //                                                                   .readdata
		output wire [31:0] VGA_Subsystem_char_buffer_control_slave_writedata,                        //                                                                   .writedata
		output wire [3:0]  VGA_Subsystem_char_buffer_control_slave_byteenable,                       //                                                                   .byteenable
		output wire        VGA_Subsystem_char_buffer_control_slave_chipselect                        //                                                                   .chipselect
	);

	wire   [31:0] av_config_avalon_av_config_slave_agent_m0_readdata;                          // AV_Config_avalon_av_config_slave_translator:uav_readdata -> AV_Config_avalon_av_config_slave_agent:m0_readdata
	wire          av_config_avalon_av_config_slave_agent_m0_waitrequest;                       // AV_Config_avalon_av_config_slave_translator:uav_waitrequest -> AV_Config_avalon_av_config_slave_agent:m0_waitrequest
	wire          av_config_avalon_av_config_slave_agent_m0_debugaccess;                       // AV_Config_avalon_av_config_slave_agent:m0_debugaccess -> AV_Config_avalon_av_config_slave_translator:uav_debugaccess
	wire   [20:0] av_config_avalon_av_config_slave_agent_m0_address;                           // AV_Config_avalon_av_config_slave_agent:m0_address -> AV_Config_avalon_av_config_slave_translator:uav_address
	wire    [3:0] av_config_avalon_av_config_slave_agent_m0_byteenable;                        // AV_Config_avalon_av_config_slave_agent:m0_byteenable -> AV_Config_avalon_av_config_slave_translator:uav_byteenable
	wire          av_config_avalon_av_config_slave_agent_m0_read;                              // AV_Config_avalon_av_config_slave_agent:m0_read -> AV_Config_avalon_av_config_slave_translator:uav_read
	wire          av_config_avalon_av_config_slave_agent_m0_readdatavalid;                     // AV_Config_avalon_av_config_slave_translator:uav_readdatavalid -> AV_Config_avalon_av_config_slave_agent:m0_readdatavalid
	wire          av_config_avalon_av_config_slave_agent_m0_lock;                              // AV_Config_avalon_av_config_slave_agent:m0_lock -> AV_Config_avalon_av_config_slave_translator:uav_lock
	wire   [31:0] av_config_avalon_av_config_slave_agent_m0_writedata;                         // AV_Config_avalon_av_config_slave_agent:m0_writedata -> AV_Config_avalon_av_config_slave_translator:uav_writedata
	wire          av_config_avalon_av_config_slave_agent_m0_write;                             // AV_Config_avalon_av_config_slave_agent:m0_write -> AV_Config_avalon_av_config_slave_translator:uav_write
	wire    [2:0] av_config_avalon_av_config_slave_agent_m0_burstcount;                        // AV_Config_avalon_av_config_slave_agent:m0_burstcount -> AV_Config_avalon_av_config_slave_translator:uav_burstcount
	wire          av_config_avalon_av_config_slave_agent_rf_source_valid;                      // AV_Config_avalon_av_config_slave_agent:rf_source_valid -> AV_Config_avalon_av_config_slave_agent_rsp_fifo:in_valid
	wire  [120:0] av_config_avalon_av_config_slave_agent_rf_source_data;                       // AV_Config_avalon_av_config_slave_agent:rf_source_data -> AV_Config_avalon_av_config_slave_agent_rsp_fifo:in_data
	wire          av_config_avalon_av_config_slave_agent_rf_source_ready;                      // AV_Config_avalon_av_config_slave_agent_rsp_fifo:in_ready -> AV_Config_avalon_av_config_slave_agent:rf_source_ready
	wire          av_config_avalon_av_config_slave_agent_rf_source_startofpacket;              // AV_Config_avalon_av_config_slave_agent:rf_source_startofpacket -> AV_Config_avalon_av_config_slave_agent_rsp_fifo:in_startofpacket
	wire          av_config_avalon_av_config_slave_agent_rf_source_endofpacket;                // AV_Config_avalon_av_config_slave_agent:rf_source_endofpacket -> AV_Config_avalon_av_config_slave_agent_rsp_fifo:in_endofpacket
	wire          av_config_avalon_av_config_slave_agent_rsp_fifo_out_valid;                   // AV_Config_avalon_av_config_slave_agent_rsp_fifo:out_valid -> AV_Config_avalon_av_config_slave_agent:rf_sink_valid
	wire  [120:0] av_config_avalon_av_config_slave_agent_rsp_fifo_out_data;                    // AV_Config_avalon_av_config_slave_agent_rsp_fifo:out_data -> AV_Config_avalon_av_config_slave_agent:rf_sink_data
	wire          av_config_avalon_av_config_slave_agent_rsp_fifo_out_ready;                   // AV_Config_avalon_av_config_slave_agent:rf_sink_ready -> AV_Config_avalon_av_config_slave_agent_rsp_fifo:out_ready
	wire          av_config_avalon_av_config_slave_agent_rsp_fifo_out_startofpacket;           // AV_Config_avalon_av_config_slave_agent_rsp_fifo:out_startofpacket -> AV_Config_avalon_av_config_slave_agent:rf_sink_startofpacket
	wire          av_config_avalon_av_config_slave_agent_rsp_fifo_out_endofpacket;             // AV_Config_avalon_av_config_slave_agent_rsp_fifo:out_endofpacket -> AV_Config_avalon_av_config_slave_agent:rf_sink_endofpacket
	wire          av_config_avalon_av_config_slave_agent_rdata_fifo_src_valid;                 // AV_Config_avalon_av_config_slave_agent:rdata_fifo_src_valid -> AV_Config_avalon_av_config_slave_agent_rdata_fifo:in_valid
	wire   [33:0] av_config_avalon_av_config_slave_agent_rdata_fifo_src_data;                  // AV_Config_avalon_av_config_slave_agent:rdata_fifo_src_data -> AV_Config_avalon_av_config_slave_agent_rdata_fifo:in_data
	wire          av_config_avalon_av_config_slave_agent_rdata_fifo_src_ready;                 // AV_Config_avalon_av_config_slave_agent_rdata_fifo:in_ready -> AV_Config_avalon_av_config_slave_agent:rdata_fifo_src_ready
	wire   [31:0] vga_subsystem_char_buffer_control_slave_agent_m0_readdata;                   // VGA_Subsystem_char_buffer_control_slave_translator:uav_readdata -> VGA_Subsystem_char_buffer_control_slave_agent:m0_readdata
	wire          vga_subsystem_char_buffer_control_slave_agent_m0_waitrequest;                // VGA_Subsystem_char_buffer_control_slave_translator:uav_waitrequest -> VGA_Subsystem_char_buffer_control_slave_agent:m0_waitrequest
	wire          vga_subsystem_char_buffer_control_slave_agent_m0_debugaccess;                // VGA_Subsystem_char_buffer_control_slave_agent:m0_debugaccess -> VGA_Subsystem_char_buffer_control_slave_translator:uav_debugaccess
	wire   [20:0] vga_subsystem_char_buffer_control_slave_agent_m0_address;                    // VGA_Subsystem_char_buffer_control_slave_agent:m0_address -> VGA_Subsystem_char_buffer_control_slave_translator:uav_address
	wire    [3:0] vga_subsystem_char_buffer_control_slave_agent_m0_byteenable;                 // VGA_Subsystem_char_buffer_control_slave_agent:m0_byteenable -> VGA_Subsystem_char_buffer_control_slave_translator:uav_byteenable
	wire          vga_subsystem_char_buffer_control_slave_agent_m0_read;                       // VGA_Subsystem_char_buffer_control_slave_agent:m0_read -> VGA_Subsystem_char_buffer_control_slave_translator:uav_read
	wire          vga_subsystem_char_buffer_control_slave_agent_m0_readdatavalid;              // VGA_Subsystem_char_buffer_control_slave_translator:uav_readdatavalid -> VGA_Subsystem_char_buffer_control_slave_agent:m0_readdatavalid
	wire          vga_subsystem_char_buffer_control_slave_agent_m0_lock;                       // VGA_Subsystem_char_buffer_control_slave_agent:m0_lock -> VGA_Subsystem_char_buffer_control_slave_translator:uav_lock
	wire   [31:0] vga_subsystem_char_buffer_control_slave_agent_m0_writedata;                  // VGA_Subsystem_char_buffer_control_slave_agent:m0_writedata -> VGA_Subsystem_char_buffer_control_slave_translator:uav_writedata
	wire          vga_subsystem_char_buffer_control_slave_agent_m0_write;                      // VGA_Subsystem_char_buffer_control_slave_agent:m0_write -> VGA_Subsystem_char_buffer_control_slave_translator:uav_write
	wire    [2:0] vga_subsystem_char_buffer_control_slave_agent_m0_burstcount;                 // VGA_Subsystem_char_buffer_control_slave_agent:m0_burstcount -> VGA_Subsystem_char_buffer_control_slave_translator:uav_burstcount
	wire          vga_subsystem_char_buffer_control_slave_agent_rf_source_valid;               // VGA_Subsystem_char_buffer_control_slave_agent:rf_source_valid -> VGA_Subsystem_char_buffer_control_slave_agent_rsp_fifo:in_valid
	wire  [120:0] vga_subsystem_char_buffer_control_slave_agent_rf_source_data;                // VGA_Subsystem_char_buffer_control_slave_agent:rf_source_data -> VGA_Subsystem_char_buffer_control_slave_agent_rsp_fifo:in_data
	wire          vga_subsystem_char_buffer_control_slave_agent_rf_source_ready;               // VGA_Subsystem_char_buffer_control_slave_agent_rsp_fifo:in_ready -> VGA_Subsystem_char_buffer_control_slave_agent:rf_source_ready
	wire          vga_subsystem_char_buffer_control_slave_agent_rf_source_startofpacket;       // VGA_Subsystem_char_buffer_control_slave_agent:rf_source_startofpacket -> VGA_Subsystem_char_buffer_control_slave_agent_rsp_fifo:in_startofpacket
	wire          vga_subsystem_char_buffer_control_slave_agent_rf_source_endofpacket;         // VGA_Subsystem_char_buffer_control_slave_agent:rf_source_endofpacket -> VGA_Subsystem_char_buffer_control_slave_agent_rsp_fifo:in_endofpacket
	wire          vga_subsystem_char_buffer_control_slave_agent_rsp_fifo_out_valid;            // VGA_Subsystem_char_buffer_control_slave_agent_rsp_fifo:out_valid -> VGA_Subsystem_char_buffer_control_slave_agent:rf_sink_valid
	wire  [120:0] vga_subsystem_char_buffer_control_slave_agent_rsp_fifo_out_data;             // VGA_Subsystem_char_buffer_control_slave_agent_rsp_fifo:out_data -> VGA_Subsystem_char_buffer_control_slave_agent:rf_sink_data
	wire          vga_subsystem_char_buffer_control_slave_agent_rsp_fifo_out_ready;            // VGA_Subsystem_char_buffer_control_slave_agent:rf_sink_ready -> VGA_Subsystem_char_buffer_control_slave_agent_rsp_fifo:out_ready
	wire          vga_subsystem_char_buffer_control_slave_agent_rsp_fifo_out_startofpacket;    // VGA_Subsystem_char_buffer_control_slave_agent_rsp_fifo:out_startofpacket -> VGA_Subsystem_char_buffer_control_slave_agent:rf_sink_startofpacket
	wire          vga_subsystem_char_buffer_control_slave_agent_rsp_fifo_out_endofpacket;      // VGA_Subsystem_char_buffer_control_slave_agent_rsp_fifo:out_endofpacket -> VGA_Subsystem_char_buffer_control_slave_agent:rf_sink_endofpacket
	wire          vga_subsystem_char_buffer_control_slave_agent_rdata_fifo_src_valid;          // VGA_Subsystem_char_buffer_control_slave_agent:rdata_fifo_src_valid -> VGA_Subsystem_char_buffer_control_slave_agent_rdata_fifo:in_valid
	wire   [33:0] vga_subsystem_char_buffer_control_slave_agent_rdata_fifo_src_data;           // VGA_Subsystem_char_buffer_control_slave_agent:rdata_fifo_src_data -> VGA_Subsystem_char_buffer_control_slave_agent_rdata_fifo:in_data
	wire          vga_subsystem_char_buffer_control_slave_agent_rdata_fifo_src_ready;          // VGA_Subsystem_char_buffer_control_slave_agent_rdata_fifo:in_ready -> VGA_Subsystem_char_buffer_control_slave_agent:rdata_fifo_src_ready
	wire   [31:0] n0_from_hps_s1_agent_m0_readdata;                                            // n0_from_hps_s1_translator:uav_readdata -> n0_from_hps_s1_agent:m0_readdata
	wire          n0_from_hps_s1_agent_m0_waitrequest;                                         // n0_from_hps_s1_translator:uav_waitrequest -> n0_from_hps_s1_agent:m0_waitrequest
	wire          n0_from_hps_s1_agent_m0_debugaccess;                                         // n0_from_hps_s1_agent:m0_debugaccess -> n0_from_hps_s1_translator:uav_debugaccess
	wire   [20:0] n0_from_hps_s1_agent_m0_address;                                             // n0_from_hps_s1_agent:m0_address -> n0_from_hps_s1_translator:uav_address
	wire    [3:0] n0_from_hps_s1_agent_m0_byteenable;                                          // n0_from_hps_s1_agent:m0_byteenable -> n0_from_hps_s1_translator:uav_byteenable
	wire          n0_from_hps_s1_agent_m0_read;                                                // n0_from_hps_s1_agent:m0_read -> n0_from_hps_s1_translator:uav_read
	wire          n0_from_hps_s1_agent_m0_readdatavalid;                                       // n0_from_hps_s1_translator:uav_readdatavalid -> n0_from_hps_s1_agent:m0_readdatavalid
	wire          n0_from_hps_s1_agent_m0_lock;                                                // n0_from_hps_s1_agent:m0_lock -> n0_from_hps_s1_translator:uav_lock
	wire   [31:0] n0_from_hps_s1_agent_m0_writedata;                                           // n0_from_hps_s1_agent:m0_writedata -> n0_from_hps_s1_translator:uav_writedata
	wire          n0_from_hps_s1_agent_m0_write;                                               // n0_from_hps_s1_agent:m0_write -> n0_from_hps_s1_translator:uav_write
	wire    [2:0] n0_from_hps_s1_agent_m0_burstcount;                                          // n0_from_hps_s1_agent:m0_burstcount -> n0_from_hps_s1_translator:uav_burstcount
	wire          n0_from_hps_s1_agent_rf_source_valid;                                        // n0_from_hps_s1_agent:rf_source_valid -> n0_from_hps_s1_agent_rsp_fifo:in_valid
	wire  [120:0] n0_from_hps_s1_agent_rf_source_data;                                         // n0_from_hps_s1_agent:rf_source_data -> n0_from_hps_s1_agent_rsp_fifo:in_data
	wire          n0_from_hps_s1_agent_rf_source_ready;                                        // n0_from_hps_s1_agent_rsp_fifo:in_ready -> n0_from_hps_s1_agent:rf_source_ready
	wire          n0_from_hps_s1_agent_rf_source_startofpacket;                                // n0_from_hps_s1_agent:rf_source_startofpacket -> n0_from_hps_s1_agent_rsp_fifo:in_startofpacket
	wire          n0_from_hps_s1_agent_rf_source_endofpacket;                                  // n0_from_hps_s1_agent:rf_source_endofpacket -> n0_from_hps_s1_agent_rsp_fifo:in_endofpacket
	wire          n0_from_hps_s1_agent_rsp_fifo_out_valid;                                     // n0_from_hps_s1_agent_rsp_fifo:out_valid -> n0_from_hps_s1_agent:rf_sink_valid
	wire  [120:0] n0_from_hps_s1_agent_rsp_fifo_out_data;                                      // n0_from_hps_s1_agent_rsp_fifo:out_data -> n0_from_hps_s1_agent:rf_sink_data
	wire          n0_from_hps_s1_agent_rsp_fifo_out_ready;                                     // n0_from_hps_s1_agent:rf_sink_ready -> n0_from_hps_s1_agent_rsp_fifo:out_ready
	wire          n0_from_hps_s1_agent_rsp_fifo_out_startofpacket;                             // n0_from_hps_s1_agent_rsp_fifo:out_startofpacket -> n0_from_hps_s1_agent:rf_sink_startofpacket
	wire          n0_from_hps_s1_agent_rsp_fifo_out_endofpacket;                               // n0_from_hps_s1_agent_rsp_fifo:out_endofpacket -> n0_from_hps_s1_agent:rf_sink_endofpacket
	wire          n0_from_hps_s1_agent_rdata_fifo_src_valid;                                   // n0_from_hps_s1_agent:rdata_fifo_src_valid -> n0_from_hps_s1_agent_rdata_fifo:in_valid
	wire   [33:0] n0_from_hps_s1_agent_rdata_fifo_src_data;                                    // n0_from_hps_s1_agent:rdata_fifo_src_data -> n0_from_hps_s1_agent_rdata_fifo:in_data
	wire          n0_from_hps_s1_agent_rdata_fifo_src_ready;                                   // n0_from_hps_s1_agent_rdata_fifo:in_ready -> n0_from_hps_s1_agent:rdata_fifo_src_ready
	wire   [31:0] nn_from_hps_s1_agent_m0_readdata;                                            // nn_from_hps_s1_translator:uav_readdata -> nn_from_hps_s1_agent:m0_readdata
	wire          nn_from_hps_s1_agent_m0_waitrequest;                                         // nn_from_hps_s1_translator:uav_waitrequest -> nn_from_hps_s1_agent:m0_waitrequest
	wire          nn_from_hps_s1_agent_m0_debugaccess;                                         // nn_from_hps_s1_agent:m0_debugaccess -> nn_from_hps_s1_translator:uav_debugaccess
	wire   [20:0] nn_from_hps_s1_agent_m0_address;                                             // nn_from_hps_s1_agent:m0_address -> nn_from_hps_s1_translator:uav_address
	wire    [3:0] nn_from_hps_s1_agent_m0_byteenable;                                          // nn_from_hps_s1_agent:m0_byteenable -> nn_from_hps_s1_translator:uav_byteenable
	wire          nn_from_hps_s1_agent_m0_read;                                                // nn_from_hps_s1_agent:m0_read -> nn_from_hps_s1_translator:uav_read
	wire          nn_from_hps_s1_agent_m0_readdatavalid;                                       // nn_from_hps_s1_translator:uav_readdatavalid -> nn_from_hps_s1_agent:m0_readdatavalid
	wire          nn_from_hps_s1_agent_m0_lock;                                                // nn_from_hps_s1_agent:m0_lock -> nn_from_hps_s1_translator:uav_lock
	wire   [31:0] nn_from_hps_s1_agent_m0_writedata;                                           // nn_from_hps_s1_agent:m0_writedata -> nn_from_hps_s1_translator:uav_writedata
	wire          nn_from_hps_s1_agent_m0_write;                                               // nn_from_hps_s1_agent:m0_write -> nn_from_hps_s1_translator:uav_write
	wire    [2:0] nn_from_hps_s1_agent_m0_burstcount;                                          // nn_from_hps_s1_agent:m0_burstcount -> nn_from_hps_s1_translator:uav_burstcount
	wire          nn_from_hps_s1_agent_rf_source_valid;                                        // nn_from_hps_s1_agent:rf_source_valid -> nn_from_hps_s1_agent_rsp_fifo:in_valid
	wire  [120:0] nn_from_hps_s1_agent_rf_source_data;                                         // nn_from_hps_s1_agent:rf_source_data -> nn_from_hps_s1_agent_rsp_fifo:in_data
	wire          nn_from_hps_s1_agent_rf_source_ready;                                        // nn_from_hps_s1_agent_rsp_fifo:in_ready -> nn_from_hps_s1_agent:rf_source_ready
	wire          nn_from_hps_s1_agent_rf_source_startofpacket;                                // nn_from_hps_s1_agent:rf_source_startofpacket -> nn_from_hps_s1_agent_rsp_fifo:in_startofpacket
	wire          nn_from_hps_s1_agent_rf_source_endofpacket;                                  // nn_from_hps_s1_agent:rf_source_endofpacket -> nn_from_hps_s1_agent_rsp_fifo:in_endofpacket
	wire          nn_from_hps_s1_agent_rsp_fifo_out_valid;                                     // nn_from_hps_s1_agent_rsp_fifo:out_valid -> nn_from_hps_s1_agent:rf_sink_valid
	wire  [120:0] nn_from_hps_s1_agent_rsp_fifo_out_data;                                      // nn_from_hps_s1_agent_rsp_fifo:out_data -> nn_from_hps_s1_agent:rf_sink_data
	wire          nn_from_hps_s1_agent_rsp_fifo_out_ready;                                     // nn_from_hps_s1_agent:rf_sink_ready -> nn_from_hps_s1_agent_rsp_fifo:out_ready
	wire          nn_from_hps_s1_agent_rsp_fifo_out_startofpacket;                             // nn_from_hps_s1_agent_rsp_fifo:out_startofpacket -> nn_from_hps_s1_agent:rf_sink_startofpacket
	wire          nn_from_hps_s1_agent_rsp_fifo_out_endofpacket;                               // nn_from_hps_s1_agent_rsp_fifo:out_endofpacket -> nn_from_hps_s1_agent:rf_sink_endofpacket
	wire          nn_from_hps_s1_agent_rdata_fifo_src_valid;                                   // nn_from_hps_s1_agent:rdata_fifo_src_valid -> nn_from_hps_s1_agent_rdata_fifo:in_valid
	wire   [33:0] nn_from_hps_s1_agent_rdata_fifo_src_data;                                    // nn_from_hps_s1_agent:rdata_fifo_src_data -> nn_from_hps_s1_agent_rdata_fifo:in_data
	wire          nn_from_hps_s1_agent_rdata_fifo_src_ready;                                   // nn_from_hps_s1_agent_rdata_fifo:in_ready -> nn_from_hps_s1_agent:rdata_fifo_src_ready
	wire   [31:0] ns_from_hps_s1_agent_m0_readdata;                                            // ns_from_hps_s1_translator:uav_readdata -> ns_from_hps_s1_agent:m0_readdata
	wire          ns_from_hps_s1_agent_m0_waitrequest;                                         // ns_from_hps_s1_translator:uav_waitrequest -> ns_from_hps_s1_agent:m0_waitrequest
	wire          ns_from_hps_s1_agent_m0_debugaccess;                                         // ns_from_hps_s1_agent:m0_debugaccess -> ns_from_hps_s1_translator:uav_debugaccess
	wire   [20:0] ns_from_hps_s1_agent_m0_address;                                             // ns_from_hps_s1_agent:m0_address -> ns_from_hps_s1_translator:uav_address
	wire    [3:0] ns_from_hps_s1_agent_m0_byteenable;                                          // ns_from_hps_s1_agent:m0_byteenable -> ns_from_hps_s1_translator:uav_byteenable
	wire          ns_from_hps_s1_agent_m0_read;                                                // ns_from_hps_s1_agent:m0_read -> ns_from_hps_s1_translator:uav_read
	wire          ns_from_hps_s1_agent_m0_readdatavalid;                                       // ns_from_hps_s1_translator:uav_readdatavalid -> ns_from_hps_s1_agent:m0_readdatavalid
	wire          ns_from_hps_s1_agent_m0_lock;                                                // ns_from_hps_s1_agent:m0_lock -> ns_from_hps_s1_translator:uav_lock
	wire   [31:0] ns_from_hps_s1_agent_m0_writedata;                                           // ns_from_hps_s1_agent:m0_writedata -> ns_from_hps_s1_translator:uav_writedata
	wire          ns_from_hps_s1_agent_m0_write;                                               // ns_from_hps_s1_agent:m0_write -> ns_from_hps_s1_translator:uav_write
	wire    [2:0] ns_from_hps_s1_agent_m0_burstcount;                                          // ns_from_hps_s1_agent:m0_burstcount -> ns_from_hps_s1_translator:uav_burstcount
	wire          ns_from_hps_s1_agent_rf_source_valid;                                        // ns_from_hps_s1_agent:rf_source_valid -> ns_from_hps_s1_agent_rsp_fifo:in_valid
	wire  [120:0] ns_from_hps_s1_agent_rf_source_data;                                         // ns_from_hps_s1_agent:rf_source_data -> ns_from_hps_s1_agent_rsp_fifo:in_data
	wire          ns_from_hps_s1_agent_rf_source_ready;                                        // ns_from_hps_s1_agent_rsp_fifo:in_ready -> ns_from_hps_s1_agent:rf_source_ready
	wire          ns_from_hps_s1_agent_rf_source_startofpacket;                                // ns_from_hps_s1_agent:rf_source_startofpacket -> ns_from_hps_s1_agent_rsp_fifo:in_startofpacket
	wire          ns_from_hps_s1_agent_rf_source_endofpacket;                                  // ns_from_hps_s1_agent:rf_source_endofpacket -> ns_from_hps_s1_agent_rsp_fifo:in_endofpacket
	wire          ns_from_hps_s1_agent_rsp_fifo_out_valid;                                     // ns_from_hps_s1_agent_rsp_fifo:out_valid -> ns_from_hps_s1_agent:rf_sink_valid
	wire  [120:0] ns_from_hps_s1_agent_rsp_fifo_out_data;                                      // ns_from_hps_s1_agent_rsp_fifo:out_data -> ns_from_hps_s1_agent:rf_sink_data
	wire          ns_from_hps_s1_agent_rsp_fifo_out_ready;                                     // ns_from_hps_s1_agent:rf_sink_ready -> ns_from_hps_s1_agent_rsp_fifo:out_ready
	wire          ns_from_hps_s1_agent_rsp_fifo_out_startofpacket;                             // ns_from_hps_s1_agent_rsp_fifo:out_startofpacket -> ns_from_hps_s1_agent:rf_sink_startofpacket
	wire          ns_from_hps_s1_agent_rsp_fifo_out_endofpacket;                               // ns_from_hps_s1_agent_rsp_fifo:out_endofpacket -> ns_from_hps_s1_agent:rf_sink_endofpacket
	wire          ns_from_hps_s1_agent_rdata_fifo_src_valid;                                   // ns_from_hps_s1_agent:rdata_fifo_src_valid -> ns_from_hps_s1_agent_rdata_fifo:in_valid
	wire   [33:0] ns_from_hps_s1_agent_rdata_fifo_src_data;                                    // ns_from_hps_s1_agent:rdata_fifo_src_data -> ns_from_hps_s1_agent_rdata_fifo:in_data
	wire          ns_from_hps_s1_agent_rdata_fifo_src_ready;                                   // ns_from_hps_s1_agent_rdata_fifo:in_ready -> ns_from_hps_s1_agent:rdata_fifo_src_ready
	wire   [31:0] nw_from_hps_s1_agent_m0_readdata;                                            // nw_from_hps_s1_translator:uav_readdata -> nw_from_hps_s1_agent:m0_readdata
	wire          nw_from_hps_s1_agent_m0_waitrequest;                                         // nw_from_hps_s1_translator:uav_waitrequest -> nw_from_hps_s1_agent:m0_waitrequest
	wire          nw_from_hps_s1_agent_m0_debugaccess;                                         // nw_from_hps_s1_agent:m0_debugaccess -> nw_from_hps_s1_translator:uav_debugaccess
	wire   [20:0] nw_from_hps_s1_agent_m0_address;                                             // nw_from_hps_s1_agent:m0_address -> nw_from_hps_s1_translator:uav_address
	wire    [3:0] nw_from_hps_s1_agent_m0_byteenable;                                          // nw_from_hps_s1_agent:m0_byteenable -> nw_from_hps_s1_translator:uav_byteenable
	wire          nw_from_hps_s1_agent_m0_read;                                                // nw_from_hps_s1_agent:m0_read -> nw_from_hps_s1_translator:uav_read
	wire          nw_from_hps_s1_agent_m0_readdatavalid;                                       // nw_from_hps_s1_translator:uav_readdatavalid -> nw_from_hps_s1_agent:m0_readdatavalid
	wire          nw_from_hps_s1_agent_m0_lock;                                                // nw_from_hps_s1_agent:m0_lock -> nw_from_hps_s1_translator:uav_lock
	wire   [31:0] nw_from_hps_s1_agent_m0_writedata;                                           // nw_from_hps_s1_agent:m0_writedata -> nw_from_hps_s1_translator:uav_writedata
	wire          nw_from_hps_s1_agent_m0_write;                                               // nw_from_hps_s1_agent:m0_write -> nw_from_hps_s1_translator:uav_write
	wire    [2:0] nw_from_hps_s1_agent_m0_burstcount;                                          // nw_from_hps_s1_agent:m0_burstcount -> nw_from_hps_s1_translator:uav_burstcount
	wire          nw_from_hps_s1_agent_rf_source_valid;                                        // nw_from_hps_s1_agent:rf_source_valid -> nw_from_hps_s1_agent_rsp_fifo:in_valid
	wire  [120:0] nw_from_hps_s1_agent_rf_source_data;                                         // nw_from_hps_s1_agent:rf_source_data -> nw_from_hps_s1_agent_rsp_fifo:in_data
	wire          nw_from_hps_s1_agent_rf_source_ready;                                        // nw_from_hps_s1_agent_rsp_fifo:in_ready -> nw_from_hps_s1_agent:rf_source_ready
	wire          nw_from_hps_s1_agent_rf_source_startofpacket;                                // nw_from_hps_s1_agent:rf_source_startofpacket -> nw_from_hps_s1_agent_rsp_fifo:in_startofpacket
	wire          nw_from_hps_s1_agent_rf_source_endofpacket;                                  // nw_from_hps_s1_agent:rf_source_endofpacket -> nw_from_hps_s1_agent_rsp_fifo:in_endofpacket
	wire          nw_from_hps_s1_agent_rsp_fifo_out_valid;                                     // nw_from_hps_s1_agent_rsp_fifo:out_valid -> nw_from_hps_s1_agent:rf_sink_valid
	wire  [120:0] nw_from_hps_s1_agent_rsp_fifo_out_data;                                      // nw_from_hps_s1_agent_rsp_fifo:out_data -> nw_from_hps_s1_agent:rf_sink_data
	wire          nw_from_hps_s1_agent_rsp_fifo_out_ready;                                     // nw_from_hps_s1_agent:rf_sink_ready -> nw_from_hps_s1_agent_rsp_fifo:out_ready
	wire          nw_from_hps_s1_agent_rsp_fifo_out_startofpacket;                             // nw_from_hps_s1_agent_rsp_fifo:out_startofpacket -> nw_from_hps_s1_agent:rf_sink_startofpacket
	wire          nw_from_hps_s1_agent_rsp_fifo_out_endofpacket;                               // nw_from_hps_s1_agent_rsp_fifo:out_endofpacket -> nw_from_hps_s1_agent:rf_sink_endofpacket
	wire          nw_from_hps_s1_agent_rdata_fifo_src_valid;                                   // nw_from_hps_s1_agent:rdata_fifo_src_valid -> nw_from_hps_s1_agent_rdata_fifo:in_valid
	wire   [33:0] nw_from_hps_s1_agent_rdata_fifo_src_data;                                    // nw_from_hps_s1_agent:rdata_fifo_src_data -> nw_from_hps_s1_agent_rdata_fifo:in_data
	wire          nw_from_hps_s1_agent_rdata_fifo_src_ready;                                   // nw_from_hps_s1_agent_rdata_fifo:in_ready -> nw_from_hps_s1_agent:rdata_fifo_src_ready
	wire   [31:0] ne_from_hps_s1_agent_m0_readdata;                                            // ne_from_hps_s1_translator:uav_readdata -> ne_from_hps_s1_agent:m0_readdata
	wire          ne_from_hps_s1_agent_m0_waitrequest;                                         // ne_from_hps_s1_translator:uav_waitrequest -> ne_from_hps_s1_agent:m0_waitrequest
	wire          ne_from_hps_s1_agent_m0_debugaccess;                                         // ne_from_hps_s1_agent:m0_debugaccess -> ne_from_hps_s1_translator:uav_debugaccess
	wire   [20:0] ne_from_hps_s1_agent_m0_address;                                             // ne_from_hps_s1_agent:m0_address -> ne_from_hps_s1_translator:uav_address
	wire    [3:0] ne_from_hps_s1_agent_m0_byteenable;                                          // ne_from_hps_s1_agent:m0_byteenable -> ne_from_hps_s1_translator:uav_byteenable
	wire          ne_from_hps_s1_agent_m0_read;                                                // ne_from_hps_s1_agent:m0_read -> ne_from_hps_s1_translator:uav_read
	wire          ne_from_hps_s1_agent_m0_readdatavalid;                                       // ne_from_hps_s1_translator:uav_readdatavalid -> ne_from_hps_s1_agent:m0_readdatavalid
	wire          ne_from_hps_s1_agent_m0_lock;                                                // ne_from_hps_s1_agent:m0_lock -> ne_from_hps_s1_translator:uav_lock
	wire   [31:0] ne_from_hps_s1_agent_m0_writedata;                                           // ne_from_hps_s1_agent:m0_writedata -> ne_from_hps_s1_translator:uav_writedata
	wire          ne_from_hps_s1_agent_m0_write;                                               // ne_from_hps_s1_agent:m0_write -> ne_from_hps_s1_translator:uav_write
	wire    [2:0] ne_from_hps_s1_agent_m0_burstcount;                                          // ne_from_hps_s1_agent:m0_burstcount -> ne_from_hps_s1_translator:uav_burstcount
	wire          ne_from_hps_s1_agent_rf_source_valid;                                        // ne_from_hps_s1_agent:rf_source_valid -> ne_from_hps_s1_agent_rsp_fifo:in_valid
	wire  [120:0] ne_from_hps_s1_agent_rf_source_data;                                         // ne_from_hps_s1_agent:rf_source_data -> ne_from_hps_s1_agent_rsp_fifo:in_data
	wire          ne_from_hps_s1_agent_rf_source_ready;                                        // ne_from_hps_s1_agent_rsp_fifo:in_ready -> ne_from_hps_s1_agent:rf_source_ready
	wire          ne_from_hps_s1_agent_rf_source_startofpacket;                                // ne_from_hps_s1_agent:rf_source_startofpacket -> ne_from_hps_s1_agent_rsp_fifo:in_startofpacket
	wire          ne_from_hps_s1_agent_rf_source_endofpacket;                                  // ne_from_hps_s1_agent:rf_source_endofpacket -> ne_from_hps_s1_agent_rsp_fifo:in_endofpacket
	wire          ne_from_hps_s1_agent_rsp_fifo_out_valid;                                     // ne_from_hps_s1_agent_rsp_fifo:out_valid -> ne_from_hps_s1_agent:rf_sink_valid
	wire  [120:0] ne_from_hps_s1_agent_rsp_fifo_out_data;                                      // ne_from_hps_s1_agent_rsp_fifo:out_data -> ne_from_hps_s1_agent:rf_sink_data
	wire          ne_from_hps_s1_agent_rsp_fifo_out_ready;                                     // ne_from_hps_s1_agent:rf_sink_ready -> ne_from_hps_s1_agent_rsp_fifo:out_ready
	wire          ne_from_hps_s1_agent_rsp_fifo_out_startofpacket;                             // ne_from_hps_s1_agent_rsp_fifo:out_startofpacket -> ne_from_hps_s1_agent:rf_sink_startofpacket
	wire          ne_from_hps_s1_agent_rsp_fifo_out_endofpacket;                               // ne_from_hps_s1_agent_rsp_fifo:out_endofpacket -> ne_from_hps_s1_agent:rf_sink_endofpacket
	wire          ne_from_hps_s1_agent_rdata_fifo_src_valid;                                   // ne_from_hps_s1_agent:rdata_fifo_src_valid -> ne_from_hps_s1_agent_rdata_fifo:in_valid
	wire   [33:0] ne_from_hps_s1_agent_rdata_fifo_src_data;                                    // ne_from_hps_s1_agent:rdata_fifo_src_data -> ne_from_hps_s1_agent_rdata_fifo:in_data
	wire          ne_from_hps_s1_agent_rdata_fifo_src_ready;                                   // ne_from_hps_s1_agent_rdata_fifo:in_ready -> ne_from_hps_s1_agent:rdata_fifo_src_ready
	wire   [31:0] nnw_from_hps_s1_agent_m0_readdata;                                           // nnw_from_hps_s1_translator:uav_readdata -> nnw_from_hps_s1_agent:m0_readdata
	wire          nnw_from_hps_s1_agent_m0_waitrequest;                                        // nnw_from_hps_s1_translator:uav_waitrequest -> nnw_from_hps_s1_agent:m0_waitrequest
	wire          nnw_from_hps_s1_agent_m0_debugaccess;                                        // nnw_from_hps_s1_agent:m0_debugaccess -> nnw_from_hps_s1_translator:uav_debugaccess
	wire   [20:0] nnw_from_hps_s1_agent_m0_address;                                            // nnw_from_hps_s1_agent:m0_address -> nnw_from_hps_s1_translator:uav_address
	wire    [3:0] nnw_from_hps_s1_agent_m0_byteenable;                                         // nnw_from_hps_s1_agent:m0_byteenable -> nnw_from_hps_s1_translator:uav_byteenable
	wire          nnw_from_hps_s1_agent_m0_read;                                               // nnw_from_hps_s1_agent:m0_read -> nnw_from_hps_s1_translator:uav_read
	wire          nnw_from_hps_s1_agent_m0_readdatavalid;                                      // nnw_from_hps_s1_translator:uav_readdatavalid -> nnw_from_hps_s1_agent:m0_readdatavalid
	wire          nnw_from_hps_s1_agent_m0_lock;                                               // nnw_from_hps_s1_agent:m0_lock -> nnw_from_hps_s1_translator:uav_lock
	wire   [31:0] nnw_from_hps_s1_agent_m0_writedata;                                          // nnw_from_hps_s1_agent:m0_writedata -> nnw_from_hps_s1_translator:uav_writedata
	wire          nnw_from_hps_s1_agent_m0_write;                                              // nnw_from_hps_s1_agent:m0_write -> nnw_from_hps_s1_translator:uav_write
	wire    [2:0] nnw_from_hps_s1_agent_m0_burstcount;                                         // nnw_from_hps_s1_agent:m0_burstcount -> nnw_from_hps_s1_translator:uav_burstcount
	wire          nnw_from_hps_s1_agent_rf_source_valid;                                       // nnw_from_hps_s1_agent:rf_source_valid -> nnw_from_hps_s1_agent_rsp_fifo:in_valid
	wire  [120:0] nnw_from_hps_s1_agent_rf_source_data;                                        // nnw_from_hps_s1_agent:rf_source_data -> nnw_from_hps_s1_agent_rsp_fifo:in_data
	wire          nnw_from_hps_s1_agent_rf_source_ready;                                       // nnw_from_hps_s1_agent_rsp_fifo:in_ready -> nnw_from_hps_s1_agent:rf_source_ready
	wire          nnw_from_hps_s1_agent_rf_source_startofpacket;                               // nnw_from_hps_s1_agent:rf_source_startofpacket -> nnw_from_hps_s1_agent_rsp_fifo:in_startofpacket
	wire          nnw_from_hps_s1_agent_rf_source_endofpacket;                                 // nnw_from_hps_s1_agent:rf_source_endofpacket -> nnw_from_hps_s1_agent_rsp_fifo:in_endofpacket
	wire          nnw_from_hps_s1_agent_rsp_fifo_out_valid;                                    // nnw_from_hps_s1_agent_rsp_fifo:out_valid -> nnw_from_hps_s1_agent:rf_sink_valid
	wire  [120:0] nnw_from_hps_s1_agent_rsp_fifo_out_data;                                     // nnw_from_hps_s1_agent_rsp_fifo:out_data -> nnw_from_hps_s1_agent:rf_sink_data
	wire          nnw_from_hps_s1_agent_rsp_fifo_out_ready;                                    // nnw_from_hps_s1_agent:rf_sink_ready -> nnw_from_hps_s1_agent_rsp_fifo:out_ready
	wire          nnw_from_hps_s1_agent_rsp_fifo_out_startofpacket;                            // nnw_from_hps_s1_agent_rsp_fifo:out_startofpacket -> nnw_from_hps_s1_agent:rf_sink_startofpacket
	wire          nnw_from_hps_s1_agent_rsp_fifo_out_endofpacket;                              // nnw_from_hps_s1_agent_rsp_fifo:out_endofpacket -> nnw_from_hps_s1_agent:rf_sink_endofpacket
	wire          nnw_from_hps_s1_agent_rdata_fifo_src_valid;                                  // nnw_from_hps_s1_agent:rdata_fifo_src_valid -> nnw_from_hps_s1_agent_rdata_fifo:in_valid
	wire   [33:0] nnw_from_hps_s1_agent_rdata_fifo_src_data;                                   // nnw_from_hps_s1_agent:rdata_fifo_src_data -> nnw_from_hps_s1_agent_rdata_fifo:in_data
	wire          nnw_from_hps_s1_agent_rdata_fifo_src_ready;                                  // nnw_from_hps_s1_agent_rdata_fifo:in_ready -> nnw_from_hps_s1_agent:rdata_fifo_src_ready
	wire   [31:0] nne_from_hps_s1_agent_m0_readdata;                                           // nne_from_hps_s1_translator:uav_readdata -> nne_from_hps_s1_agent:m0_readdata
	wire          nne_from_hps_s1_agent_m0_waitrequest;                                        // nne_from_hps_s1_translator:uav_waitrequest -> nne_from_hps_s1_agent:m0_waitrequest
	wire          nne_from_hps_s1_agent_m0_debugaccess;                                        // nne_from_hps_s1_agent:m0_debugaccess -> nne_from_hps_s1_translator:uav_debugaccess
	wire   [20:0] nne_from_hps_s1_agent_m0_address;                                            // nne_from_hps_s1_agent:m0_address -> nne_from_hps_s1_translator:uav_address
	wire    [3:0] nne_from_hps_s1_agent_m0_byteenable;                                         // nne_from_hps_s1_agent:m0_byteenable -> nne_from_hps_s1_translator:uav_byteenable
	wire          nne_from_hps_s1_agent_m0_read;                                               // nne_from_hps_s1_agent:m0_read -> nne_from_hps_s1_translator:uav_read
	wire          nne_from_hps_s1_agent_m0_readdatavalid;                                      // nne_from_hps_s1_translator:uav_readdatavalid -> nne_from_hps_s1_agent:m0_readdatavalid
	wire          nne_from_hps_s1_agent_m0_lock;                                               // nne_from_hps_s1_agent:m0_lock -> nne_from_hps_s1_translator:uav_lock
	wire   [31:0] nne_from_hps_s1_agent_m0_writedata;                                          // nne_from_hps_s1_agent:m0_writedata -> nne_from_hps_s1_translator:uav_writedata
	wire          nne_from_hps_s1_agent_m0_write;                                              // nne_from_hps_s1_agent:m0_write -> nne_from_hps_s1_translator:uav_write
	wire    [2:0] nne_from_hps_s1_agent_m0_burstcount;                                         // nne_from_hps_s1_agent:m0_burstcount -> nne_from_hps_s1_translator:uav_burstcount
	wire          nne_from_hps_s1_agent_rf_source_valid;                                       // nne_from_hps_s1_agent:rf_source_valid -> nne_from_hps_s1_agent_rsp_fifo:in_valid
	wire  [120:0] nne_from_hps_s1_agent_rf_source_data;                                        // nne_from_hps_s1_agent:rf_source_data -> nne_from_hps_s1_agent_rsp_fifo:in_data
	wire          nne_from_hps_s1_agent_rf_source_ready;                                       // nne_from_hps_s1_agent_rsp_fifo:in_ready -> nne_from_hps_s1_agent:rf_source_ready
	wire          nne_from_hps_s1_agent_rf_source_startofpacket;                               // nne_from_hps_s1_agent:rf_source_startofpacket -> nne_from_hps_s1_agent_rsp_fifo:in_startofpacket
	wire          nne_from_hps_s1_agent_rf_source_endofpacket;                                 // nne_from_hps_s1_agent:rf_source_endofpacket -> nne_from_hps_s1_agent_rsp_fifo:in_endofpacket
	wire          nne_from_hps_s1_agent_rsp_fifo_out_valid;                                    // nne_from_hps_s1_agent_rsp_fifo:out_valid -> nne_from_hps_s1_agent:rf_sink_valid
	wire  [120:0] nne_from_hps_s1_agent_rsp_fifo_out_data;                                     // nne_from_hps_s1_agent_rsp_fifo:out_data -> nne_from_hps_s1_agent:rf_sink_data
	wire          nne_from_hps_s1_agent_rsp_fifo_out_ready;                                    // nne_from_hps_s1_agent:rf_sink_ready -> nne_from_hps_s1_agent_rsp_fifo:out_ready
	wire          nne_from_hps_s1_agent_rsp_fifo_out_startofpacket;                            // nne_from_hps_s1_agent_rsp_fifo:out_startofpacket -> nne_from_hps_s1_agent:rf_sink_startofpacket
	wire          nne_from_hps_s1_agent_rsp_fifo_out_endofpacket;                              // nne_from_hps_s1_agent_rsp_fifo:out_endofpacket -> nne_from_hps_s1_agent:rf_sink_endofpacket
	wire          nne_from_hps_s1_agent_rdata_fifo_src_valid;                                  // nne_from_hps_s1_agent:rdata_fifo_src_valid -> nne_from_hps_s1_agent_rdata_fifo:in_valid
	wire   [33:0] nne_from_hps_s1_agent_rdata_fifo_src_data;                                   // nne_from_hps_s1_agent:rdata_fifo_src_data -> nne_from_hps_s1_agent_rdata_fifo:in_data
	wire          nne_from_hps_s1_agent_rdata_fifo_src_ready;                                  // nne_from_hps_s1_agent_rdata_fifo:in_ready -> nne_from_hps_s1_agent:rdata_fifo_src_ready
	wire   [31:0] nsw_from_hps_s1_agent_m0_readdata;                                           // nsw_from_hps_s1_translator:uav_readdata -> nsw_from_hps_s1_agent:m0_readdata
	wire          nsw_from_hps_s1_agent_m0_waitrequest;                                        // nsw_from_hps_s1_translator:uav_waitrequest -> nsw_from_hps_s1_agent:m0_waitrequest
	wire          nsw_from_hps_s1_agent_m0_debugaccess;                                        // nsw_from_hps_s1_agent:m0_debugaccess -> nsw_from_hps_s1_translator:uav_debugaccess
	wire   [20:0] nsw_from_hps_s1_agent_m0_address;                                            // nsw_from_hps_s1_agent:m0_address -> nsw_from_hps_s1_translator:uav_address
	wire    [3:0] nsw_from_hps_s1_agent_m0_byteenable;                                         // nsw_from_hps_s1_agent:m0_byteenable -> nsw_from_hps_s1_translator:uav_byteenable
	wire          nsw_from_hps_s1_agent_m0_read;                                               // nsw_from_hps_s1_agent:m0_read -> nsw_from_hps_s1_translator:uav_read
	wire          nsw_from_hps_s1_agent_m0_readdatavalid;                                      // nsw_from_hps_s1_translator:uav_readdatavalid -> nsw_from_hps_s1_agent:m0_readdatavalid
	wire          nsw_from_hps_s1_agent_m0_lock;                                               // nsw_from_hps_s1_agent:m0_lock -> nsw_from_hps_s1_translator:uav_lock
	wire   [31:0] nsw_from_hps_s1_agent_m0_writedata;                                          // nsw_from_hps_s1_agent:m0_writedata -> nsw_from_hps_s1_translator:uav_writedata
	wire          nsw_from_hps_s1_agent_m0_write;                                              // nsw_from_hps_s1_agent:m0_write -> nsw_from_hps_s1_translator:uav_write
	wire    [2:0] nsw_from_hps_s1_agent_m0_burstcount;                                         // nsw_from_hps_s1_agent:m0_burstcount -> nsw_from_hps_s1_translator:uav_burstcount
	wire          nsw_from_hps_s1_agent_rf_source_valid;                                       // nsw_from_hps_s1_agent:rf_source_valid -> nsw_from_hps_s1_agent_rsp_fifo:in_valid
	wire  [120:0] nsw_from_hps_s1_agent_rf_source_data;                                        // nsw_from_hps_s1_agent:rf_source_data -> nsw_from_hps_s1_agent_rsp_fifo:in_data
	wire          nsw_from_hps_s1_agent_rf_source_ready;                                       // nsw_from_hps_s1_agent_rsp_fifo:in_ready -> nsw_from_hps_s1_agent:rf_source_ready
	wire          nsw_from_hps_s1_agent_rf_source_startofpacket;                               // nsw_from_hps_s1_agent:rf_source_startofpacket -> nsw_from_hps_s1_agent_rsp_fifo:in_startofpacket
	wire          nsw_from_hps_s1_agent_rf_source_endofpacket;                                 // nsw_from_hps_s1_agent:rf_source_endofpacket -> nsw_from_hps_s1_agent_rsp_fifo:in_endofpacket
	wire          nsw_from_hps_s1_agent_rsp_fifo_out_valid;                                    // nsw_from_hps_s1_agent_rsp_fifo:out_valid -> nsw_from_hps_s1_agent:rf_sink_valid
	wire  [120:0] nsw_from_hps_s1_agent_rsp_fifo_out_data;                                     // nsw_from_hps_s1_agent_rsp_fifo:out_data -> nsw_from_hps_s1_agent:rf_sink_data
	wire          nsw_from_hps_s1_agent_rsp_fifo_out_ready;                                    // nsw_from_hps_s1_agent:rf_sink_ready -> nsw_from_hps_s1_agent_rsp_fifo:out_ready
	wire          nsw_from_hps_s1_agent_rsp_fifo_out_startofpacket;                            // nsw_from_hps_s1_agent_rsp_fifo:out_startofpacket -> nsw_from_hps_s1_agent:rf_sink_startofpacket
	wire          nsw_from_hps_s1_agent_rsp_fifo_out_endofpacket;                              // nsw_from_hps_s1_agent_rsp_fifo:out_endofpacket -> nsw_from_hps_s1_agent:rf_sink_endofpacket
	wire          nsw_from_hps_s1_agent_rdata_fifo_src_valid;                                  // nsw_from_hps_s1_agent:rdata_fifo_src_valid -> nsw_from_hps_s1_agent_rdata_fifo:in_valid
	wire   [33:0] nsw_from_hps_s1_agent_rdata_fifo_src_data;                                   // nsw_from_hps_s1_agent:rdata_fifo_src_data -> nsw_from_hps_s1_agent_rdata_fifo:in_data
	wire          nsw_from_hps_s1_agent_rdata_fifo_src_ready;                                  // nsw_from_hps_s1_agent_rdata_fifo:in_ready -> nsw_from_hps_s1_agent:rdata_fifo_src_ready
	wire   [31:0] nse_from_hps_s1_agent_m0_readdata;                                           // nse_from_hps_s1_translator:uav_readdata -> nse_from_hps_s1_agent:m0_readdata
	wire          nse_from_hps_s1_agent_m0_waitrequest;                                        // nse_from_hps_s1_translator:uav_waitrequest -> nse_from_hps_s1_agent:m0_waitrequest
	wire          nse_from_hps_s1_agent_m0_debugaccess;                                        // nse_from_hps_s1_agent:m0_debugaccess -> nse_from_hps_s1_translator:uav_debugaccess
	wire   [20:0] nse_from_hps_s1_agent_m0_address;                                            // nse_from_hps_s1_agent:m0_address -> nse_from_hps_s1_translator:uav_address
	wire    [3:0] nse_from_hps_s1_agent_m0_byteenable;                                         // nse_from_hps_s1_agent:m0_byteenable -> nse_from_hps_s1_translator:uav_byteenable
	wire          nse_from_hps_s1_agent_m0_read;                                               // nse_from_hps_s1_agent:m0_read -> nse_from_hps_s1_translator:uav_read
	wire          nse_from_hps_s1_agent_m0_readdatavalid;                                      // nse_from_hps_s1_translator:uav_readdatavalid -> nse_from_hps_s1_agent:m0_readdatavalid
	wire          nse_from_hps_s1_agent_m0_lock;                                               // nse_from_hps_s1_agent:m0_lock -> nse_from_hps_s1_translator:uav_lock
	wire   [31:0] nse_from_hps_s1_agent_m0_writedata;                                          // nse_from_hps_s1_agent:m0_writedata -> nse_from_hps_s1_translator:uav_writedata
	wire          nse_from_hps_s1_agent_m0_write;                                              // nse_from_hps_s1_agent:m0_write -> nse_from_hps_s1_translator:uav_write
	wire    [2:0] nse_from_hps_s1_agent_m0_burstcount;                                         // nse_from_hps_s1_agent:m0_burstcount -> nse_from_hps_s1_translator:uav_burstcount
	wire          nse_from_hps_s1_agent_rf_source_valid;                                       // nse_from_hps_s1_agent:rf_source_valid -> nse_from_hps_s1_agent_rsp_fifo:in_valid
	wire  [120:0] nse_from_hps_s1_agent_rf_source_data;                                        // nse_from_hps_s1_agent:rf_source_data -> nse_from_hps_s1_agent_rsp_fifo:in_data
	wire          nse_from_hps_s1_agent_rf_source_ready;                                       // nse_from_hps_s1_agent_rsp_fifo:in_ready -> nse_from_hps_s1_agent:rf_source_ready
	wire          nse_from_hps_s1_agent_rf_source_startofpacket;                               // nse_from_hps_s1_agent:rf_source_startofpacket -> nse_from_hps_s1_agent_rsp_fifo:in_startofpacket
	wire          nse_from_hps_s1_agent_rf_source_endofpacket;                                 // nse_from_hps_s1_agent:rf_source_endofpacket -> nse_from_hps_s1_agent_rsp_fifo:in_endofpacket
	wire          nse_from_hps_s1_agent_rsp_fifo_out_valid;                                    // nse_from_hps_s1_agent_rsp_fifo:out_valid -> nse_from_hps_s1_agent:rf_sink_valid
	wire  [120:0] nse_from_hps_s1_agent_rsp_fifo_out_data;                                     // nse_from_hps_s1_agent_rsp_fifo:out_data -> nse_from_hps_s1_agent:rf_sink_data
	wire          nse_from_hps_s1_agent_rsp_fifo_out_ready;                                    // nse_from_hps_s1_agent:rf_sink_ready -> nse_from_hps_s1_agent_rsp_fifo:out_ready
	wire          nse_from_hps_s1_agent_rsp_fifo_out_startofpacket;                            // nse_from_hps_s1_agent_rsp_fifo:out_startofpacket -> nse_from_hps_s1_agent:rf_sink_startofpacket
	wire          nse_from_hps_s1_agent_rsp_fifo_out_endofpacket;                              // nse_from_hps_s1_agent_rsp_fifo:out_endofpacket -> nse_from_hps_s1_agent:rf_sink_endofpacket
	wire          nse_from_hps_s1_agent_rdata_fifo_src_valid;                                  // nse_from_hps_s1_agent:rdata_fifo_src_valid -> nse_from_hps_s1_agent_rdata_fifo:in_valid
	wire   [33:0] nse_from_hps_s1_agent_rdata_fifo_src_data;                                   // nse_from_hps_s1_agent:rdata_fifo_src_data -> nse_from_hps_s1_agent_rdata_fifo:in_data
	wire          nse_from_hps_s1_agent_rdata_fifo_src_ready;                                  // nse_from_hps_s1_agent_rdata_fifo:in_ready -> nse_from_hps_s1_agent:rdata_fifo_src_ready
	wire   [31:0] n0_from_fpga_s1_agent_m0_readdata;                                           // n0_from_fpga_s1_translator:uav_readdata -> n0_from_fpga_s1_agent:m0_readdata
	wire          n0_from_fpga_s1_agent_m0_waitrequest;                                        // n0_from_fpga_s1_translator:uav_waitrequest -> n0_from_fpga_s1_agent:m0_waitrequest
	wire          n0_from_fpga_s1_agent_m0_debugaccess;                                        // n0_from_fpga_s1_agent:m0_debugaccess -> n0_from_fpga_s1_translator:uav_debugaccess
	wire   [20:0] n0_from_fpga_s1_agent_m0_address;                                            // n0_from_fpga_s1_agent:m0_address -> n0_from_fpga_s1_translator:uav_address
	wire    [3:0] n0_from_fpga_s1_agent_m0_byteenable;                                         // n0_from_fpga_s1_agent:m0_byteenable -> n0_from_fpga_s1_translator:uav_byteenable
	wire          n0_from_fpga_s1_agent_m0_read;                                               // n0_from_fpga_s1_agent:m0_read -> n0_from_fpga_s1_translator:uav_read
	wire          n0_from_fpga_s1_agent_m0_readdatavalid;                                      // n0_from_fpga_s1_translator:uav_readdatavalid -> n0_from_fpga_s1_agent:m0_readdatavalid
	wire          n0_from_fpga_s1_agent_m0_lock;                                               // n0_from_fpga_s1_agent:m0_lock -> n0_from_fpga_s1_translator:uav_lock
	wire   [31:0] n0_from_fpga_s1_agent_m0_writedata;                                          // n0_from_fpga_s1_agent:m0_writedata -> n0_from_fpga_s1_translator:uav_writedata
	wire          n0_from_fpga_s1_agent_m0_write;                                              // n0_from_fpga_s1_agent:m0_write -> n0_from_fpga_s1_translator:uav_write
	wire    [2:0] n0_from_fpga_s1_agent_m0_burstcount;                                         // n0_from_fpga_s1_agent:m0_burstcount -> n0_from_fpga_s1_translator:uav_burstcount
	wire          n0_from_fpga_s1_agent_rf_source_valid;                                       // n0_from_fpga_s1_agent:rf_source_valid -> n0_from_fpga_s1_agent_rsp_fifo:in_valid
	wire  [120:0] n0_from_fpga_s1_agent_rf_source_data;                                        // n0_from_fpga_s1_agent:rf_source_data -> n0_from_fpga_s1_agent_rsp_fifo:in_data
	wire          n0_from_fpga_s1_agent_rf_source_ready;                                       // n0_from_fpga_s1_agent_rsp_fifo:in_ready -> n0_from_fpga_s1_agent:rf_source_ready
	wire          n0_from_fpga_s1_agent_rf_source_startofpacket;                               // n0_from_fpga_s1_agent:rf_source_startofpacket -> n0_from_fpga_s1_agent_rsp_fifo:in_startofpacket
	wire          n0_from_fpga_s1_agent_rf_source_endofpacket;                                 // n0_from_fpga_s1_agent:rf_source_endofpacket -> n0_from_fpga_s1_agent_rsp_fifo:in_endofpacket
	wire          n0_from_fpga_s1_agent_rsp_fifo_out_valid;                                    // n0_from_fpga_s1_agent_rsp_fifo:out_valid -> n0_from_fpga_s1_agent:rf_sink_valid
	wire  [120:0] n0_from_fpga_s1_agent_rsp_fifo_out_data;                                     // n0_from_fpga_s1_agent_rsp_fifo:out_data -> n0_from_fpga_s1_agent:rf_sink_data
	wire          n0_from_fpga_s1_agent_rsp_fifo_out_ready;                                    // n0_from_fpga_s1_agent:rf_sink_ready -> n0_from_fpga_s1_agent_rsp_fifo:out_ready
	wire          n0_from_fpga_s1_agent_rsp_fifo_out_startofpacket;                            // n0_from_fpga_s1_agent_rsp_fifo:out_startofpacket -> n0_from_fpga_s1_agent:rf_sink_startofpacket
	wire          n0_from_fpga_s1_agent_rsp_fifo_out_endofpacket;                              // n0_from_fpga_s1_agent_rsp_fifo:out_endofpacket -> n0_from_fpga_s1_agent:rf_sink_endofpacket
	wire          n0_from_fpga_s1_agent_rdata_fifo_src_valid;                                  // n0_from_fpga_s1_agent:rdata_fifo_src_valid -> n0_from_fpga_s1_agent_rdata_fifo:in_valid
	wire   [33:0] n0_from_fpga_s1_agent_rdata_fifo_src_data;                                   // n0_from_fpga_s1_agent:rdata_fifo_src_data -> n0_from_fpga_s1_agent_rdata_fifo:in_data
	wire          n0_from_fpga_s1_agent_rdata_fifo_src_ready;                                  // n0_from_fpga_s1_agent_rdata_fifo:in_ready -> n0_from_fpga_s1_agent:rdata_fifo_src_ready
	wire   [31:0] nn_from_fpga_s1_agent_m0_readdata;                                           // nn_from_fpga_s1_translator:uav_readdata -> nn_from_fpga_s1_agent:m0_readdata
	wire          nn_from_fpga_s1_agent_m0_waitrequest;                                        // nn_from_fpga_s1_translator:uav_waitrequest -> nn_from_fpga_s1_agent:m0_waitrequest
	wire          nn_from_fpga_s1_agent_m0_debugaccess;                                        // nn_from_fpga_s1_agent:m0_debugaccess -> nn_from_fpga_s1_translator:uav_debugaccess
	wire   [20:0] nn_from_fpga_s1_agent_m0_address;                                            // nn_from_fpga_s1_agent:m0_address -> nn_from_fpga_s1_translator:uav_address
	wire    [3:0] nn_from_fpga_s1_agent_m0_byteenable;                                         // nn_from_fpga_s1_agent:m0_byteenable -> nn_from_fpga_s1_translator:uav_byteenable
	wire          nn_from_fpga_s1_agent_m0_read;                                               // nn_from_fpga_s1_agent:m0_read -> nn_from_fpga_s1_translator:uav_read
	wire          nn_from_fpga_s1_agent_m0_readdatavalid;                                      // nn_from_fpga_s1_translator:uav_readdatavalid -> nn_from_fpga_s1_agent:m0_readdatavalid
	wire          nn_from_fpga_s1_agent_m0_lock;                                               // nn_from_fpga_s1_agent:m0_lock -> nn_from_fpga_s1_translator:uav_lock
	wire   [31:0] nn_from_fpga_s1_agent_m0_writedata;                                          // nn_from_fpga_s1_agent:m0_writedata -> nn_from_fpga_s1_translator:uav_writedata
	wire          nn_from_fpga_s1_agent_m0_write;                                              // nn_from_fpga_s1_agent:m0_write -> nn_from_fpga_s1_translator:uav_write
	wire    [2:0] nn_from_fpga_s1_agent_m0_burstcount;                                         // nn_from_fpga_s1_agent:m0_burstcount -> nn_from_fpga_s1_translator:uav_burstcount
	wire          nn_from_fpga_s1_agent_rf_source_valid;                                       // nn_from_fpga_s1_agent:rf_source_valid -> nn_from_fpga_s1_agent_rsp_fifo:in_valid
	wire  [120:0] nn_from_fpga_s1_agent_rf_source_data;                                        // nn_from_fpga_s1_agent:rf_source_data -> nn_from_fpga_s1_agent_rsp_fifo:in_data
	wire          nn_from_fpga_s1_agent_rf_source_ready;                                       // nn_from_fpga_s1_agent_rsp_fifo:in_ready -> nn_from_fpga_s1_agent:rf_source_ready
	wire          nn_from_fpga_s1_agent_rf_source_startofpacket;                               // nn_from_fpga_s1_agent:rf_source_startofpacket -> nn_from_fpga_s1_agent_rsp_fifo:in_startofpacket
	wire          nn_from_fpga_s1_agent_rf_source_endofpacket;                                 // nn_from_fpga_s1_agent:rf_source_endofpacket -> nn_from_fpga_s1_agent_rsp_fifo:in_endofpacket
	wire          nn_from_fpga_s1_agent_rsp_fifo_out_valid;                                    // nn_from_fpga_s1_agent_rsp_fifo:out_valid -> nn_from_fpga_s1_agent:rf_sink_valid
	wire  [120:0] nn_from_fpga_s1_agent_rsp_fifo_out_data;                                     // nn_from_fpga_s1_agent_rsp_fifo:out_data -> nn_from_fpga_s1_agent:rf_sink_data
	wire          nn_from_fpga_s1_agent_rsp_fifo_out_ready;                                    // nn_from_fpga_s1_agent:rf_sink_ready -> nn_from_fpga_s1_agent_rsp_fifo:out_ready
	wire          nn_from_fpga_s1_agent_rsp_fifo_out_startofpacket;                            // nn_from_fpga_s1_agent_rsp_fifo:out_startofpacket -> nn_from_fpga_s1_agent:rf_sink_startofpacket
	wire          nn_from_fpga_s1_agent_rsp_fifo_out_endofpacket;                              // nn_from_fpga_s1_agent_rsp_fifo:out_endofpacket -> nn_from_fpga_s1_agent:rf_sink_endofpacket
	wire          nn_from_fpga_s1_agent_rdata_fifo_src_valid;                                  // nn_from_fpga_s1_agent:rdata_fifo_src_valid -> nn_from_fpga_s1_agent_rdata_fifo:in_valid
	wire   [33:0] nn_from_fpga_s1_agent_rdata_fifo_src_data;                                   // nn_from_fpga_s1_agent:rdata_fifo_src_data -> nn_from_fpga_s1_agent_rdata_fifo:in_data
	wire          nn_from_fpga_s1_agent_rdata_fifo_src_ready;                                  // nn_from_fpga_s1_agent_rdata_fifo:in_ready -> nn_from_fpga_s1_agent:rdata_fifo_src_ready
	wire   [31:0] ns_from_fpga_s1_agent_m0_readdata;                                           // ns_from_fpga_s1_translator:uav_readdata -> ns_from_fpga_s1_agent:m0_readdata
	wire          ns_from_fpga_s1_agent_m0_waitrequest;                                        // ns_from_fpga_s1_translator:uav_waitrequest -> ns_from_fpga_s1_agent:m0_waitrequest
	wire          ns_from_fpga_s1_agent_m0_debugaccess;                                        // ns_from_fpga_s1_agent:m0_debugaccess -> ns_from_fpga_s1_translator:uav_debugaccess
	wire   [20:0] ns_from_fpga_s1_agent_m0_address;                                            // ns_from_fpga_s1_agent:m0_address -> ns_from_fpga_s1_translator:uav_address
	wire    [3:0] ns_from_fpga_s1_agent_m0_byteenable;                                         // ns_from_fpga_s1_agent:m0_byteenable -> ns_from_fpga_s1_translator:uav_byteenable
	wire          ns_from_fpga_s1_agent_m0_read;                                               // ns_from_fpga_s1_agent:m0_read -> ns_from_fpga_s1_translator:uav_read
	wire          ns_from_fpga_s1_agent_m0_readdatavalid;                                      // ns_from_fpga_s1_translator:uav_readdatavalid -> ns_from_fpga_s1_agent:m0_readdatavalid
	wire          ns_from_fpga_s1_agent_m0_lock;                                               // ns_from_fpga_s1_agent:m0_lock -> ns_from_fpga_s1_translator:uav_lock
	wire   [31:0] ns_from_fpga_s1_agent_m0_writedata;                                          // ns_from_fpga_s1_agent:m0_writedata -> ns_from_fpga_s1_translator:uav_writedata
	wire          ns_from_fpga_s1_agent_m0_write;                                              // ns_from_fpga_s1_agent:m0_write -> ns_from_fpga_s1_translator:uav_write
	wire    [2:0] ns_from_fpga_s1_agent_m0_burstcount;                                         // ns_from_fpga_s1_agent:m0_burstcount -> ns_from_fpga_s1_translator:uav_burstcount
	wire          ns_from_fpga_s1_agent_rf_source_valid;                                       // ns_from_fpga_s1_agent:rf_source_valid -> ns_from_fpga_s1_agent_rsp_fifo:in_valid
	wire  [120:0] ns_from_fpga_s1_agent_rf_source_data;                                        // ns_from_fpga_s1_agent:rf_source_data -> ns_from_fpga_s1_agent_rsp_fifo:in_data
	wire          ns_from_fpga_s1_agent_rf_source_ready;                                       // ns_from_fpga_s1_agent_rsp_fifo:in_ready -> ns_from_fpga_s1_agent:rf_source_ready
	wire          ns_from_fpga_s1_agent_rf_source_startofpacket;                               // ns_from_fpga_s1_agent:rf_source_startofpacket -> ns_from_fpga_s1_agent_rsp_fifo:in_startofpacket
	wire          ns_from_fpga_s1_agent_rf_source_endofpacket;                                 // ns_from_fpga_s1_agent:rf_source_endofpacket -> ns_from_fpga_s1_agent_rsp_fifo:in_endofpacket
	wire          ns_from_fpga_s1_agent_rsp_fifo_out_valid;                                    // ns_from_fpga_s1_agent_rsp_fifo:out_valid -> ns_from_fpga_s1_agent:rf_sink_valid
	wire  [120:0] ns_from_fpga_s1_agent_rsp_fifo_out_data;                                     // ns_from_fpga_s1_agent_rsp_fifo:out_data -> ns_from_fpga_s1_agent:rf_sink_data
	wire          ns_from_fpga_s1_agent_rsp_fifo_out_ready;                                    // ns_from_fpga_s1_agent:rf_sink_ready -> ns_from_fpga_s1_agent_rsp_fifo:out_ready
	wire          ns_from_fpga_s1_agent_rsp_fifo_out_startofpacket;                            // ns_from_fpga_s1_agent_rsp_fifo:out_startofpacket -> ns_from_fpga_s1_agent:rf_sink_startofpacket
	wire          ns_from_fpga_s1_agent_rsp_fifo_out_endofpacket;                              // ns_from_fpga_s1_agent_rsp_fifo:out_endofpacket -> ns_from_fpga_s1_agent:rf_sink_endofpacket
	wire          ns_from_fpga_s1_agent_rdata_fifo_src_valid;                                  // ns_from_fpga_s1_agent:rdata_fifo_src_valid -> ns_from_fpga_s1_agent_rdata_fifo:in_valid
	wire   [33:0] ns_from_fpga_s1_agent_rdata_fifo_src_data;                                   // ns_from_fpga_s1_agent:rdata_fifo_src_data -> ns_from_fpga_s1_agent_rdata_fifo:in_data
	wire          ns_from_fpga_s1_agent_rdata_fifo_src_ready;                                  // ns_from_fpga_s1_agent_rdata_fifo:in_ready -> ns_from_fpga_s1_agent:rdata_fifo_src_ready
	wire   [31:0] nw_from_fpga_s1_agent_m0_readdata;                                           // nw_from_fpga_s1_translator:uav_readdata -> nw_from_fpga_s1_agent:m0_readdata
	wire          nw_from_fpga_s1_agent_m0_waitrequest;                                        // nw_from_fpga_s1_translator:uav_waitrequest -> nw_from_fpga_s1_agent:m0_waitrequest
	wire          nw_from_fpga_s1_agent_m0_debugaccess;                                        // nw_from_fpga_s1_agent:m0_debugaccess -> nw_from_fpga_s1_translator:uav_debugaccess
	wire   [20:0] nw_from_fpga_s1_agent_m0_address;                                            // nw_from_fpga_s1_agent:m0_address -> nw_from_fpga_s1_translator:uav_address
	wire    [3:0] nw_from_fpga_s1_agent_m0_byteenable;                                         // nw_from_fpga_s1_agent:m0_byteenable -> nw_from_fpga_s1_translator:uav_byteenable
	wire          nw_from_fpga_s1_agent_m0_read;                                               // nw_from_fpga_s1_agent:m0_read -> nw_from_fpga_s1_translator:uav_read
	wire          nw_from_fpga_s1_agent_m0_readdatavalid;                                      // nw_from_fpga_s1_translator:uav_readdatavalid -> nw_from_fpga_s1_agent:m0_readdatavalid
	wire          nw_from_fpga_s1_agent_m0_lock;                                               // nw_from_fpga_s1_agent:m0_lock -> nw_from_fpga_s1_translator:uav_lock
	wire   [31:0] nw_from_fpga_s1_agent_m0_writedata;                                          // nw_from_fpga_s1_agent:m0_writedata -> nw_from_fpga_s1_translator:uav_writedata
	wire          nw_from_fpga_s1_agent_m0_write;                                              // nw_from_fpga_s1_agent:m0_write -> nw_from_fpga_s1_translator:uav_write
	wire    [2:0] nw_from_fpga_s1_agent_m0_burstcount;                                         // nw_from_fpga_s1_agent:m0_burstcount -> nw_from_fpga_s1_translator:uav_burstcount
	wire          nw_from_fpga_s1_agent_rf_source_valid;                                       // nw_from_fpga_s1_agent:rf_source_valid -> nw_from_fpga_s1_agent_rsp_fifo:in_valid
	wire  [120:0] nw_from_fpga_s1_agent_rf_source_data;                                        // nw_from_fpga_s1_agent:rf_source_data -> nw_from_fpga_s1_agent_rsp_fifo:in_data
	wire          nw_from_fpga_s1_agent_rf_source_ready;                                       // nw_from_fpga_s1_agent_rsp_fifo:in_ready -> nw_from_fpga_s1_agent:rf_source_ready
	wire          nw_from_fpga_s1_agent_rf_source_startofpacket;                               // nw_from_fpga_s1_agent:rf_source_startofpacket -> nw_from_fpga_s1_agent_rsp_fifo:in_startofpacket
	wire          nw_from_fpga_s1_agent_rf_source_endofpacket;                                 // nw_from_fpga_s1_agent:rf_source_endofpacket -> nw_from_fpga_s1_agent_rsp_fifo:in_endofpacket
	wire          nw_from_fpga_s1_agent_rsp_fifo_out_valid;                                    // nw_from_fpga_s1_agent_rsp_fifo:out_valid -> nw_from_fpga_s1_agent:rf_sink_valid
	wire  [120:0] nw_from_fpga_s1_agent_rsp_fifo_out_data;                                     // nw_from_fpga_s1_agent_rsp_fifo:out_data -> nw_from_fpga_s1_agent:rf_sink_data
	wire          nw_from_fpga_s1_agent_rsp_fifo_out_ready;                                    // nw_from_fpga_s1_agent:rf_sink_ready -> nw_from_fpga_s1_agent_rsp_fifo:out_ready
	wire          nw_from_fpga_s1_agent_rsp_fifo_out_startofpacket;                            // nw_from_fpga_s1_agent_rsp_fifo:out_startofpacket -> nw_from_fpga_s1_agent:rf_sink_startofpacket
	wire          nw_from_fpga_s1_agent_rsp_fifo_out_endofpacket;                              // nw_from_fpga_s1_agent_rsp_fifo:out_endofpacket -> nw_from_fpga_s1_agent:rf_sink_endofpacket
	wire          nw_from_fpga_s1_agent_rdata_fifo_src_valid;                                  // nw_from_fpga_s1_agent:rdata_fifo_src_valid -> nw_from_fpga_s1_agent_rdata_fifo:in_valid
	wire   [33:0] nw_from_fpga_s1_agent_rdata_fifo_src_data;                                   // nw_from_fpga_s1_agent:rdata_fifo_src_data -> nw_from_fpga_s1_agent_rdata_fifo:in_data
	wire          nw_from_fpga_s1_agent_rdata_fifo_src_ready;                                  // nw_from_fpga_s1_agent_rdata_fifo:in_ready -> nw_from_fpga_s1_agent:rdata_fifo_src_ready
	wire   [31:0] ne_from_fpga_s1_agent_m0_readdata;                                           // ne_from_fpga_s1_translator:uav_readdata -> ne_from_fpga_s1_agent:m0_readdata
	wire          ne_from_fpga_s1_agent_m0_waitrequest;                                        // ne_from_fpga_s1_translator:uav_waitrequest -> ne_from_fpga_s1_agent:m0_waitrequest
	wire          ne_from_fpga_s1_agent_m0_debugaccess;                                        // ne_from_fpga_s1_agent:m0_debugaccess -> ne_from_fpga_s1_translator:uav_debugaccess
	wire   [20:0] ne_from_fpga_s1_agent_m0_address;                                            // ne_from_fpga_s1_agent:m0_address -> ne_from_fpga_s1_translator:uav_address
	wire    [3:0] ne_from_fpga_s1_agent_m0_byteenable;                                         // ne_from_fpga_s1_agent:m0_byteenable -> ne_from_fpga_s1_translator:uav_byteenable
	wire          ne_from_fpga_s1_agent_m0_read;                                               // ne_from_fpga_s1_agent:m0_read -> ne_from_fpga_s1_translator:uav_read
	wire          ne_from_fpga_s1_agent_m0_readdatavalid;                                      // ne_from_fpga_s1_translator:uav_readdatavalid -> ne_from_fpga_s1_agent:m0_readdatavalid
	wire          ne_from_fpga_s1_agent_m0_lock;                                               // ne_from_fpga_s1_agent:m0_lock -> ne_from_fpga_s1_translator:uav_lock
	wire   [31:0] ne_from_fpga_s1_agent_m0_writedata;                                          // ne_from_fpga_s1_agent:m0_writedata -> ne_from_fpga_s1_translator:uav_writedata
	wire          ne_from_fpga_s1_agent_m0_write;                                              // ne_from_fpga_s1_agent:m0_write -> ne_from_fpga_s1_translator:uav_write
	wire    [2:0] ne_from_fpga_s1_agent_m0_burstcount;                                         // ne_from_fpga_s1_agent:m0_burstcount -> ne_from_fpga_s1_translator:uav_burstcount
	wire          ne_from_fpga_s1_agent_rf_source_valid;                                       // ne_from_fpga_s1_agent:rf_source_valid -> ne_from_fpga_s1_agent_rsp_fifo:in_valid
	wire  [120:0] ne_from_fpga_s1_agent_rf_source_data;                                        // ne_from_fpga_s1_agent:rf_source_data -> ne_from_fpga_s1_agent_rsp_fifo:in_data
	wire          ne_from_fpga_s1_agent_rf_source_ready;                                       // ne_from_fpga_s1_agent_rsp_fifo:in_ready -> ne_from_fpga_s1_agent:rf_source_ready
	wire          ne_from_fpga_s1_agent_rf_source_startofpacket;                               // ne_from_fpga_s1_agent:rf_source_startofpacket -> ne_from_fpga_s1_agent_rsp_fifo:in_startofpacket
	wire          ne_from_fpga_s1_agent_rf_source_endofpacket;                                 // ne_from_fpga_s1_agent:rf_source_endofpacket -> ne_from_fpga_s1_agent_rsp_fifo:in_endofpacket
	wire          ne_from_fpga_s1_agent_rsp_fifo_out_valid;                                    // ne_from_fpga_s1_agent_rsp_fifo:out_valid -> ne_from_fpga_s1_agent:rf_sink_valid
	wire  [120:0] ne_from_fpga_s1_agent_rsp_fifo_out_data;                                     // ne_from_fpga_s1_agent_rsp_fifo:out_data -> ne_from_fpga_s1_agent:rf_sink_data
	wire          ne_from_fpga_s1_agent_rsp_fifo_out_ready;                                    // ne_from_fpga_s1_agent:rf_sink_ready -> ne_from_fpga_s1_agent_rsp_fifo:out_ready
	wire          ne_from_fpga_s1_agent_rsp_fifo_out_startofpacket;                            // ne_from_fpga_s1_agent_rsp_fifo:out_startofpacket -> ne_from_fpga_s1_agent:rf_sink_startofpacket
	wire          ne_from_fpga_s1_agent_rsp_fifo_out_endofpacket;                              // ne_from_fpga_s1_agent_rsp_fifo:out_endofpacket -> ne_from_fpga_s1_agent:rf_sink_endofpacket
	wire          ne_from_fpga_s1_agent_rdata_fifo_src_valid;                                  // ne_from_fpga_s1_agent:rdata_fifo_src_valid -> ne_from_fpga_s1_agent_rdata_fifo:in_valid
	wire   [33:0] ne_from_fpga_s1_agent_rdata_fifo_src_data;                                   // ne_from_fpga_s1_agent:rdata_fifo_src_data -> ne_from_fpga_s1_agent_rdata_fifo:in_data
	wire          ne_from_fpga_s1_agent_rdata_fifo_src_ready;                                  // ne_from_fpga_s1_agent_rdata_fifo:in_ready -> ne_from_fpga_s1_agent:rdata_fifo_src_ready
	wire   [31:0] nnw_from_fpga_s1_agent_m0_readdata;                                          // nnw_from_fpga_s1_translator:uav_readdata -> nnw_from_fpga_s1_agent:m0_readdata
	wire          nnw_from_fpga_s1_agent_m0_waitrequest;                                       // nnw_from_fpga_s1_translator:uav_waitrequest -> nnw_from_fpga_s1_agent:m0_waitrequest
	wire          nnw_from_fpga_s1_agent_m0_debugaccess;                                       // nnw_from_fpga_s1_agent:m0_debugaccess -> nnw_from_fpga_s1_translator:uav_debugaccess
	wire   [20:0] nnw_from_fpga_s1_agent_m0_address;                                           // nnw_from_fpga_s1_agent:m0_address -> nnw_from_fpga_s1_translator:uav_address
	wire    [3:0] nnw_from_fpga_s1_agent_m0_byteenable;                                        // nnw_from_fpga_s1_agent:m0_byteenable -> nnw_from_fpga_s1_translator:uav_byteenable
	wire          nnw_from_fpga_s1_agent_m0_read;                                              // nnw_from_fpga_s1_agent:m0_read -> nnw_from_fpga_s1_translator:uav_read
	wire          nnw_from_fpga_s1_agent_m0_readdatavalid;                                     // nnw_from_fpga_s1_translator:uav_readdatavalid -> nnw_from_fpga_s1_agent:m0_readdatavalid
	wire          nnw_from_fpga_s1_agent_m0_lock;                                              // nnw_from_fpga_s1_agent:m0_lock -> nnw_from_fpga_s1_translator:uav_lock
	wire   [31:0] nnw_from_fpga_s1_agent_m0_writedata;                                         // nnw_from_fpga_s1_agent:m0_writedata -> nnw_from_fpga_s1_translator:uav_writedata
	wire          nnw_from_fpga_s1_agent_m0_write;                                             // nnw_from_fpga_s1_agent:m0_write -> nnw_from_fpga_s1_translator:uav_write
	wire    [2:0] nnw_from_fpga_s1_agent_m0_burstcount;                                        // nnw_from_fpga_s1_agent:m0_burstcount -> nnw_from_fpga_s1_translator:uav_burstcount
	wire          nnw_from_fpga_s1_agent_rf_source_valid;                                      // nnw_from_fpga_s1_agent:rf_source_valid -> nnw_from_fpga_s1_agent_rsp_fifo:in_valid
	wire  [120:0] nnw_from_fpga_s1_agent_rf_source_data;                                       // nnw_from_fpga_s1_agent:rf_source_data -> nnw_from_fpga_s1_agent_rsp_fifo:in_data
	wire          nnw_from_fpga_s1_agent_rf_source_ready;                                      // nnw_from_fpga_s1_agent_rsp_fifo:in_ready -> nnw_from_fpga_s1_agent:rf_source_ready
	wire          nnw_from_fpga_s1_agent_rf_source_startofpacket;                              // nnw_from_fpga_s1_agent:rf_source_startofpacket -> nnw_from_fpga_s1_agent_rsp_fifo:in_startofpacket
	wire          nnw_from_fpga_s1_agent_rf_source_endofpacket;                                // nnw_from_fpga_s1_agent:rf_source_endofpacket -> nnw_from_fpga_s1_agent_rsp_fifo:in_endofpacket
	wire          nnw_from_fpga_s1_agent_rsp_fifo_out_valid;                                   // nnw_from_fpga_s1_agent_rsp_fifo:out_valid -> nnw_from_fpga_s1_agent:rf_sink_valid
	wire  [120:0] nnw_from_fpga_s1_agent_rsp_fifo_out_data;                                    // nnw_from_fpga_s1_agent_rsp_fifo:out_data -> nnw_from_fpga_s1_agent:rf_sink_data
	wire          nnw_from_fpga_s1_agent_rsp_fifo_out_ready;                                   // nnw_from_fpga_s1_agent:rf_sink_ready -> nnw_from_fpga_s1_agent_rsp_fifo:out_ready
	wire          nnw_from_fpga_s1_agent_rsp_fifo_out_startofpacket;                           // nnw_from_fpga_s1_agent_rsp_fifo:out_startofpacket -> nnw_from_fpga_s1_agent:rf_sink_startofpacket
	wire          nnw_from_fpga_s1_agent_rsp_fifo_out_endofpacket;                             // nnw_from_fpga_s1_agent_rsp_fifo:out_endofpacket -> nnw_from_fpga_s1_agent:rf_sink_endofpacket
	wire          nnw_from_fpga_s1_agent_rdata_fifo_src_valid;                                 // nnw_from_fpga_s1_agent:rdata_fifo_src_valid -> nnw_from_fpga_s1_agent_rdata_fifo:in_valid
	wire   [33:0] nnw_from_fpga_s1_agent_rdata_fifo_src_data;                                  // nnw_from_fpga_s1_agent:rdata_fifo_src_data -> nnw_from_fpga_s1_agent_rdata_fifo:in_data
	wire          nnw_from_fpga_s1_agent_rdata_fifo_src_ready;                                 // nnw_from_fpga_s1_agent_rdata_fifo:in_ready -> nnw_from_fpga_s1_agent:rdata_fifo_src_ready
	wire   [31:0] nne_from_fpga_s1_agent_m0_readdata;                                          // nne_from_fpga_s1_translator:uav_readdata -> nne_from_fpga_s1_agent:m0_readdata
	wire          nne_from_fpga_s1_agent_m0_waitrequest;                                       // nne_from_fpga_s1_translator:uav_waitrequest -> nne_from_fpga_s1_agent:m0_waitrequest
	wire          nne_from_fpga_s1_agent_m0_debugaccess;                                       // nne_from_fpga_s1_agent:m0_debugaccess -> nne_from_fpga_s1_translator:uav_debugaccess
	wire   [20:0] nne_from_fpga_s1_agent_m0_address;                                           // nne_from_fpga_s1_agent:m0_address -> nne_from_fpga_s1_translator:uav_address
	wire    [3:0] nne_from_fpga_s1_agent_m0_byteenable;                                        // nne_from_fpga_s1_agent:m0_byteenable -> nne_from_fpga_s1_translator:uav_byteenable
	wire          nne_from_fpga_s1_agent_m0_read;                                              // nne_from_fpga_s1_agent:m0_read -> nne_from_fpga_s1_translator:uav_read
	wire          nne_from_fpga_s1_agent_m0_readdatavalid;                                     // nne_from_fpga_s1_translator:uav_readdatavalid -> nne_from_fpga_s1_agent:m0_readdatavalid
	wire          nne_from_fpga_s1_agent_m0_lock;                                              // nne_from_fpga_s1_agent:m0_lock -> nne_from_fpga_s1_translator:uav_lock
	wire   [31:0] nne_from_fpga_s1_agent_m0_writedata;                                         // nne_from_fpga_s1_agent:m0_writedata -> nne_from_fpga_s1_translator:uav_writedata
	wire          nne_from_fpga_s1_agent_m0_write;                                             // nne_from_fpga_s1_agent:m0_write -> nne_from_fpga_s1_translator:uav_write
	wire    [2:0] nne_from_fpga_s1_agent_m0_burstcount;                                        // nne_from_fpga_s1_agent:m0_burstcount -> nne_from_fpga_s1_translator:uav_burstcount
	wire          nne_from_fpga_s1_agent_rf_source_valid;                                      // nne_from_fpga_s1_agent:rf_source_valid -> nne_from_fpga_s1_agent_rsp_fifo:in_valid
	wire  [120:0] nne_from_fpga_s1_agent_rf_source_data;                                       // nne_from_fpga_s1_agent:rf_source_data -> nne_from_fpga_s1_agent_rsp_fifo:in_data
	wire          nne_from_fpga_s1_agent_rf_source_ready;                                      // nne_from_fpga_s1_agent_rsp_fifo:in_ready -> nne_from_fpga_s1_agent:rf_source_ready
	wire          nne_from_fpga_s1_agent_rf_source_startofpacket;                              // nne_from_fpga_s1_agent:rf_source_startofpacket -> nne_from_fpga_s1_agent_rsp_fifo:in_startofpacket
	wire          nne_from_fpga_s1_agent_rf_source_endofpacket;                                // nne_from_fpga_s1_agent:rf_source_endofpacket -> nne_from_fpga_s1_agent_rsp_fifo:in_endofpacket
	wire          nne_from_fpga_s1_agent_rsp_fifo_out_valid;                                   // nne_from_fpga_s1_agent_rsp_fifo:out_valid -> nne_from_fpga_s1_agent:rf_sink_valid
	wire  [120:0] nne_from_fpga_s1_agent_rsp_fifo_out_data;                                    // nne_from_fpga_s1_agent_rsp_fifo:out_data -> nne_from_fpga_s1_agent:rf_sink_data
	wire          nne_from_fpga_s1_agent_rsp_fifo_out_ready;                                   // nne_from_fpga_s1_agent:rf_sink_ready -> nne_from_fpga_s1_agent_rsp_fifo:out_ready
	wire          nne_from_fpga_s1_agent_rsp_fifo_out_startofpacket;                           // nne_from_fpga_s1_agent_rsp_fifo:out_startofpacket -> nne_from_fpga_s1_agent:rf_sink_startofpacket
	wire          nne_from_fpga_s1_agent_rsp_fifo_out_endofpacket;                             // nne_from_fpga_s1_agent_rsp_fifo:out_endofpacket -> nne_from_fpga_s1_agent:rf_sink_endofpacket
	wire          nne_from_fpga_s1_agent_rdata_fifo_src_valid;                                 // nne_from_fpga_s1_agent:rdata_fifo_src_valid -> nne_from_fpga_s1_agent_rdata_fifo:in_valid
	wire   [33:0] nne_from_fpga_s1_agent_rdata_fifo_src_data;                                  // nne_from_fpga_s1_agent:rdata_fifo_src_data -> nne_from_fpga_s1_agent_rdata_fifo:in_data
	wire          nne_from_fpga_s1_agent_rdata_fifo_src_ready;                                 // nne_from_fpga_s1_agent_rdata_fifo:in_ready -> nne_from_fpga_s1_agent:rdata_fifo_src_ready
	wire   [31:0] nsw_from_fpga_s1_agent_m0_readdata;                                          // nsw_from_fpga_s1_translator:uav_readdata -> nsw_from_fpga_s1_agent:m0_readdata
	wire          nsw_from_fpga_s1_agent_m0_waitrequest;                                       // nsw_from_fpga_s1_translator:uav_waitrequest -> nsw_from_fpga_s1_agent:m0_waitrequest
	wire          nsw_from_fpga_s1_agent_m0_debugaccess;                                       // nsw_from_fpga_s1_agent:m0_debugaccess -> nsw_from_fpga_s1_translator:uav_debugaccess
	wire   [20:0] nsw_from_fpga_s1_agent_m0_address;                                           // nsw_from_fpga_s1_agent:m0_address -> nsw_from_fpga_s1_translator:uav_address
	wire    [3:0] nsw_from_fpga_s1_agent_m0_byteenable;                                        // nsw_from_fpga_s1_agent:m0_byteenable -> nsw_from_fpga_s1_translator:uav_byteenable
	wire          nsw_from_fpga_s1_agent_m0_read;                                              // nsw_from_fpga_s1_agent:m0_read -> nsw_from_fpga_s1_translator:uav_read
	wire          nsw_from_fpga_s1_agent_m0_readdatavalid;                                     // nsw_from_fpga_s1_translator:uav_readdatavalid -> nsw_from_fpga_s1_agent:m0_readdatavalid
	wire          nsw_from_fpga_s1_agent_m0_lock;                                              // nsw_from_fpga_s1_agent:m0_lock -> nsw_from_fpga_s1_translator:uav_lock
	wire   [31:0] nsw_from_fpga_s1_agent_m0_writedata;                                         // nsw_from_fpga_s1_agent:m0_writedata -> nsw_from_fpga_s1_translator:uav_writedata
	wire          nsw_from_fpga_s1_agent_m0_write;                                             // nsw_from_fpga_s1_agent:m0_write -> nsw_from_fpga_s1_translator:uav_write
	wire    [2:0] nsw_from_fpga_s1_agent_m0_burstcount;                                        // nsw_from_fpga_s1_agent:m0_burstcount -> nsw_from_fpga_s1_translator:uav_burstcount
	wire          nsw_from_fpga_s1_agent_rf_source_valid;                                      // nsw_from_fpga_s1_agent:rf_source_valid -> nsw_from_fpga_s1_agent_rsp_fifo:in_valid
	wire  [120:0] nsw_from_fpga_s1_agent_rf_source_data;                                       // nsw_from_fpga_s1_agent:rf_source_data -> nsw_from_fpga_s1_agent_rsp_fifo:in_data
	wire          nsw_from_fpga_s1_agent_rf_source_ready;                                      // nsw_from_fpga_s1_agent_rsp_fifo:in_ready -> nsw_from_fpga_s1_agent:rf_source_ready
	wire          nsw_from_fpga_s1_agent_rf_source_startofpacket;                              // nsw_from_fpga_s1_agent:rf_source_startofpacket -> nsw_from_fpga_s1_agent_rsp_fifo:in_startofpacket
	wire          nsw_from_fpga_s1_agent_rf_source_endofpacket;                                // nsw_from_fpga_s1_agent:rf_source_endofpacket -> nsw_from_fpga_s1_agent_rsp_fifo:in_endofpacket
	wire          nsw_from_fpga_s1_agent_rsp_fifo_out_valid;                                   // nsw_from_fpga_s1_agent_rsp_fifo:out_valid -> nsw_from_fpga_s1_agent:rf_sink_valid
	wire  [120:0] nsw_from_fpga_s1_agent_rsp_fifo_out_data;                                    // nsw_from_fpga_s1_agent_rsp_fifo:out_data -> nsw_from_fpga_s1_agent:rf_sink_data
	wire          nsw_from_fpga_s1_agent_rsp_fifo_out_ready;                                   // nsw_from_fpga_s1_agent:rf_sink_ready -> nsw_from_fpga_s1_agent_rsp_fifo:out_ready
	wire          nsw_from_fpga_s1_agent_rsp_fifo_out_startofpacket;                           // nsw_from_fpga_s1_agent_rsp_fifo:out_startofpacket -> nsw_from_fpga_s1_agent:rf_sink_startofpacket
	wire          nsw_from_fpga_s1_agent_rsp_fifo_out_endofpacket;                             // nsw_from_fpga_s1_agent_rsp_fifo:out_endofpacket -> nsw_from_fpga_s1_agent:rf_sink_endofpacket
	wire          nsw_from_fpga_s1_agent_rdata_fifo_src_valid;                                 // nsw_from_fpga_s1_agent:rdata_fifo_src_valid -> nsw_from_fpga_s1_agent_rdata_fifo:in_valid
	wire   [33:0] nsw_from_fpga_s1_agent_rdata_fifo_src_data;                                  // nsw_from_fpga_s1_agent:rdata_fifo_src_data -> nsw_from_fpga_s1_agent_rdata_fifo:in_data
	wire          nsw_from_fpga_s1_agent_rdata_fifo_src_ready;                                 // nsw_from_fpga_s1_agent_rdata_fifo:in_ready -> nsw_from_fpga_s1_agent:rdata_fifo_src_ready
	wire   [31:0] nse_from_fpga_s1_agent_m0_readdata;                                          // nse_from_fpga_s1_translator:uav_readdata -> nse_from_fpga_s1_agent:m0_readdata
	wire          nse_from_fpga_s1_agent_m0_waitrequest;                                       // nse_from_fpga_s1_translator:uav_waitrequest -> nse_from_fpga_s1_agent:m0_waitrequest
	wire          nse_from_fpga_s1_agent_m0_debugaccess;                                       // nse_from_fpga_s1_agent:m0_debugaccess -> nse_from_fpga_s1_translator:uav_debugaccess
	wire   [20:0] nse_from_fpga_s1_agent_m0_address;                                           // nse_from_fpga_s1_agent:m0_address -> nse_from_fpga_s1_translator:uav_address
	wire    [3:0] nse_from_fpga_s1_agent_m0_byteenable;                                        // nse_from_fpga_s1_agent:m0_byteenable -> nse_from_fpga_s1_translator:uav_byteenable
	wire          nse_from_fpga_s1_agent_m0_read;                                              // nse_from_fpga_s1_agent:m0_read -> nse_from_fpga_s1_translator:uav_read
	wire          nse_from_fpga_s1_agent_m0_readdatavalid;                                     // nse_from_fpga_s1_translator:uav_readdatavalid -> nse_from_fpga_s1_agent:m0_readdatavalid
	wire          nse_from_fpga_s1_agent_m0_lock;                                              // nse_from_fpga_s1_agent:m0_lock -> nse_from_fpga_s1_translator:uav_lock
	wire   [31:0] nse_from_fpga_s1_agent_m0_writedata;                                         // nse_from_fpga_s1_agent:m0_writedata -> nse_from_fpga_s1_translator:uav_writedata
	wire          nse_from_fpga_s1_agent_m0_write;                                             // nse_from_fpga_s1_agent:m0_write -> nse_from_fpga_s1_translator:uav_write
	wire    [2:0] nse_from_fpga_s1_agent_m0_burstcount;                                        // nse_from_fpga_s1_agent:m0_burstcount -> nse_from_fpga_s1_translator:uav_burstcount
	wire          nse_from_fpga_s1_agent_rf_source_valid;                                      // nse_from_fpga_s1_agent:rf_source_valid -> nse_from_fpga_s1_agent_rsp_fifo:in_valid
	wire  [120:0] nse_from_fpga_s1_agent_rf_source_data;                                       // nse_from_fpga_s1_agent:rf_source_data -> nse_from_fpga_s1_agent_rsp_fifo:in_data
	wire          nse_from_fpga_s1_agent_rf_source_ready;                                      // nse_from_fpga_s1_agent_rsp_fifo:in_ready -> nse_from_fpga_s1_agent:rf_source_ready
	wire          nse_from_fpga_s1_agent_rf_source_startofpacket;                              // nse_from_fpga_s1_agent:rf_source_startofpacket -> nse_from_fpga_s1_agent_rsp_fifo:in_startofpacket
	wire          nse_from_fpga_s1_agent_rf_source_endofpacket;                                // nse_from_fpga_s1_agent:rf_source_endofpacket -> nse_from_fpga_s1_agent_rsp_fifo:in_endofpacket
	wire          nse_from_fpga_s1_agent_rsp_fifo_out_valid;                                   // nse_from_fpga_s1_agent_rsp_fifo:out_valid -> nse_from_fpga_s1_agent:rf_sink_valid
	wire  [120:0] nse_from_fpga_s1_agent_rsp_fifo_out_data;                                    // nse_from_fpga_s1_agent_rsp_fifo:out_data -> nse_from_fpga_s1_agent:rf_sink_data
	wire          nse_from_fpga_s1_agent_rsp_fifo_out_ready;                                   // nse_from_fpga_s1_agent:rf_sink_ready -> nse_from_fpga_s1_agent_rsp_fifo:out_ready
	wire          nse_from_fpga_s1_agent_rsp_fifo_out_startofpacket;                           // nse_from_fpga_s1_agent_rsp_fifo:out_startofpacket -> nse_from_fpga_s1_agent:rf_sink_startofpacket
	wire          nse_from_fpga_s1_agent_rsp_fifo_out_endofpacket;                             // nse_from_fpga_s1_agent_rsp_fifo:out_endofpacket -> nse_from_fpga_s1_agent:rf_sink_endofpacket
	wire          nse_from_fpga_s1_agent_rdata_fifo_src_valid;                                 // nse_from_fpga_s1_agent:rdata_fifo_src_valid -> nse_from_fpga_s1_agent_rdata_fifo:in_valid
	wire   [33:0] nse_from_fpga_s1_agent_rdata_fifo_src_data;                                  // nse_from_fpga_s1_agent:rdata_fifo_src_data -> nse_from_fpga_s1_agent_rdata_fifo:in_data
	wire          nse_from_fpga_s1_agent_rdata_fifo_src_ready;                                 // nse_from_fpga_s1_agent_rdata_fifo:in_ready -> nse_from_fpga_s1_agent:rdata_fifo_src_ready
	wire   [31:0] one9th_s1_agent_m0_readdata;                                                 // one9th_s1_translator:uav_readdata -> one9th_s1_agent:m0_readdata
	wire          one9th_s1_agent_m0_waitrequest;                                              // one9th_s1_translator:uav_waitrequest -> one9th_s1_agent:m0_waitrequest
	wire          one9th_s1_agent_m0_debugaccess;                                              // one9th_s1_agent:m0_debugaccess -> one9th_s1_translator:uav_debugaccess
	wire   [20:0] one9th_s1_agent_m0_address;                                                  // one9th_s1_agent:m0_address -> one9th_s1_translator:uav_address
	wire    [3:0] one9th_s1_agent_m0_byteenable;                                               // one9th_s1_agent:m0_byteenable -> one9th_s1_translator:uav_byteenable
	wire          one9th_s1_agent_m0_read;                                                     // one9th_s1_agent:m0_read -> one9th_s1_translator:uav_read
	wire          one9th_s1_agent_m0_readdatavalid;                                            // one9th_s1_translator:uav_readdatavalid -> one9th_s1_agent:m0_readdatavalid
	wire          one9th_s1_agent_m0_lock;                                                     // one9th_s1_agent:m0_lock -> one9th_s1_translator:uav_lock
	wire   [31:0] one9th_s1_agent_m0_writedata;                                                // one9th_s1_agent:m0_writedata -> one9th_s1_translator:uav_writedata
	wire          one9th_s1_agent_m0_write;                                                    // one9th_s1_agent:m0_write -> one9th_s1_translator:uav_write
	wire    [2:0] one9th_s1_agent_m0_burstcount;                                               // one9th_s1_agent:m0_burstcount -> one9th_s1_translator:uav_burstcount
	wire          one9th_s1_agent_rf_source_valid;                                             // one9th_s1_agent:rf_source_valid -> one9th_s1_agent_rsp_fifo:in_valid
	wire  [120:0] one9th_s1_agent_rf_source_data;                                              // one9th_s1_agent:rf_source_data -> one9th_s1_agent_rsp_fifo:in_data
	wire          one9th_s1_agent_rf_source_ready;                                             // one9th_s1_agent_rsp_fifo:in_ready -> one9th_s1_agent:rf_source_ready
	wire          one9th_s1_agent_rf_source_startofpacket;                                     // one9th_s1_agent:rf_source_startofpacket -> one9th_s1_agent_rsp_fifo:in_startofpacket
	wire          one9th_s1_agent_rf_source_endofpacket;                                       // one9th_s1_agent:rf_source_endofpacket -> one9th_s1_agent_rsp_fifo:in_endofpacket
	wire          one9th_s1_agent_rsp_fifo_out_valid;                                          // one9th_s1_agent_rsp_fifo:out_valid -> one9th_s1_agent:rf_sink_valid
	wire  [120:0] one9th_s1_agent_rsp_fifo_out_data;                                           // one9th_s1_agent_rsp_fifo:out_data -> one9th_s1_agent:rf_sink_data
	wire          one9th_s1_agent_rsp_fifo_out_ready;                                          // one9th_s1_agent:rf_sink_ready -> one9th_s1_agent_rsp_fifo:out_ready
	wire          one9th_s1_agent_rsp_fifo_out_startofpacket;                                  // one9th_s1_agent_rsp_fifo:out_startofpacket -> one9th_s1_agent:rf_sink_startofpacket
	wire          one9th_s1_agent_rsp_fifo_out_endofpacket;                                    // one9th_s1_agent_rsp_fifo:out_endofpacket -> one9th_s1_agent:rf_sink_endofpacket
	wire          one9th_s1_agent_rdata_fifo_src_valid;                                        // one9th_s1_agent:rdata_fifo_src_valid -> one9th_s1_agent_rdata_fifo:in_valid
	wire   [33:0] one9th_s1_agent_rdata_fifo_src_data;                                         // one9th_s1_agent:rdata_fifo_src_data -> one9th_s1_agent_rdata_fifo:in_data
	wire          one9th_s1_agent_rdata_fifo_src_ready;                                        // one9th_s1_agent_rdata_fifo:in_ready -> one9th_s1_agent:rdata_fifo_src_ready
	wire   [31:0] one36th_s1_agent_m0_readdata;                                                // one36th_s1_translator:uav_readdata -> one36th_s1_agent:m0_readdata
	wire          one36th_s1_agent_m0_waitrequest;                                             // one36th_s1_translator:uav_waitrequest -> one36th_s1_agent:m0_waitrequest
	wire          one36th_s1_agent_m0_debugaccess;                                             // one36th_s1_agent:m0_debugaccess -> one36th_s1_translator:uav_debugaccess
	wire   [20:0] one36th_s1_agent_m0_address;                                                 // one36th_s1_agent:m0_address -> one36th_s1_translator:uav_address
	wire    [3:0] one36th_s1_agent_m0_byteenable;                                              // one36th_s1_agent:m0_byteenable -> one36th_s1_translator:uav_byteenable
	wire          one36th_s1_agent_m0_read;                                                    // one36th_s1_agent:m0_read -> one36th_s1_translator:uav_read
	wire          one36th_s1_agent_m0_readdatavalid;                                           // one36th_s1_translator:uav_readdatavalid -> one36th_s1_agent:m0_readdatavalid
	wire          one36th_s1_agent_m0_lock;                                                    // one36th_s1_agent:m0_lock -> one36th_s1_translator:uav_lock
	wire   [31:0] one36th_s1_agent_m0_writedata;                                               // one36th_s1_agent:m0_writedata -> one36th_s1_translator:uav_writedata
	wire          one36th_s1_agent_m0_write;                                                   // one36th_s1_agent:m0_write -> one36th_s1_translator:uav_write
	wire    [2:0] one36th_s1_agent_m0_burstcount;                                              // one36th_s1_agent:m0_burstcount -> one36th_s1_translator:uav_burstcount
	wire          one36th_s1_agent_rf_source_valid;                                            // one36th_s1_agent:rf_source_valid -> one36th_s1_agent_rsp_fifo:in_valid
	wire  [120:0] one36th_s1_agent_rf_source_data;                                             // one36th_s1_agent:rf_source_data -> one36th_s1_agent_rsp_fifo:in_data
	wire          one36th_s1_agent_rf_source_ready;                                            // one36th_s1_agent_rsp_fifo:in_ready -> one36th_s1_agent:rf_source_ready
	wire          one36th_s1_agent_rf_source_startofpacket;                                    // one36th_s1_agent:rf_source_startofpacket -> one36th_s1_agent_rsp_fifo:in_startofpacket
	wire          one36th_s1_agent_rf_source_endofpacket;                                      // one36th_s1_agent:rf_source_endofpacket -> one36th_s1_agent_rsp_fifo:in_endofpacket
	wire          one36th_s1_agent_rsp_fifo_out_valid;                                         // one36th_s1_agent_rsp_fifo:out_valid -> one36th_s1_agent:rf_sink_valid
	wire  [120:0] one36th_s1_agent_rsp_fifo_out_data;                                          // one36th_s1_agent_rsp_fifo:out_data -> one36th_s1_agent:rf_sink_data
	wire          one36th_s1_agent_rsp_fifo_out_ready;                                         // one36th_s1_agent:rf_sink_ready -> one36th_s1_agent_rsp_fifo:out_ready
	wire          one36th_s1_agent_rsp_fifo_out_startofpacket;                                 // one36th_s1_agent_rsp_fifo:out_startofpacket -> one36th_s1_agent:rf_sink_startofpacket
	wire          one36th_s1_agent_rsp_fifo_out_endofpacket;                                   // one36th_s1_agent_rsp_fifo:out_endofpacket -> one36th_s1_agent:rf_sink_endofpacket
	wire          one36th_s1_agent_rdata_fifo_src_valid;                                       // one36th_s1_agent:rdata_fifo_src_valid -> one36th_s1_agent_rdata_fifo:in_valid
	wire   [33:0] one36th_s1_agent_rdata_fifo_src_data;                                        // one36th_s1_agent:rdata_fifo_src_data -> one36th_s1_agent_rdata_fifo:in_data
	wire          one36th_s1_agent_rdata_fifo_src_ready;                                       // one36th_s1_agent_rdata_fifo:in_ready -> one36th_s1_agent:rdata_fifo_src_ready
	wire   [31:0] omega_s1_agent_m0_readdata;                                                  // omega_s1_translator:uav_readdata -> omega_s1_agent:m0_readdata
	wire          omega_s1_agent_m0_waitrequest;                                               // omega_s1_translator:uav_waitrequest -> omega_s1_agent:m0_waitrequest
	wire          omega_s1_agent_m0_debugaccess;                                               // omega_s1_agent:m0_debugaccess -> omega_s1_translator:uav_debugaccess
	wire   [20:0] omega_s1_agent_m0_address;                                                   // omega_s1_agent:m0_address -> omega_s1_translator:uav_address
	wire    [3:0] omega_s1_agent_m0_byteenable;                                                // omega_s1_agent:m0_byteenable -> omega_s1_translator:uav_byteenable
	wire          omega_s1_agent_m0_read;                                                      // omega_s1_agent:m0_read -> omega_s1_translator:uav_read
	wire          omega_s1_agent_m0_readdatavalid;                                             // omega_s1_translator:uav_readdatavalid -> omega_s1_agent:m0_readdatavalid
	wire          omega_s1_agent_m0_lock;                                                      // omega_s1_agent:m0_lock -> omega_s1_translator:uav_lock
	wire   [31:0] omega_s1_agent_m0_writedata;                                                 // omega_s1_agent:m0_writedata -> omega_s1_translator:uav_writedata
	wire          omega_s1_agent_m0_write;                                                     // omega_s1_agent:m0_write -> omega_s1_translator:uav_write
	wire    [2:0] omega_s1_agent_m0_burstcount;                                                // omega_s1_agent:m0_burstcount -> omega_s1_translator:uav_burstcount
	wire          omega_s1_agent_rf_source_valid;                                              // omega_s1_agent:rf_source_valid -> omega_s1_agent_rsp_fifo:in_valid
	wire  [120:0] omega_s1_agent_rf_source_data;                                               // omega_s1_agent:rf_source_data -> omega_s1_agent_rsp_fifo:in_data
	wire          omega_s1_agent_rf_source_ready;                                              // omega_s1_agent_rsp_fifo:in_ready -> omega_s1_agent:rf_source_ready
	wire          omega_s1_agent_rf_source_startofpacket;                                      // omega_s1_agent:rf_source_startofpacket -> omega_s1_agent_rsp_fifo:in_startofpacket
	wire          omega_s1_agent_rf_source_endofpacket;                                        // omega_s1_agent:rf_source_endofpacket -> omega_s1_agent_rsp_fifo:in_endofpacket
	wire          omega_s1_agent_rsp_fifo_out_valid;                                           // omega_s1_agent_rsp_fifo:out_valid -> omega_s1_agent:rf_sink_valid
	wire  [120:0] omega_s1_agent_rsp_fifo_out_data;                                            // omega_s1_agent_rsp_fifo:out_data -> omega_s1_agent:rf_sink_data
	wire          omega_s1_agent_rsp_fifo_out_ready;                                           // omega_s1_agent:rf_sink_ready -> omega_s1_agent_rsp_fifo:out_ready
	wire          omega_s1_agent_rsp_fifo_out_startofpacket;                                   // omega_s1_agent_rsp_fifo:out_startofpacket -> omega_s1_agent:rf_sink_startofpacket
	wire          omega_s1_agent_rsp_fifo_out_endofpacket;                                     // omega_s1_agent_rsp_fifo:out_endofpacket -> omega_s1_agent:rf_sink_endofpacket
	wire          omega_s1_agent_rdata_fifo_src_valid;                                         // omega_s1_agent:rdata_fifo_src_valid -> omega_s1_agent_rdata_fifo:in_valid
	wire   [33:0] omega_s1_agent_rdata_fifo_src_data;                                          // omega_s1_agent:rdata_fifo_src_data -> omega_s1_agent_rdata_fifo:in_data
	wire          omega_s1_agent_rdata_fifo_src_ready;                                         // omega_s1_agent_rdata_fifo:in_ready -> omega_s1_agent:rdata_fifo_src_ready
	wire   [31:0] ux_s1_agent_m0_readdata;                                                     // ux_s1_translator:uav_readdata -> ux_s1_agent:m0_readdata
	wire          ux_s1_agent_m0_waitrequest;                                                  // ux_s1_translator:uav_waitrequest -> ux_s1_agent:m0_waitrequest
	wire          ux_s1_agent_m0_debugaccess;                                                  // ux_s1_agent:m0_debugaccess -> ux_s1_translator:uav_debugaccess
	wire   [20:0] ux_s1_agent_m0_address;                                                      // ux_s1_agent:m0_address -> ux_s1_translator:uav_address
	wire    [3:0] ux_s1_agent_m0_byteenable;                                                   // ux_s1_agent:m0_byteenable -> ux_s1_translator:uav_byteenable
	wire          ux_s1_agent_m0_read;                                                         // ux_s1_agent:m0_read -> ux_s1_translator:uav_read
	wire          ux_s1_agent_m0_readdatavalid;                                                // ux_s1_translator:uav_readdatavalid -> ux_s1_agent:m0_readdatavalid
	wire          ux_s1_agent_m0_lock;                                                         // ux_s1_agent:m0_lock -> ux_s1_translator:uav_lock
	wire   [31:0] ux_s1_agent_m0_writedata;                                                    // ux_s1_agent:m0_writedata -> ux_s1_translator:uav_writedata
	wire          ux_s1_agent_m0_write;                                                        // ux_s1_agent:m0_write -> ux_s1_translator:uav_write
	wire    [2:0] ux_s1_agent_m0_burstcount;                                                   // ux_s1_agent:m0_burstcount -> ux_s1_translator:uav_burstcount
	wire          ux_s1_agent_rf_source_valid;                                                 // ux_s1_agent:rf_source_valid -> ux_s1_agent_rsp_fifo:in_valid
	wire  [120:0] ux_s1_agent_rf_source_data;                                                  // ux_s1_agent:rf_source_data -> ux_s1_agent_rsp_fifo:in_data
	wire          ux_s1_agent_rf_source_ready;                                                 // ux_s1_agent_rsp_fifo:in_ready -> ux_s1_agent:rf_source_ready
	wire          ux_s1_agent_rf_source_startofpacket;                                         // ux_s1_agent:rf_source_startofpacket -> ux_s1_agent_rsp_fifo:in_startofpacket
	wire          ux_s1_agent_rf_source_endofpacket;                                           // ux_s1_agent:rf_source_endofpacket -> ux_s1_agent_rsp_fifo:in_endofpacket
	wire          ux_s1_agent_rsp_fifo_out_valid;                                              // ux_s1_agent_rsp_fifo:out_valid -> ux_s1_agent:rf_sink_valid
	wire  [120:0] ux_s1_agent_rsp_fifo_out_data;                                               // ux_s1_agent_rsp_fifo:out_data -> ux_s1_agent:rf_sink_data
	wire          ux_s1_agent_rsp_fifo_out_ready;                                              // ux_s1_agent:rf_sink_ready -> ux_s1_agent_rsp_fifo:out_ready
	wire          ux_s1_agent_rsp_fifo_out_startofpacket;                                      // ux_s1_agent_rsp_fifo:out_startofpacket -> ux_s1_agent:rf_sink_startofpacket
	wire          ux_s1_agent_rsp_fifo_out_endofpacket;                                        // ux_s1_agent_rsp_fifo:out_endofpacket -> ux_s1_agent:rf_sink_endofpacket
	wire          ux_s1_agent_rdata_fifo_src_valid;                                            // ux_s1_agent:rdata_fifo_src_valid -> ux_s1_agent_rdata_fifo:in_valid
	wire   [33:0] ux_s1_agent_rdata_fifo_src_data;                                             // ux_s1_agent:rdata_fifo_src_data -> ux_s1_agent_rdata_fifo:in_data
	wire          ux_s1_agent_rdata_fifo_src_ready;                                            // ux_s1_agent_rdata_fifo:in_ready -> ux_s1_agent:rdata_fifo_src_ready
	wire   [31:0] uy_s1_agent_m0_readdata;                                                     // uy_s1_translator:uav_readdata -> uy_s1_agent:m0_readdata
	wire          uy_s1_agent_m0_waitrequest;                                                  // uy_s1_translator:uav_waitrequest -> uy_s1_agent:m0_waitrequest
	wire          uy_s1_agent_m0_debugaccess;                                                  // uy_s1_agent:m0_debugaccess -> uy_s1_translator:uav_debugaccess
	wire   [20:0] uy_s1_agent_m0_address;                                                      // uy_s1_agent:m0_address -> uy_s1_translator:uav_address
	wire    [3:0] uy_s1_agent_m0_byteenable;                                                   // uy_s1_agent:m0_byteenable -> uy_s1_translator:uav_byteenable
	wire          uy_s1_agent_m0_read;                                                         // uy_s1_agent:m0_read -> uy_s1_translator:uav_read
	wire          uy_s1_agent_m0_readdatavalid;                                                // uy_s1_translator:uav_readdatavalid -> uy_s1_agent:m0_readdatavalid
	wire          uy_s1_agent_m0_lock;                                                         // uy_s1_agent:m0_lock -> uy_s1_translator:uav_lock
	wire   [31:0] uy_s1_agent_m0_writedata;                                                    // uy_s1_agent:m0_writedata -> uy_s1_translator:uav_writedata
	wire          uy_s1_agent_m0_write;                                                        // uy_s1_agent:m0_write -> uy_s1_translator:uav_write
	wire    [2:0] uy_s1_agent_m0_burstcount;                                                   // uy_s1_agent:m0_burstcount -> uy_s1_translator:uav_burstcount
	wire          uy_s1_agent_rf_source_valid;                                                 // uy_s1_agent:rf_source_valid -> uy_s1_agent_rsp_fifo:in_valid
	wire  [120:0] uy_s1_agent_rf_source_data;                                                  // uy_s1_agent:rf_source_data -> uy_s1_agent_rsp_fifo:in_data
	wire          uy_s1_agent_rf_source_ready;                                                 // uy_s1_agent_rsp_fifo:in_ready -> uy_s1_agent:rf_source_ready
	wire          uy_s1_agent_rf_source_startofpacket;                                         // uy_s1_agent:rf_source_startofpacket -> uy_s1_agent_rsp_fifo:in_startofpacket
	wire          uy_s1_agent_rf_source_endofpacket;                                           // uy_s1_agent:rf_source_endofpacket -> uy_s1_agent_rsp_fifo:in_endofpacket
	wire          uy_s1_agent_rsp_fifo_out_valid;                                              // uy_s1_agent_rsp_fifo:out_valid -> uy_s1_agent:rf_sink_valid
	wire  [120:0] uy_s1_agent_rsp_fifo_out_data;                                               // uy_s1_agent_rsp_fifo:out_data -> uy_s1_agent:rf_sink_data
	wire          uy_s1_agent_rsp_fifo_out_ready;                                              // uy_s1_agent:rf_sink_ready -> uy_s1_agent_rsp_fifo:out_ready
	wire          uy_s1_agent_rsp_fifo_out_startofpacket;                                      // uy_s1_agent_rsp_fifo:out_startofpacket -> uy_s1_agent:rf_sink_startofpacket
	wire          uy_s1_agent_rsp_fifo_out_endofpacket;                                        // uy_s1_agent_rsp_fifo:out_endofpacket -> uy_s1_agent:rf_sink_endofpacket
	wire          uy_s1_agent_rdata_fifo_src_valid;                                            // uy_s1_agent:rdata_fifo_src_valid -> uy_s1_agent_rdata_fifo:in_valid
	wire   [33:0] uy_s1_agent_rdata_fifo_src_data;                                             // uy_s1_agent:rdata_fifo_src_data -> uy_s1_agent_rdata_fifo:in_data
	wire          uy_s1_agent_rdata_fifo_src_ready;                                            // uy_s1_agent_rdata_fifo:in_ready -> uy_s1_agent:rdata_fifo_src_ready
	wire   [31:0] pipes_s1_agent_m0_readdata;                                                  // pipes_s1_translator:uav_readdata -> pipes_s1_agent:m0_readdata
	wire          pipes_s1_agent_m0_waitrequest;                                               // pipes_s1_translator:uav_waitrequest -> pipes_s1_agent:m0_waitrequest
	wire          pipes_s1_agent_m0_debugaccess;                                               // pipes_s1_agent:m0_debugaccess -> pipes_s1_translator:uav_debugaccess
	wire   [20:0] pipes_s1_agent_m0_address;                                                   // pipes_s1_agent:m0_address -> pipes_s1_translator:uav_address
	wire    [3:0] pipes_s1_agent_m0_byteenable;                                                // pipes_s1_agent:m0_byteenable -> pipes_s1_translator:uav_byteenable
	wire          pipes_s1_agent_m0_read;                                                      // pipes_s1_agent:m0_read -> pipes_s1_translator:uav_read
	wire          pipes_s1_agent_m0_readdatavalid;                                             // pipes_s1_translator:uav_readdatavalid -> pipes_s1_agent:m0_readdatavalid
	wire          pipes_s1_agent_m0_lock;                                                      // pipes_s1_agent:m0_lock -> pipes_s1_translator:uav_lock
	wire   [31:0] pipes_s1_agent_m0_writedata;                                                 // pipes_s1_agent:m0_writedata -> pipes_s1_translator:uav_writedata
	wire          pipes_s1_agent_m0_write;                                                     // pipes_s1_agent:m0_write -> pipes_s1_translator:uav_write
	wire    [2:0] pipes_s1_agent_m0_burstcount;                                                // pipes_s1_agent:m0_burstcount -> pipes_s1_translator:uav_burstcount
	wire          pipes_s1_agent_rf_source_valid;                                              // pipes_s1_agent:rf_source_valid -> pipes_s1_agent_rsp_fifo:in_valid
	wire  [120:0] pipes_s1_agent_rf_source_data;                                               // pipes_s1_agent:rf_source_data -> pipes_s1_agent_rsp_fifo:in_data
	wire          pipes_s1_agent_rf_source_ready;                                              // pipes_s1_agent_rsp_fifo:in_ready -> pipes_s1_agent:rf_source_ready
	wire          pipes_s1_agent_rf_source_startofpacket;                                      // pipes_s1_agent:rf_source_startofpacket -> pipes_s1_agent_rsp_fifo:in_startofpacket
	wire          pipes_s1_agent_rf_source_endofpacket;                                        // pipes_s1_agent:rf_source_endofpacket -> pipes_s1_agent_rsp_fifo:in_endofpacket
	wire          pipes_s1_agent_rsp_fifo_out_valid;                                           // pipes_s1_agent_rsp_fifo:out_valid -> pipes_s1_agent:rf_sink_valid
	wire  [120:0] pipes_s1_agent_rsp_fifo_out_data;                                            // pipes_s1_agent_rsp_fifo:out_data -> pipes_s1_agent:rf_sink_data
	wire          pipes_s1_agent_rsp_fifo_out_ready;                                           // pipes_s1_agent:rf_sink_ready -> pipes_s1_agent_rsp_fifo:out_ready
	wire          pipes_s1_agent_rsp_fifo_out_startofpacket;                                   // pipes_s1_agent_rsp_fifo:out_startofpacket -> pipes_s1_agent:rf_sink_startofpacket
	wire          pipes_s1_agent_rsp_fifo_out_endofpacket;                                     // pipes_s1_agent_rsp_fifo:out_endofpacket -> pipes_s1_agent:rf_sink_endofpacket
	wire          pipes_s1_agent_rdata_fifo_src_valid;                                         // pipes_s1_agent:rdata_fifo_src_valid -> pipes_s1_agent_rdata_fifo:in_valid
	wire   [33:0] pipes_s1_agent_rdata_fifo_src_data;                                          // pipes_s1_agent:rdata_fifo_src_data -> pipes_s1_agent_rdata_fifo:in_data
	wire          pipes_s1_agent_rdata_fifo_src_ready;                                         // pipes_s1_agent_rdata_fifo:in_ready -> pipes_s1_agent:rdata_fifo_src_ready
	wire   [31:0] pixel_dma_addr_translation_slave_agent_m0_readdata;                          // Pixel_DMA_Addr_Translation_slave_translator:uav_readdata -> Pixel_DMA_Addr_Translation_slave_agent:m0_readdata
	wire          pixel_dma_addr_translation_slave_agent_m0_waitrequest;                       // Pixel_DMA_Addr_Translation_slave_translator:uav_waitrequest -> Pixel_DMA_Addr_Translation_slave_agent:m0_waitrequest
	wire          pixel_dma_addr_translation_slave_agent_m0_debugaccess;                       // Pixel_DMA_Addr_Translation_slave_agent:m0_debugaccess -> Pixel_DMA_Addr_Translation_slave_translator:uav_debugaccess
	wire   [20:0] pixel_dma_addr_translation_slave_agent_m0_address;                           // Pixel_DMA_Addr_Translation_slave_agent:m0_address -> Pixel_DMA_Addr_Translation_slave_translator:uav_address
	wire    [3:0] pixel_dma_addr_translation_slave_agent_m0_byteenable;                        // Pixel_DMA_Addr_Translation_slave_agent:m0_byteenable -> Pixel_DMA_Addr_Translation_slave_translator:uav_byteenable
	wire          pixel_dma_addr_translation_slave_agent_m0_read;                              // Pixel_DMA_Addr_Translation_slave_agent:m0_read -> Pixel_DMA_Addr_Translation_slave_translator:uav_read
	wire          pixel_dma_addr_translation_slave_agent_m0_readdatavalid;                     // Pixel_DMA_Addr_Translation_slave_translator:uav_readdatavalid -> Pixel_DMA_Addr_Translation_slave_agent:m0_readdatavalid
	wire          pixel_dma_addr_translation_slave_agent_m0_lock;                              // Pixel_DMA_Addr_Translation_slave_agent:m0_lock -> Pixel_DMA_Addr_Translation_slave_translator:uav_lock
	wire   [31:0] pixel_dma_addr_translation_slave_agent_m0_writedata;                         // Pixel_DMA_Addr_Translation_slave_agent:m0_writedata -> Pixel_DMA_Addr_Translation_slave_translator:uav_writedata
	wire          pixel_dma_addr_translation_slave_agent_m0_write;                             // Pixel_DMA_Addr_Translation_slave_agent:m0_write -> Pixel_DMA_Addr_Translation_slave_translator:uav_write
	wire    [2:0] pixel_dma_addr_translation_slave_agent_m0_burstcount;                        // Pixel_DMA_Addr_Translation_slave_agent:m0_burstcount -> Pixel_DMA_Addr_Translation_slave_translator:uav_burstcount
	wire          pixel_dma_addr_translation_slave_agent_rf_source_valid;                      // Pixel_DMA_Addr_Translation_slave_agent:rf_source_valid -> Pixel_DMA_Addr_Translation_slave_agent_rsp_fifo:in_valid
	wire  [120:0] pixel_dma_addr_translation_slave_agent_rf_source_data;                       // Pixel_DMA_Addr_Translation_slave_agent:rf_source_data -> Pixel_DMA_Addr_Translation_slave_agent_rsp_fifo:in_data
	wire          pixel_dma_addr_translation_slave_agent_rf_source_ready;                      // Pixel_DMA_Addr_Translation_slave_agent_rsp_fifo:in_ready -> Pixel_DMA_Addr_Translation_slave_agent:rf_source_ready
	wire          pixel_dma_addr_translation_slave_agent_rf_source_startofpacket;              // Pixel_DMA_Addr_Translation_slave_agent:rf_source_startofpacket -> Pixel_DMA_Addr_Translation_slave_agent_rsp_fifo:in_startofpacket
	wire          pixel_dma_addr_translation_slave_agent_rf_source_endofpacket;                // Pixel_DMA_Addr_Translation_slave_agent:rf_source_endofpacket -> Pixel_DMA_Addr_Translation_slave_agent_rsp_fifo:in_endofpacket
	wire          pixel_dma_addr_translation_slave_agent_rsp_fifo_out_valid;                   // Pixel_DMA_Addr_Translation_slave_agent_rsp_fifo:out_valid -> Pixel_DMA_Addr_Translation_slave_agent:rf_sink_valid
	wire  [120:0] pixel_dma_addr_translation_slave_agent_rsp_fifo_out_data;                    // Pixel_DMA_Addr_Translation_slave_agent_rsp_fifo:out_data -> Pixel_DMA_Addr_Translation_slave_agent:rf_sink_data
	wire          pixel_dma_addr_translation_slave_agent_rsp_fifo_out_ready;                   // Pixel_DMA_Addr_Translation_slave_agent:rf_sink_ready -> Pixel_DMA_Addr_Translation_slave_agent_rsp_fifo:out_ready
	wire          pixel_dma_addr_translation_slave_agent_rsp_fifo_out_startofpacket;           // Pixel_DMA_Addr_Translation_slave_agent_rsp_fifo:out_startofpacket -> Pixel_DMA_Addr_Translation_slave_agent:rf_sink_startofpacket
	wire          pixel_dma_addr_translation_slave_agent_rsp_fifo_out_endofpacket;             // Pixel_DMA_Addr_Translation_slave_agent_rsp_fifo:out_endofpacket -> Pixel_DMA_Addr_Translation_slave_agent:rf_sink_endofpacket
	wire          pixel_dma_addr_translation_slave_agent_rdata_fifo_src_valid;                 // Pixel_DMA_Addr_Translation_slave_agent:rdata_fifo_src_valid -> Pixel_DMA_Addr_Translation_slave_agent_rdata_fifo:in_valid
	wire   [33:0] pixel_dma_addr_translation_slave_agent_rdata_fifo_src_data;                  // Pixel_DMA_Addr_Translation_slave_agent:rdata_fifo_src_data -> Pixel_DMA_Addr_Translation_slave_agent_rdata_fifo:in_data
	wire          pixel_dma_addr_translation_slave_agent_rdata_fifo_src_ready;                 // Pixel_DMA_Addr_Translation_slave_agent_rdata_fifo:in_ready -> Pixel_DMA_Addr_Translation_slave_agent:rdata_fifo_src_ready
	wire          arm_a9_hps_h2f_lw_axi_master_agent_write_cp_valid;                           // ARM_A9_HPS_h2f_lw_axi_master_agent:write_cp_valid -> router:sink_valid
	wire  [119:0] arm_a9_hps_h2f_lw_axi_master_agent_write_cp_data;                            // ARM_A9_HPS_h2f_lw_axi_master_agent:write_cp_data -> router:sink_data
	wire          arm_a9_hps_h2f_lw_axi_master_agent_write_cp_ready;                           // router:sink_ready -> ARM_A9_HPS_h2f_lw_axi_master_agent:write_cp_ready
	wire          arm_a9_hps_h2f_lw_axi_master_agent_write_cp_startofpacket;                   // ARM_A9_HPS_h2f_lw_axi_master_agent:write_cp_startofpacket -> router:sink_startofpacket
	wire          arm_a9_hps_h2f_lw_axi_master_agent_write_cp_endofpacket;                     // ARM_A9_HPS_h2f_lw_axi_master_agent:write_cp_endofpacket -> router:sink_endofpacket
	wire          arm_a9_hps_h2f_lw_axi_master_agent_read_cp_valid;                            // ARM_A9_HPS_h2f_lw_axi_master_agent:read_cp_valid -> router_001:sink_valid
	wire  [119:0] arm_a9_hps_h2f_lw_axi_master_agent_read_cp_data;                             // ARM_A9_HPS_h2f_lw_axi_master_agent:read_cp_data -> router_001:sink_data
	wire          arm_a9_hps_h2f_lw_axi_master_agent_read_cp_ready;                            // router_001:sink_ready -> ARM_A9_HPS_h2f_lw_axi_master_agent:read_cp_ready
	wire          arm_a9_hps_h2f_lw_axi_master_agent_read_cp_startofpacket;                    // ARM_A9_HPS_h2f_lw_axi_master_agent:read_cp_startofpacket -> router_001:sink_startofpacket
	wire          arm_a9_hps_h2f_lw_axi_master_agent_read_cp_endofpacket;                      // ARM_A9_HPS_h2f_lw_axi_master_agent:read_cp_endofpacket -> router_001:sink_endofpacket
	wire          av_config_avalon_av_config_slave_agent_rp_valid;                             // AV_Config_avalon_av_config_slave_agent:rp_valid -> router_002:sink_valid
	wire  [119:0] av_config_avalon_av_config_slave_agent_rp_data;                              // AV_Config_avalon_av_config_slave_agent:rp_data -> router_002:sink_data
	wire          av_config_avalon_av_config_slave_agent_rp_ready;                             // router_002:sink_ready -> AV_Config_avalon_av_config_slave_agent:rp_ready
	wire          av_config_avalon_av_config_slave_agent_rp_startofpacket;                     // AV_Config_avalon_av_config_slave_agent:rp_startofpacket -> router_002:sink_startofpacket
	wire          av_config_avalon_av_config_slave_agent_rp_endofpacket;                       // AV_Config_avalon_av_config_slave_agent:rp_endofpacket -> router_002:sink_endofpacket
	wire          router_002_src_valid;                                                        // router_002:src_valid -> rsp_demux:sink_valid
	wire  [119:0] router_002_src_data;                                                         // router_002:src_data -> rsp_demux:sink_data
	wire          router_002_src_ready;                                                        // rsp_demux:sink_ready -> router_002:src_ready
	wire   [26:0] router_002_src_channel;                                                      // router_002:src_channel -> rsp_demux:sink_channel
	wire          router_002_src_startofpacket;                                                // router_002:src_startofpacket -> rsp_demux:sink_startofpacket
	wire          router_002_src_endofpacket;                                                  // router_002:src_endofpacket -> rsp_demux:sink_endofpacket
	wire          vga_subsystem_char_buffer_control_slave_agent_rp_valid;                      // VGA_Subsystem_char_buffer_control_slave_agent:rp_valid -> router_003:sink_valid
	wire  [119:0] vga_subsystem_char_buffer_control_slave_agent_rp_data;                       // VGA_Subsystem_char_buffer_control_slave_agent:rp_data -> router_003:sink_data
	wire          vga_subsystem_char_buffer_control_slave_agent_rp_ready;                      // router_003:sink_ready -> VGA_Subsystem_char_buffer_control_slave_agent:rp_ready
	wire          vga_subsystem_char_buffer_control_slave_agent_rp_startofpacket;              // VGA_Subsystem_char_buffer_control_slave_agent:rp_startofpacket -> router_003:sink_startofpacket
	wire          vga_subsystem_char_buffer_control_slave_agent_rp_endofpacket;                // VGA_Subsystem_char_buffer_control_slave_agent:rp_endofpacket -> router_003:sink_endofpacket
	wire          router_003_src_valid;                                                        // router_003:src_valid -> rsp_demux_001:sink_valid
	wire  [119:0] router_003_src_data;                                                         // router_003:src_data -> rsp_demux_001:sink_data
	wire          router_003_src_ready;                                                        // rsp_demux_001:sink_ready -> router_003:src_ready
	wire   [26:0] router_003_src_channel;                                                      // router_003:src_channel -> rsp_demux_001:sink_channel
	wire          router_003_src_startofpacket;                                                // router_003:src_startofpacket -> rsp_demux_001:sink_startofpacket
	wire          router_003_src_endofpacket;                                                  // router_003:src_endofpacket -> rsp_demux_001:sink_endofpacket
	wire          n0_from_hps_s1_agent_rp_valid;                                               // n0_from_hps_s1_agent:rp_valid -> router_004:sink_valid
	wire  [119:0] n0_from_hps_s1_agent_rp_data;                                                // n0_from_hps_s1_agent:rp_data -> router_004:sink_data
	wire          n0_from_hps_s1_agent_rp_ready;                                               // router_004:sink_ready -> n0_from_hps_s1_agent:rp_ready
	wire          n0_from_hps_s1_agent_rp_startofpacket;                                       // n0_from_hps_s1_agent:rp_startofpacket -> router_004:sink_startofpacket
	wire          n0_from_hps_s1_agent_rp_endofpacket;                                         // n0_from_hps_s1_agent:rp_endofpacket -> router_004:sink_endofpacket
	wire          router_004_src_valid;                                                        // router_004:src_valid -> rsp_demux_002:sink_valid
	wire  [119:0] router_004_src_data;                                                         // router_004:src_data -> rsp_demux_002:sink_data
	wire          router_004_src_ready;                                                        // rsp_demux_002:sink_ready -> router_004:src_ready
	wire   [26:0] router_004_src_channel;                                                      // router_004:src_channel -> rsp_demux_002:sink_channel
	wire          router_004_src_startofpacket;                                                // router_004:src_startofpacket -> rsp_demux_002:sink_startofpacket
	wire          router_004_src_endofpacket;                                                  // router_004:src_endofpacket -> rsp_demux_002:sink_endofpacket
	wire          nn_from_hps_s1_agent_rp_valid;                                               // nn_from_hps_s1_agent:rp_valid -> router_005:sink_valid
	wire  [119:0] nn_from_hps_s1_agent_rp_data;                                                // nn_from_hps_s1_agent:rp_data -> router_005:sink_data
	wire          nn_from_hps_s1_agent_rp_ready;                                               // router_005:sink_ready -> nn_from_hps_s1_agent:rp_ready
	wire          nn_from_hps_s1_agent_rp_startofpacket;                                       // nn_from_hps_s1_agent:rp_startofpacket -> router_005:sink_startofpacket
	wire          nn_from_hps_s1_agent_rp_endofpacket;                                         // nn_from_hps_s1_agent:rp_endofpacket -> router_005:sink_endofpacket
	wire          router_005_src_valid;                                                        // router_005:src_valid -> rsp_demux_003:sink_valid
	wire  [119:0] router_005_src_data;                                                         // router_005:src_data -> rsp_demux_003:sink_data
	wire          router_005_src_ready;                                                        // rsp_demux_003:sink_ready -> router_005:src_ready
	wire   [26:0] router_005_src_channel;                                                      // router_005:src_channel -> rsp_demux_003:sink_channel
	wire          router_005_src_startofpacket;                                                // router_005:src_startofpacket -> rsp_demux_003:sink_startofpacket
	wire          router_005_src_endofpacket;                                                  // router_005:src_endofpacket -> rsp_demux_003:sink_endofpacket
	wire          ns_from_hps_s1_agent_rp_valid;                                               // ns_from_hps_s1_agent:rp_valid -> router_006:sink_valid
	wire  [119:0] ns_from_hps_s1_agent_rp_data;                                                // ns_from_hps_s1_agent:rp_data -> router_006:sink_data
	wire          ns_from_hps_s1_agent_rp_ready;                                               // router_006:sink_ready -> ns_from_hps_s1_agent:rp_ready
	wire          ns_from_hps_s1_agent_rp_startofpacket;                                       // ns_from_hps_s1_agent:rp_startofpacket -> router_006:sink_startofpacket
	wire          ns_from_hps_s1_agent_rp_endofpacket;                                         // ns_from_hps_s1_agent:rp_endofpacket -> router_006:sink_endofpacket
	wire          router_006_src_valid;                                                        // router_006:src_valid -> rsp_demux_004:sink_valid
	wire  [119:0] router_006_src_data;                                                         // router_006:src_data -> rsp_demux_004:sink_data
	wire          router_006_src_ready;                                                        // rsp_demux_004:sink_ready -> router_006:src_ready
	wire   [26:0] router_006_src_channel;                                                      // router_006:src_channel -> rsp_demux_004:sink_channel
	wire          router_006_src_startofpacket;                                                // router_006:src_startofpacket -> rsp_demux_004:sink_startofpacket
	wire          router_006_src_endofpacket;                                                  // router_006:src_endofpacket -> rsp_demux_004:sink_endofpacket
	wire          nw_from_hps_s1_agent_rp_valid;                                               // nw_from_hps_s1_agent:rp_valid -> router_007:sink_valid
	wire  [119:0] nw_from_hps_s1_agent_rp_data;                                                // nw_from_hps_s1_agent:rp_data -> router_007:sink_data
	wire          nw_from_hps_s1_agent_rp_ready;                                               // router_007:sink_ready -> nw_from_hps_s1_agent:rp_ready
	wire          nw_from_hps_s1_agent_rp_startofpacket;                                       // nw_from_hps_s1_agent:rp_startofpacket -> router_007:sink_startofpacket
	wire          nw_from_hps_s1_agent_rp_endofpacket;                                         // nw_from_hps_s1_agent:rp_endofpacket -> router_007:sink_endofpacket
	wire          router_007_src_valid;                                                        // router_007:src_valid -> rsp_demux_005:sink_valid
	wire  [119:0] router_007_src_data;                                                         // router_007:src_data -> rsp_demux_005:sink_data
	wire          router_007_src_ready;                                                        // rsp_demux_005:sink_ready -> router_007:src_ready
	wire   [26:0] router_007_src_channel;                                                      // router_007:src_channel -> rsp_demux_005:sink_channel
	wire          router_007_src_startofpacket;                                                // router_007:src_startofpacket -> rsp_demux_005:sink_startofpacket
	wire          router_007_src_endofpacket;                                                  // router_007:src_endofpacket -> rsp_demux_005:sink_endofpacket
	wire          ne_from_hps_s1_agent_rp_valid;                                               // ne_from_hps_s1_agent:rp_valid -> router_008:sink_valid
	wire  [119:0] ne_from_hps_s1_agent_rp_data;                                                // ne_from_hps_s1_agent:rp_data -> router_008:sink_data
	wire          ne_from_hps_s1_agent_rp_ready;                                               // router_008:sink_ready -> ne_from_hps_s1_agent:rp_ready
	wire          ne_from_hps_s1_agent_rp_startofpacket;                                       // ne_from_hps_s1_agent:rp_startofpacket -> router_008:sink_startofpacket
	wire          ne_from_hps_s1_agent_rp_endofpacket;                                         // ne_from_hps_s1_agent:rp_endofpacket -> router_008:sink_endofpacket
	wire          router_008_src_valid;                                                        // router_008:src_valid -> rsp_demux_006:sink_valid
	wire  [119:0] router_008_src_data;                                                         // router_008:src_data -> rsp_demux_006:sink_data
	wire          router_008_src_ready;                                                        // rsp_demux_006:sink_ready -> router_008:src_ready
	wire   [26:0] router_008_src_channel;                                                      // router_008:src_channel -> rsp_demux_006:sink_channel
	wire          router_008_src_startofpacket;                                                // router_008:src_startofpacket -> rsp_demux_006:sink_startofpacket
	wire          router_008_src_endofpacket;                                                  // router_008:src_endofpacket -> rsp_demux_006:sink_endofpacket
	wire          nnw_from_hps_s1_agent_rp_valid;                                              // nnw_from_hps_s1_agent:rp_valid -> router_009:sink_valid
	wire  [119:0] nnw_from_hps_s1_agent_rp_data;                                               // nnw_from_hps_s1_agent:rp_data -> router_009:sink_data
	wire          nnw_from_hps_s1_agent_rp_ready;                                              // router_009:sink_ready -> nnw_from_hps_s1_agent:rp_ready
	wire          nnw_from_hps_s1_agent_rp_startofpacket;                                      // nnw_from_hps_s1_agent:rp_startofpacket -> router_009:sink_startofpacket
	wire          nnw_from_hps_s1_agent_rp_endofpacket;                                        // nnw_from_hps_s1_agent:rp_endofpacket -> router_009:sink_endofpacket
	wire          router_009_src_valid;                                                        // router_009:src_valid -> rsp_demux_007:sink_valid
	wire  [119:0] router_009_src_data;                                                         // router_009:src_data -> rsp_demux_007:sink_data
	wire          router_009_src_ready;                                                        // rsp_demux_007:sink_ready -> router_009:src_ready
	wire   [26:0] router_009_src_channel;                                                      // router_009:src_channel -> rsp_demux_007:sink_channel
	wire          router_009_src_startofpacket;                                                // router_009:src_startofpacket -> rsp_demux_007:sink_startofpacket
	wire          router_009_src_endofpacket;                                                  // router_009:src_endofpacket -> rsp_demux_007:sink_endofpacket
	wire          nne_from_hps_s1_agent_rp_valid;                                              // nne_from_hps_s1_agent:rp_valid -> router_010:sink_valid
	wire  [119:0] nne_from_hps_s1_agent_rp_data;                                               // nne_from_hps_s1_agent:rp_data -> router_010:sink_data
	wire          nne_from_hps_s1_agent_rp_ready;                                              // router_010:sink_ready -> nne_from_hps_s1_agent:rp_ready
	wire          nne_from_hps_s1_agent_rp_startofpacket;                                      // nne_from_hps_s1_agent:rp_startofpacket -> router_010:sink_startofpacket
	wire          nne_from_hps_s1_agent_rp_endofpacket;                                        // nne_from_hps_s1_agent:rp_endofpacket -> router_010:sink_endofpacket
	wire          router_010_src_valid;                                                        // router_010:src_valid -> rsp_demux_008:sink_valid
	wire  [119:0] router_010_src_data;                                                         // router_010:src_data -> rsp_demux_008:sink_data
	wire          router_010_src_ready;                                                        // rsp_demux_008:sink_ready -> router_010:src_ready
	wire   [26:0] router_010_src_channel;                                                      // router_010:src_channel -> rsp_demux_008:sink_channel
	wire          router_010_src_startofpacket;                                                // router_010:src_startofpacket -> rsp_demux_008:sink_startofpacket
	wire          router_010_src_endofpacket;                                                  // router_010:src_endofpacket -> rsp_demux_008:sink_endofpacket
	wire          nsw_from_hps_s1_agent_rp_valid;                                              // nsw_from_hps_s1_agent:rp_valid -> router_011:sink_valid
	wire  [119:0] nsw_from_hps_s1_agent_rp_data;                                               // nsw_from_hps_s1_agent:rp_data -> router_011:sink_data
	wire          nsw_from_hps_s1_agent_rp_ready;                                              // router_011:sink_ready -> nsw_from_hps_s1_agent:rp_ready
	wire          nsw_from_hps_s1_agent_rp_startofpacket;                                      // nsw_from_hps_s1_agent:rp_startofpacket -> router_011:sink_startofpacket
	wire          nsw_from_hps_s1_agent_rp_endofpacket;                                        // nsw_from_hps_s1_agent:rp_endofpacket -> router_011:sink_endofpacket
	wire          router_011_src_valid;                                                        // router_011:src_valid -> rsp_demux_009:sink_valid
	wire  [119:0] router_011_src_data;                                                         // router_011:src_data -> rsp_demux_009:sink_data
	wire          router_011_src_ready;                                                        // rsp_demux_009:sink_ready -> router_011:src_ready
	wire   [26:0] router_011_src_channel;                                                      // router_011:src_channel -> rsp_demux_009:sink_channel
	wire          router_011_src_startofpacket;                                                // router_011:src_startofpacket -> rsp_demux_009:sink_startofpacket
	wire          router_011_src_endofpacket;                                                  // router_011:src_endofpacket -> rsp_demux_009:sink_endofpacket
	wire          nse_from_hps_s1_agent_rp_valid;                                              // nse_from_hps_s1_agent:rp_valid -> router_012:sink_valid
	wire  [119:0] nse_from_hps_s1_agent_rp_data;                                               // nse_from_hps_s1_agent:rp_data -> router_012:sink_data
	wire          nse_from_hps_s1_agent_rp_ready;                                              // router_012:sink_ready -> nse_from_hps_s1_agent:rp_ready
	wire          nse_from_hps_s1_agent_rp_startofpacket;                                      // nse_from_hps_s1_agent:rp_startofpacket -> router_012:sink_startofpacket
	wire          nse_from_hps_s1_agent_rp_endofpacket;                                        // nse_from_hps_s1_agent:rp_endofpacket -> router_012:sink_endofpacket
	wire          router_012_src_valid;                                                        // router_012:src_valid -> rsp_demux_010:sink_valid
	wire  [119:0] router_012_src_data;                                                         // router_012:src_data -> rsp_demux_010:sink_data
	wire          router_012_src_ready;                                                        // rsp_demux_010:sink_ready -> router_012:src_ready
	wire   [26:0] router_012_src_channel;                                                      // router_012:src_channel -> rsp_demux_010:sink_channel
	wire          router_012_src_startofpacket;                                                // router_012:src_startofpacket -> rsp_demux_010:sink_startofpacket
	wire          router_012_src_endofpacket;                                                  // router_012:src_endofpacket -> rsp_demux_010:sink_endofpacket
	wire          n0_from_fpga_s1_agent_rp_valid;                                              // n0_from_fpga_s1_agent:rp_valid -> router_013:sink_valid
	wire  [119:0] n0_from_fpga_s1_agent_rp_data;                                               // n0_from_fpga_s1_agent:rp_data -> router_013:sink_data
	wire          n0_from_fpga_s1_agent_rp_ready;                                              // router_013:sink_ready -> n0_from_fpga_s1_agent:rp_ready
	wire          n0_from_fpga_s1_agent_rp_startofpacket;                                      // n0_from_fpga_s1_agent:rp_startofpacket -> router_013:sink_startofpacket
	wire          n0_from_fpga_s1_agent_rp_endofpacket;                                        // n0_from_fpga_s1_agent:rp_endofpacket -> router_013:sink_endofpacket
	wire          router_013_src_valid;                                                        // router_013:src_valid -> rsp_demux_011:sink_valid
	wire  [119:0] router_013_src_data;                                                         // router_013:src_data -> rsp_demux_011:sink_data
	wire          router_013_src_ready;                                                        // rsp_demux_011:sink_ready -> router_013:src_ready
	wire   [26:0] router_013_src_channel;                                                      // router_013:src_channel -> rsp_demux_011:sink_channel
	wire          router_013_src_startofpacket;                                                // router_013:src_startofpacket -> rsp_demux_011:sink_startofpacket
	wire          router_013_src_endofpacket;                                                  // router_013:src_endofpacket -> rsp_demux_011:sink_endofpacket
	wire          nn_from_fpga_s1_agent_rp_valid;                                              // nn_from_fpga_s1_agent:rp_valid -> router_014:sink_valid
	wire  [119:0] nn_from_fpga_s1_agent_rp_data;                                               // nn_from_fpga_s1_agent:rp_data -> router_014:sink_data
	wire          nn_from_fpga_s1_agent_rp_ready;                                              // router_014:sink_ready -> nn_from_fpga_s1_agent:rp_ready
	wire          nn_from_fpga_s1_agent_rp_startofpacket;                                      // nn_from_fpga_s1_agent:rp_startofpacket -> router_014:sink_startofpacket
	wire          nn_from_fpga_s1_agent_rp_endofpacket;                                        // nn_from_fpga_s1_agent:rp_endofpacket -> router_014:sink_endofpacket
	wire          router_014_src_valid;                                                        // router_014:src_valid -> rsp_demux_012:sink_valid
	wire  [119:0] router_014_src_data;                                                         // router_014:src_data -> rsp_demux_012:sink_data
	wire          router_014_src_ready;                                                        // rsp_demux_012:sink_ready -> router_014:src_ready
	wire   [26:0] router_014_src_channel;                                                      // router_014:src_channel -> rsp_demux_012:sink_channel
	wire          router_014_src_startofpacket;                                                // router_014:src_startofpacket -> rsp_demux_012:sink_startofpacket
	wire          router_014_src_endofpacket;                                                  // router_014:src_endofpacket -> rsp_demux_012:sink_endofpacket
	wire          ns_from_fpga_s1_agent_rp_valid;                                              // ns_from_fpga_s1_agent:rp_valid -> router_015:sink_valid
	wire  [119:0] ns_from_fpga_s1_agent_rp_data;                                               // ns_from_fpga_s1_agent:rp_data -> router_015:sink_data
	wire          ns_from_fpga_s1_agent_rp_ready;                                              // router_015:sink_ready -> ns_from_fpga_s1_agent:rp_ready
	wire          ns_from_fpga_s1_agent_rp_startofpacket;                                      // ns_from_fpga_s1_agent:rp_startofpacket -> router_015:sink_startofpacket
	wire          ns_from_fpga_s1_agent_rp_endofpacket;                                        // ns_from_fpga_s1_agent:rp_endofpacket -> router_015:sink_endofpacket
	wire          router_015_src_valid;                                                        // router_015:src_valid -> rsp_demux_013:sink_valid
	wire  [119:0] router_015_src_data;                                                         // router_015:src_data -> rsp_demux_013:sink_data
	wire          router_015_src_ready;                                                        // rsp_demux_013:sink_ready -> router_015:src_ready
	wire   [26:0] router_015_src_channel;                                                      // router_015:src_channel -> rsp_demux_013:sink_channel
	wire          router_015_src_startofpacket;                                                // router_015:src_startofpacket -> rsp_demux_013:sink_startofpacket
	wire          router_015_src_endofpacket;                                                  // router_015:src_endofpacket -> rsp_demux_013:sink_endofpacket
	wire          nw_from_fpga_s1_agent_rp_valid;                                              // nw_from_fpga_s1_agent:rp_valid -> router_016:sink_valid
	wire  [119:0] nw_from_fpga_s1_agent_rp_data;                                               // nw_from_fpga_s1_agent:rp_data -> router_016:sink_data
	wire          nw_from_fpga_s1_agent_rp_ready;                                              // router_016:sink_ready -> nw_from_fpga_s1_agent:rp_ready
	wire          nw_from_fpga_s1_agent_rp_startofpacket;                                      // nw_from_fpga_s1_agent:rp_startofpacket -> router_016:sink_startofpacket
	wire          nw_from_fpga_s1_agent_rp_endofpacket;                                        // nw_from_fpga_s1_agent:rp_endofpacket -> router_016:sink_endofpacket
	wire          router_016_src_valid;                                                        // router_016:src_valid -> rsp_demux_014:sink_valid
	wire  [119:0] router_016_src_data;                                                         // router_016:src_data -> rsp_demux_014:sink_data
	wire          router_016_src_ready;                                                        // rsp_demux_014:sink_ready -> router_016:src_ready
	wire   [26:0] router_016_src_channel;                                                      // router_016:src_channel -> rsp_demux_014:sink_channel
	wire          router_016_src_startofpacket;                                                // router_016:src_startofpacket -> rsp_demux_014:sink_startofpacket
	wire          router_016_src_endofpacket;                                                  // router_016:src_endofpacket -> rsp_demux_014:sink_endofpacket
	wire          ne_from_fpga_s1_agent_rp_valid;                                              // ne_from_fpga_s1_agent:rp_valid -> router_017:sink_valid
	wire  [119:0] ne_from_fpga_s1_agent_rp_data;                                               // ne_from_fpga_s1_agent:rp_data -> router_017:sink_data
	wire          ne_from_fpga_s1_agent_rp_ready;                                              // router_017:sink_ready -> ne_from_fpga_s1_agent:rp_ready
	wire          ne_from_fpga_s1_agent_rp_startofpacket;                                      // ne_from_fpga_s1_agent:rp_startofpacket -> router_017:sink_startofpacket
	wire          ne_from_fpga_s1_agent_rp_endofpacket;                                        // ne_from_fpga_s1_agent:rp_endofpacket -> router_017:sink_endofpacket
	wire          router_017_src_valid;                                                        // router_017:src_valid -> rsp_demux_015:sink_valid
	wire  [119:0] router_017_src_data;                                                         // router_017:src_data -> rsp_demux_015:sink_data
	wire          router_017_src_ready;                                                        // rsp_demux_015:sink_ready -> router_017:src_ready
	wire   [26:0] router_017_src_channel;                                                      // router_017:src_channel -> rsp_demux_015:sink_channel
	wire          router_017_src_startofpacket;                                                // router_017:src_startofpacket -> rsp_demux_015:sink_startofpacket
	wire          router_017_src_endofpacket;                                                  // router_017:src_endofpacket -> rsp_demux_015:sink_endofpacket
	wire          nnw_from_fpga_s1_agent_rp_valid;                                             // nnw_from_fpga_s1_agent:rp_valid -> router_018:sink_valid
	wire  [119:0] nnw_from_fpga_s1_agent_rp_data;                                              // nnw_from_fpga_s1_agent:rp_data -> router_018:sink_data
	wire          nnw_from_fpga_s1_agent_rp_ready;                                             // router_018:sink_ready -> nnw_from_fpga_s1_agent:rp_ready
	wire          nnw_from_fpga_s1_agent_rp_startofpacket;                                     // nnw_from_fpga_s1_agent:rp_startofpacket -> router_018:sink_startofpacket
	wire          nnw_from_fpga_s1_agent_rp_endofpacket;                                       // nnw_from_fpga_s1_agent:rp_endofpacket -> router_018:sink_endofpacket
	wire          router_018_src_valid;                                                        // router_018:src_valid -> rsp_demux_016:sink_valid
	wire  [119:0] router_018_src_data;                                                         // router_018:src_data -> rsp_demux_016:sink_data
	wire          router_018_src_ready;                                                        // rsp_demux_016:sink_ready -> router_018:src_ready
	wire   [26:0] router_018_src_channel;                                                      // router_018:src_channel -> rsp_demux_016:sink_channel
	wire          router_018_src_startofpacket;                                                // router_018:src_startofpacket -> rsp_demux_016:sink_startofpacket
	wire          router_018_src_endofpacket;                                                  // router_018:src_endofpacket -> rsp_demux_016:sink_endofpacket
	wire          nne_from_fpga_s1_agent_rp_valid;                                             // nne_from_fpga_s1_agent:rp_valid -> router_019:sink_valid
	wire  [119:0] nne_from_fpga_s1_agent_rp_data;                                              // nne_from_fpga_s1_agent:rp_data -> router_019:sink_data
	wire          nne_from_fpga_s1_agent_rp_ready;                                             // router_019:sink_ready -> nne_from_fpga_s1_agent:rp_ready
	wire          nne_from_fpga_s1_agent_rp_startofpacket;                                     // nne_from_fpga_s1_agent:rp_startofpacket -> router_019:sink_startofpacket
	wire          nne_from_fpga_s1_agent_rp_endofpacket;                                       // nne_from_fpga_s1_agent:rp_endofpacket -> router_019:sink_endofpacket
	wire          router_019_src_valid;                                                        // router_019:src_valid -> rsp_demux_017:sink_valid
	wire  [119:0] router_019_src_data;                                                         // router_019:src_data -> rsp_demux_017:sink_data
	wire          router_019_src_ready;                                                        // rsp_demux_017:sink_ready -> router_019:src_ready
	wire   [26:0] router_019_src_channel;                                                      // router_019:src_channel -> rsp_demux_017:sink_channel
	wire          router_019_src_startofpacket;                                                // router_019:src_startofpacket -> rsp_demux_017:sink_startofpacket
	wire          router_019_src_endofpacket;                                                  // router_019:src_endofpacket -> rsp_demux_017:sink_endofpacket
	wire          nsw_from_fpga_s1_agent_rp_valid;                                             // nsw_from_fpga_s1_agent:rp_valid -> router_020:sink_valid
	wire  [119:0] nsw_from_fpga_s1_agent_rp_data;                                              // nsw_from_fpga_s1_agent:rp_data -> router_020:sink_data
	wire          nsw_from_fpga_s1_agent_rp_ready;                                             // router_020:sink_ready -> nsw_from_fpga_s1_agent:rp_ready
	wire          nsw_from_fpga_s1_agent_rp_startofpacket;                                     // nsw_from_fpga_s1_agent:rp_startofpacket -> router_020:sink_startofpacket
	wire          nsw_from_fpga_s1_agent_rp_endofpacket;                                       // nsw_from_fpga_s1_agent:rp_endofpacket -> router_020:sink_endofpacket
	wire          router_020_src_valid;                                                        // router_020:src_valid -> rsp_demux_018:sink_valid
	wire  [119:0] router_020_src_data;                                                         // router_020:src_data -> rsp_demux_018:sink_data
	wire          router_020_src_ready;                                                        // rsp_demux_018:sink_ready -> router_020:src_ready
	wire   [26:0] router_020_src_channel;                                                      // router_020:src_channel -> rsp_demux_018:sink_channel
	wire          router_020_src_startofpacket;                                                // router_020:src_startofpacket -> rsp_demux_018:sink_startofpacket
	wire          router_020_src_endofpacket;                                                  // router_020:src_endofpacket -> rsp_demux_018:sink_endofpacket
	wire          nse_from_fpga_s1_agent_rp_valid;                                             // nse_from_fpga_s1_agent:rp_valid -> router_021:sink_valid
	wire  [119:0] nse_from_fpga_s1_agent_rp_data;                                              // nse_from_fpga_s1_agent:rp_data -> router_021:sink_data
	wire          nse_from_fpga_s1_agent_rp_ready;                                             // router_021:sink_ready -> nse_from_fpga_s1_agent:rp_ready
	wire          nse_from_fpga_s1_agent_rp_startofpacket;                                     // nse_from_fpga_s1_agent:rp_startofpacket -> router_021:sink_startofpacket
	wire          nse_from_fpga_s1_agent_rp_endofpacket;                                       // nse_from_fpga_s1_agent:rp_endofpacket -> router_021:sink_endofpacket
	wire          router_021_src_valid;                                                        // router_021:src_valid -> rsp_demux_019:sink_valid
	wire  [119:0] router_021_src_data;                                                         // router_021:src_data -> rsp_demux_019:sink_data
	wire          router_021_src_ready;                                                        // rsp_demux_019:sink_ready -> router_021:src_ready
	wire   [26:0] router_021_src_channel;                                                      // router_021:src_channel -> rsp_demux_019:sink_channel
	wire          router_021_src_startofpacket;                                                // router_021:src_startofpacket -> rsp_demux_019:sink_startofpacket
	wire          router_021_src_endofpacket;                                                  // router_021:src_endofpacket -> rsp_demux_019:sink_endofpacket
	wire          one9th_s1_agent_rp_valid;                                                    // one9th_s1_agent:rp_valid -> router_022:sink_valid
	wire  [119:0] one9th_s1_agent_rp_data;                                                     // one9th_s1_agent:rp_data -> router_022:sink_data
	wire          one9th_s1_agent_rp_ready;                                                    // router_022:sink_ready -> one9th_s1_agent:rp_ready
	wire          one9th_s1_agent_rp_startofpacket;                                            // one9th_s1_agent:rp_startofpacket -> router_022:sink_startofpacket
	wire          one9th_s1_agent_rp_endofpacket;                                              // one9th_s1_agent:rp_endofpacket -> router_022:sink_endofpacket
	wire          router_022_src_valid;                                                        // router_022:src_valid -> rsp_demux_020:sink_valid
	wire  [119:0] router_022_src_data;                                                         // router_022:src_data -> rsp_demux_020:sink_data
	wire          router_022_src_ready;                                                        // rsp_demux_020:sink_ready -> router_022:src_ready
	wire   [26:0] router_022_src_channel;                                                      // router_022:src_channel -> rsp_demux_020:sink_channel
	wire          router_022_src_startofpacket;                                                // router_022:src_startofpacket -> rsp_demux_020:sink_startofpacket
	wire          router_022_src_endofpacket;                                                  // router_022:src_endofpacket -> rsp_demux_020:sink_endofpacket
	wire          one36th_s1_agent_rp_valid;                                                   // one36th_s1_agent:rp_valid -> router_023:sink_valid
	wire  [119:0] one36th_s1_agent_rp_data;                                                    // one36th_s1_agent:rp_data -> router_023:sink_data
	wire          one36th_s1_agent_rp_ready;                                                   // router_023:sink_ready -> one36th_s1_agent:rp_ready
	wire          one36th_s1_agent_rp_startofpacket;                                           // one36th_s1_agent:rp_startofpacket -> router_023:sink_startofpacket
	wire          one36th_s1_agent_rp_endofpacket;                                             // one36th_s1_agent:rp_endofpacket -> router_023:sink_endofpacket
	wire          router_023_src_valid;                                                        // router_023:src_valid -> rsp_demux_021:sink_valid
	wire  [119:0] router_023_src_data;                                                         // router_023:src_data -> rsp_demux_021:sink_data
	wire          router_023_src_ready;                                                        // rsp_demux_021:sink_ready -> router_023:src_ready
	wire   [26:0] router_023_src_channel;                                                      // router_023:src_channel -> rsp_demux_021:sink_channel
	wire          router_023_src_startofpacket;                                                // router_023:src_startofpacket -> rsp_demux_021:sink_startofpacket
	wire          router_023_src_endofpacket;                                                  // router_023:src_endofpacket -> rsp_demux_021:sink_endofpacket
	wire          omega_s1_agent_rp_valid;                                                     // omega_s1_agent:rp_valid -> router_024:sink_valid
	wire  [119:0] omega_s1_agent_rp_data;                                                      // omega_s1_agent:rp_data -> router_024:sink_data
	wire          omega_s1_agent_rp_ready;                                                     // router_024:sink_ready -> omega_s1_agent:rp_ready
	wire          omega_s1_agent_rp_startofpacket;                                             // omega_s1_agent:rp_startofpacket -> router_024:sink_startofpacket
	wire          omega_s1_agent_rp_endofpacket;                                               // omega_s1_agent:rp_endofpacket -> router_024:sink_endofpacket
	wire          router_024_src_valid;                                                        // router_024:src_valid -> rsp_demux_022:sink_valid
	wire  [119:0] router_024_src_data;                                                         // router_024:src_data -> rsp_demux_022:sink_data
	wire          router_024_src_ready;                                                        // rsp_demux_022:sink_ready -> router_024:src_ready
	wire   [26:0] router_024_src_channel;                                                      // router_024:src_channel -> rsp_demux_022:sink_channel
	wire          router_024_src_startofpacket;                                                // router_024:src_startofpacket -> rsp_demux_022:sink_startofpacket
	wire          router_024_src_endofpacket;                                                  // router_024:src_endofpacket -> rsp_demux_022:sink_endofpacket
	wire          ux_s1_agent_rp_valid;                                                        // ux_s1_agent:rp_valid -> router_025:sink_valid
	wire  [119:0] ux_s1_agent_rp_data;                                                         // ux_s1_agent:rp_data -> router_025:sink_data
	wire          ux_s1_agent_rp_ready;                                                        // router_025:sink_ready -> ux_s1_agent:rp_ready
	wire          ux_s1_agent_rp_startofpacket;                                                // ux_s1_agent:rp_startofpacket -> router_025:sink_startofpacket
	wire          ux_s1_agent_rp_endofpacket;                                                  // ux_s1_agent:rp_endofpacket -> router_025:sink_endofpacket
	wire          router_025_src_valid;                                                        // router_025:src_valid -> rsp_demux_023:sink_valid
	wire  [119:0] router_025_src_data;                                                         // router_025:src_data -> rsp_demux_023:sink_data
	wire          router_025_src_ready;                                                        // rsp_demux_023:sink_ready -> router_025:src_ready
	wire   [26:0] router_025_src_channel;                                                      // router_025:src_channel -> rsp_demux_023:sink_channel
	wire          router_025_src_startofpacket;                                                // router_025:src_startofpacket -> rsp_demux_023:sink_startofpacket
	wire          router_025_src_endofpacket;                                                  // router_025:src_endofpacket -> rsp_demux_023:sink_endofpacket
	wire          uy_s1_agent_rp_valid;                                                        // uy_s1_agent:rp_valid -> router_026:sink_valid
	wire  [119:0] uy_s1_agent_rp_data;                                                         // uy_s1_agent:rp_data -> router_026:sink_data
	wire          uy_s1_agent_rp_ready;                                                        // router_026:sink_ready -> uy_s1_agent:rp_ready
	wire          uy_s1_agent_rp_startofpacket;                                                // uy_s1_agent:rp_startofpacket -> router_026:sink_startofpacket
	wire          uy_s1_agent_rp_endofpacket;                                                  // uy_s1_agent:rp_endofpacket -> router_026:sink_endofpacket
	wire          router_026_src_valid;                                                        // router_026:src_valid -> rsp_demux_024:sink_valid
	wire  [119:0] router_026_src_data;                                                         // router_026:src_data -> rsp_demux_024:sink_data
	wire          router_026_src_ready;                                                        // rsp_demux_024:sink_ready -> router_026:src_ready
	wire   [26:0] router_026_src_channel;                                                      // router_026:src_channel -> rsp_demux_024:sink_channel
	wire          router_026_src_startofpacket;                                                // router_026:src_startofpacket -> rsp_demux_024:sink_startofpacket
	wire          router_026_src_endofpacket;                                                  // router_026:src_endofpacket -> rsp_demux_024:sink_endofpacket
	wire          pipes_s1_agent_rp_valid;                                                     // pipes_s1_agent:rp_valid -> router_027:sink_valid
	wire  [119:0] pipes_s1_agent_rp_data;                                                      // pipes_s1_agent:rp_data -> router_027:sink_data
	wire          pipes_s1_agent_rp_ready;                                                     // router_027:sink_ready -> pipes_s1_agent:rp_ready
	wire          pipes_s1_agent_rp_startofpacket;                                             // pipes_s1_agent:rp_startofpacket -> router_027:sink_startofpacket
	wire          pipes_s1_agent_rp_endofpacket;                                               // pipes_s1_agent:rp_endofpacket -> router_027:sink_endofpacket
	wire          router_027_src_valid;                                                        // router_027:src_valid -> rsp_demux_025:sink_valid
	wire  [119:0] router_027_src_data;                                                         // router_027:src_data -> rsp_demux_025:sink_data
	wire          router_027_src_ready;                                                        // rsp_demux_025:sink_ready -> router_027:src_ready
	wire   [26:0] router_027_src_channel;                                                      // router_027:src_channel -> rsp_demux_025:sink_channel
	wire          router_027_src_startofpacket;                                                // router_027:src_startofpacket -> rsp_demux_025:sink_startofpacket
	wire          router_027_src_endofpacket;                                                  // router_027:src_endofpacket -> rsp_demux_025:sink_endofpacket
	wire          pixel_dma_addr_translation_slave_agent_rp_valid;                             // Pixel_DMA_Addr_Translation_slave_agent:rp_valid -> router_028:sink_valid
	wire  [119:0] pixel_dma_addr_translation_slave_agent_rp_data;                              // Pixel_DMA_Addr_Translation_slave_agent:rp_data -> router_028:sink_data
	wire          pixel_dma_addr_translation_slave_agent_rp_ready;                             // router_028:sink_ready -> Pixel_DMA_Addr_Translation_slave_agent:rp_ready
	wire          pixel_dma_addr_translation_slave_agent_rp_startofpacket;                     // Pixel_DMA_Addr_Translation_slave_agent:rp_startofpacket -> router_028:sink_startofpacket
	wire          pixel_dma_addr_translation_slave_agent_rp_endofpacket;                       // Pixel_DMA_Addr_Translation_slave_agent:rp_endofpacket -> router_028:sink_endofpacket
	wire          router_028_src_valid;                                                        // router_028:src_valid -> rsp_demux_026:sink_valid
	wire  [119:0] router_028_src_data;                                                         // router_028:src_data -> rsp_demux_026:sink_data
	wire          router_028_src_ready;                                                        // rsp_demux_026:sink_ready -> router_028:src_ready
	wire   [26:0] router_028_src_channel;                                                      // router_028:src_channel -> rsp_demux_026:sink_channel
	wire          router_028_src_startofpacket;                                                // router_028:src_startofpacket -> rsp_demux_026:sink_startofpacket
	wire          router_028_src_endofpacket;                                                  // router_028:src_endofpacket -> rsp_demux_026:sink_endofpacket
	wire          router_src_valid;                                                            // router:src_valid -> ARM_A9_HPS_h2f_lw_axi_master_wr_limiter:cmd_sink_valid
	wire  [119:0] router_src_data;                                                             // router:src_data -> ARM_A9_HPS_h2f_lw_axi_master_wr_limiter:cmd_sink_data
	wire          router_src_ready;                                                            // ARM_A9_HPS_h2f_lw_axi_master_wr_limiter:cmd_sink_ready -> router:src_ready
	wire   [26:0] router_src_channel;                                                          // router:src_channel -> ARM_A9_HPS_h2f_lw_axi_master_wr_limiter:cmd_sink_channel
	wire          router_src_startofpacket;                                                    // router:src_startofpacket -> ARM_A9_HPS_h2f_lw_axi_master_wr_limiter:cmd_sink_startofpacket
	wire          router_src_endofpacket;                                                      // router:src_endofpacket -> ARM_A9_HPS_h2f_lw_axi_master_wr_limiter:cmd_sink_endofpacket
	wire  [119:0] arm_a9_hps_h2f_lw_axi_master_wr_limiter_cmd_src_data;                        // ARM_A9_HPS_h2f_lw_axi_master_wr_limiter:cmd_src_data -> cmd_demux:sink_data
	wire          arm_a9_hps_h2f_lw_axi_master_wr_limiter_cmd_src_ready;                       // cmd_demux:sink_ready -> ARM_A9_HPS_h2f_lw_axi_master_wr_limiter:cmd_src_ready
	wire   [26:0] arm_a9_hps_h2f_lw_axi_master_wr_limiter_cmd_src_channel;                     // ARM_A9_HPS_h2f_lw_axi_master_wr_limiter:cmd_src_channel -> cmd_demux:sink_channel
	wire          arm_a9_hps_h2f_lw_axi_master_wr_limiter_cmd_src_startofpacket;               // ARM_A9_HPS_h2f_lw_axi_master_wr_limiter:cmd_src_startofpacket -> cmd_demux:sink_startofpacket
	wire          arm_a9_hps_h2f_lw_axi_master_wr_limiter_cmd_src_endofpacket;                 // ARM_A9_HPS_h2f_lw_axi_master_wr_limiter:cmd_src_endofpacket -> cmd_demux:sink_endofpacket
	wire          rsp_mux_src_valid;                                                           // rsp_mux:src_valid -> ARM_A9_HPS_h2f_lw_axi_master_wr_limiter:rsp_sink_valid
	wire  [119:0] rsp_mux_src_data;                                                            // rsp_mux:src_data -> ARM_A9_HPS_h2f_lw_axi_master_wr_limiter:rsp_sink_data
	wire          rsp_mux_src_ready;                                                           // ARM_A9_HPS_h2f_lw_axi_master_wr_limiter:rsp_sink_ready -> rsp_mux:src_ready
	wire   [26:0] rsp_mux_src_channel;                                                         // rsp_mux:src_channel -> ARM_A9_HPS_h2f_lw_axi_master_wr_limiter:rsp_sink_channel
	wire          rsp_mux_src_startofpacket;                                                   // rsp_mux:src_startofpacket -> ARM_A9_HPS_h2f_lw_axi_master_wr_limiter:rsp_sink_startofpacket
	wire          rsp_mux_src_endofpacket;                                                     // rsp_mux:src_endofpacket -> ARM_A9_HPS_h2f_lw_axi_master_wr_limiter:rsp_sink_endofpacket
	wire          arm_a9_hps_h2f_lw_axi_master_wr_limiter_rsp_src_valid;                       // ARM_A9_HPS_h2f_lw_axi_master_wr_limiter:rsp_src_valid -> ARM_A9_HPS_h2f_lw_axi_master_agent:write_rp_valid
	wire  [119:0] arm_a9_hps_h2f_lw_axi_master_wr_limiter_rsp_src_data;                        // ARM_A9_HPS_h2f_lw_axi_master_wr_limiter:rsp_src_data -> ARM_A9_HPS_h2f_lw_axi_master_agent:write_rp_data
	wire          arm_a9_hps_h2f_lw_axi_master_wr_limiter_rsp_src_ready;                       // ARM_A9_HPS_h2f_lw_axi_master_agent:write_rp_ready -> ARM_A9_HPS_h2f_lw_axi_master_wr_limiter:rsp_src_ready
	wire   [26:0] arm_a9_hps_h2f_lw_axi_master_wr_limiter_rsp_src_channel;                     // ARM_A9_HPS_h2f_lw_axi_master_wr_limiter:rsp_src_channel -> ARM_A9_HPS_h2f_lw_axi_master_agent:write_rp_channel
	wire          arm_a9_hps_h2f_lw_axi_master_wr_limiter_rsp_src_startofpacket;               // ARM_A9_HPS_h2f_lw_axi_master_wr_limiter:rsp_src_startofpacket -> ARM_A9_HPS_h2f_lw_axi_master_agent:write_rp_startofpacket
	wire          arm_a9_hps_h2f_lw_axi_master_wr_limiter_rsp_src_endofpacket;                 // ARM_A9_HPS_h2f_lw_axi_master_wr_limiter:rsp_src_endofpacket -> ARM_A9_HPS_h2f_lw_axi_master_agent:write_rp_endofpacket
	wire          router_001_src_valid;                                                        // router_001:src_valid -> ARM_A9_HPS_h2f_lw_axi_master_rd_limiter:cmd_sink_valid
	wire  [119:0] router_001_src_data;                                                         // router_001:src_data -> ARM_A9_HPS_h2f_lw_axi_master_rd_limiter:cmd_sink_data
	wire          router_001_src_ready;                                                        // ARM_A9_HPS_h2f_lw_axi_master_rd_limiter:cmd_sink_ready -> router_001:src_ready
	wire   [26:0] router_001_src_channel;                                                      // router_001:src_channel -> ARM_A9_HPS_h2f_lw_axi_master_rd_limiter:cmd_sink_channel
	wire          router_001_src_startofpacket;                                                // router_001:src_startofpacket -> ARM_A9_HPS_h2f_lw_axi_master_rd_limiter:cmd_sink_startofpacket
	wire          router_001_src_endofpacket;                                                  // router_001:src_endofpacket -> ARM_A9_HPS_h2f_lw_axi_master_rd_limiter:cmd_sink_endofpacket
	wire  [119:0] arm_a9_hps_h2f_lw_axi_master_rd_limiter_cmd_src_data;                        // ARM_A9_HPS_h2f_lw_axi_master_rd_limiter:cmd_src_data -> cmd_demux_001:sink_data
	wire          arm_a9_hps_h2f_lw_axi_master_rd_limiter_cmd_src_ready;                       // cmd_demux_001:sink_ready -> ARM_A9_HPS_h2f_lw_axi_master_rd_limiter:cmd_src_ready
	wire   [26:0] arm_a9_hps_h2f_lw_axi_master_rd_limiter_cmd_src_channel;                     // ARM_A9_HPS_h2f_lw_axi_master_rd_limiter:cmd_src_channel -> cmd_demux_001:sink_channel
	wire          arm_a9_hps_h2f_lw_axi_master_rd_limiter_cmd_src_startofpacket;               // ARM_A9_HPS_h2f_lw_axi_master_rd_limiter:cmd_src_startofpacket -> cmd_demux_001:sink_startofpacket
	wire          arm_a9_hps_h2f_lw_axi_master_rd_limiter_cmd_src_endofpacket;                 // ARM_A9_HPS_h2f_lw_axi_master_rd_limiter:cmd_src_endofpacket -> cmd_demux_001:sink_endofpacket
	wire          rsp_mux_001_src_valid;                                                       // rsp_mux_001:src_valid -> ARM_A9_HPS_h2f_lw_axi_master_rd_limiter:rsp_sink_valid
	wire  [119:0] rsp_mux_001_src_data;                                                        // rsp_mux_001:src_data -> ARM_A9_HPS_h2f_lw_axi_master_rd_limiter:rsp_sink_data
	wire          rsp_mux_001_src_ready;                                                       // ARM_A9_HPS_h2f_lw_axi_master_rd_limiter:rsp_sink_ready -> rsp_mux_001:src_ready
	wire   [26:0] rsp_mux_001_src_channel;                                                     // rsp_mux_001:src_channel -> ARM_A9_HPS_h2f_lw_axi_master_rd_limiter:rsp_sink_channel
	wire          rsp_mux_001_src_startofpacket;                                               // rsp_mux_001:src_startofpacket -> ARM_A9_HPS_h2f_lw_axi_master_rd_limiter:rsp_sink_startofpacket
	wire          rsp_mux_001_src_endofpacket;                                                 // rsp_mux_001:src_endofpacket -> ARM_A9_HPS_h2f_lw_axi_master_rd_limiter:rsp_sink_endofpacket
	wire          arm_a9_hps_h2f_lw_axi_master_rd_limiter_rsp_src_valid;                       // ARM_A9_HPS_h2f_lw_axi_master_rd_limiter:rsp_src_valid -> ARM_A9_HPS_h2f_lw_axi_master_agent:read_rp_valid
	wire  [119:0] arm_a9_hps_h2f_lw_axi_master_rd_limiter_rsp_src_data;                        // ARM_A9_HPS_h2f_lw_axi_master_rd_limiter:rsp_src_data -> ARM_A9_HPS_h2f_lw_axi_master_agent:read_rp_data
	wire          arm_a9_hps_h2f_lw_axi_master_rd_limiter_rsp_src_ready;                       // ARM_A9_HPS_h2f_lw_axi_master_agent:read_rp_ready -> ARM_A9_HPS_h2f_lw_axi_master_rd_limiter:rsp_src_ready
	wire   [26:0] arm_a9_hps_h2f_lw_axi_master_rd_limiter_rsp_src_channel;                     // ARM_A9_HPS_h2f_lw_axi_master_rd_limiter:rsp_src_channel -> ARM_A9_HPS_h2f_lw_axi_master_agent:read_rp_channel
	wire          arm_a9_hps_h2f_lw_axi_master_rd_limiter_rsp_src_startofpacket;               // ARM_A9_HPS_h2f_lw_axi_master_rd_limiter:rsp_src_startofpacket -> ARM_A9_HPS_h2f_lw_axi_master_agent:read_rp_startofpacket
	wire          arm_a9_hps_h2f_lw_axi_master_rd_limiter_rsp_src_endofpacket;                 // ARM_A9_HPS_h2f_lw_axi_master_rd_limiter:rsp_src_endofpacket -> ARM_A9_HPS_h2f_lw_axi_master_agent:read_rp_endofpacket
	wire          cmd_mux_src_valid;                                                           // cmd_mux:src_valid -> AV_Config_avalon_av_config_slave_burst_adapter:sink0_valid
	wire  [119:0] cmd_mux_src_data;                                                            // cmd_mux:src_data -> AV_Config_avalon_av_config_slave_burst_adapter:sink0_data
	wire          cmd_mux_src_ready;                                                           // AV_Config_avalon_av_config_slave_burst_adapter:sink0_ready -> cmd_mux:src_ready
	wire   [26:0] cmd_mux_src_channel;                                                         // cmd_mux:src_channel -> AV_Config_avalon_av_config_slave_burst_adapter:sink0_channel
	wire          cmd_mux_src_startofpacket;                                                   // cmd_mux:src_startofpacket -> AV_Config_avalon_av_config_slave_burst_adapter:sink0_startofpacket
	wire          cmd_mux_src_endofpacket;                                                     // cmd_mux:src_endofpacket -> AV_Config_avalon_av_config_slave_burst_adapter:sink0_endofpacket
	wire          av_config_avalon_av_config_slave_burst_adapter_source0_valid;                // AV_Config_avalon_av_config_slave_burst_adapter:source0_valid -> AV_Config_avalon_av_config_slave_agent:cp_valid
	wire  [119:0] av_config_avalon_av_config_slave_burst_adapter_source0_data;                 // AV_Config_avalon_av_config_slave_burst_adapter:source0_data -> AV_Config_avalon_av_config_slave_agent:cp_data
	wire          av_config_avalon_av_config_slave_burst_adapter_source0_ready;                // AV_Config_avalon_av_config_slave_agent:cp_ready -> AV_Config_avalon_av_config_slave_burst_adapter:source0_ready
	wire   [26:0] av_config_avalon_av_config_slave_burst_adapter_source0_channel;              // AV_Config_avalon_av_config_slave_burst_adapter:source0_channel -> AV_Config_avalon_av_config_slave_agent:cp_channel
	wire          av_config_avalon_av_config_slave_burst_adapter_source0_startofpacket;        // AV_Config_avalon_av_config_slave_burst_adapter:source0_startofpacket -> AV_Config_avalon_av_config_slave_agent:cp_startofpacket
	wire          av_config_avalon_av_config_slave_burst_adapter_source0_endofpacket;          // AV_Config_avalon_av_config_slave_burst_adapter:source0_endofpacket -> AV_Config_avalon_av_config_slave_agent:cp_endofpacket
	wire          cmd_mux_001_src_valid;                                                       // cmd_mux_001:src_valid -> VGA_Subsystem_char_buffer_control_slave_burst_adapter:sink0_valid
	wire  [119:0] cmd_mux_001_src_data;                                                        // cmd_mux_001:src_data -> VGA_Subsystem_char_buffer_control_slave_burst_adapter:sink0_data
	wire          cmd_mux_001_src_ready;                                                       // VGA_Subsystem_char_buffer_control_slave_burst_adapter:sink0_ready -> cmd_mux_001:src_ready
	wire   [26:0] cmd_mux_001_src_channel;                                                     // cmd_mux_001:src_channel -> VGA_Subsystem_char_buffer_control_slave_burst_adapter:sink0_channel
	wire          cmd_mux_001_src_startofpacket;                                               // cmd_mux_001:src_startofpacket -> VGA_Subsystem_char_buffer_control_slave_burst_adapter:sink0_startofpacket
	wire          cmd_mux_001_src_endofpacket;                                                 // cmd_mux_001:src_endofpacket -> VGA_Subsystem_char_buffer_control_slave_burst_adapter:sink0_endofpacket
	wire          vga_subsystem_char_buffer_control_slave_burst_adapter_source0_valid;         // VGA_Subsystem_char_buffer_control_slave_burst_adapter:source0_valid -> VGA_Subsystem_char_buffer_control_slave_agent:cp_valid
	wire  [119:0] vga_subsystem_char_buffer_control_slave_burst_adapter_source0_data;          // VGA_Subsystem_char_buffer_control_slave_burst_adapter:source0_data -> VGA_Subsystem_char_buffer_control_slave_agent:cp_data
	wire          vga_subsystem_char_buffer_control_slave_burst_adapter_source0_ready;         // VGA_Subsystem_char_buffer_control_slave_agent:cp_ready -> VGA_Subsystem_char_buffer_control_slave_burst_adapter:source0_ready
	wire   [26:0] vga_subsystem_char_buffer_control_slave_burst_adapter_source0_channel;       // VGA_Subsystem_char_buffer_control_slave_burst_adapter:source0_channel -> VGA_Subsystem_char_buffer_control_slave_agent:cp_channel
	wire          vga_subsystem_char_buffer_control_slave_burst_adapter_source0_startofpacket; // VGA_Subsystem_char_buffer_control_slave_burst_adapter:source0_startofpacket -> VGA_Subsystem_char_buffer_control_slave_agent:cp_startofpacket
	wire          vga_subsystem_char_buffer_control_slave_burst_adapter_source0_endofpacket;   // VGA_Subsystem_char_buffer_control_slave_burst_adapter:source0_endofpacket -> VGA_Subsystem_char_buffer_control_slave_agent:cp_endofpacket
	wire          cmd_mux_002_src_valid;                                                       // cmd_mux_002:src_valid -> n0_from_hps_s1_burst_adapter:sink0_valid
	wire  [119:0] cmd_mux_002_src_data;                                                        // cmd_mux_002:src_data -> n0_from_hps_s1_burst_adapter:sink0_data
	wire          cmd_mux_002_src_ready;                                                       // n0_from_hps_s1_burst_adapter:sink0_ready -> cmd_mux_002:src_ready
	wire   [26:0] cmd_mux_002_src_channel;                                                     // cmd_mux_002:src_channel -> n0_from_hps_s1_burst_adapter:sink0_channel
	wire          cmd_mux_002_src_startofpacket;                                               // cmd_mux_002:src_startofpacket -> n0_from_hps_s1_burst_adapter:sink0_startofpacket
	wire          cmd_mux_002_src_endofpacket;                                                 // cmd_mux_002:src_endofpacket -> n0_from_hps_s1_burst_adapter:sink0_endofpacket
	wire          n0_from_hps_s1_burst_adapter_source0_valid;                                  // n0_from_hps_s1_burst_adapter:source0_valid -> n0_from_hps_s1_agent:cp_valid
	wire  [119:0] n0_from_hps_s1_burst_adapter_source0_data;                                   // n0_from_hps_s1_burst_adapter:source0_data -> n0_from_hps_s1_agent:cp_data
	wire          n0_from_hps_s1_burst_adapter_source0_ready;                                  // n0_from_hps_s1_agent:cp_ready -> n0_from_hps_s1_burst_adapter:source0_ready
	wire   [26:0] n0_from_hps_s1_burst_adapter_source0_channel;                                // n0_from_hps_s1_burst_adapter:source0_channel -> n0_from_hps_s1_agent:cp_channel
	wire          n0_from_hps_s1_burst_adapter_source0_startofpacket;                          // n0_from_hps_s1_burst_adapter:source0_startofpacket -> n0_from_hps_s1_agent:cp_startofpacket
	wire          n0_from_hps_s1_burst_adapter_source0_endofpacket;                            // n0_from_hps_s1_burst_adapter:source0_endofpacket -> n0_from_hps_s1_agent:cp_endofpacket
	wire          cmd_mux_003_src_valid;                                                       // cmd_mux_003:src_valid -> nn_from_hps_s1_burst_adapter:sink0_valid
	wire  [119:0] cmd_mux_003_src_data;                                                        // cmd_mux_003:src_data -> nn_from_hps_s1_burst_adapter:sink0_data
	wire          cmd_mux_003_src_ready;                                                       // nn_from_hps_s1_burst_adapter:sink0_ready -> cmd_mux_003:src_ready
	wire   [26:0] cmd_mux_003_src_channel;                                                     // cmd_mux_003:src_channel -> nn_from_hps_s1_burst_adapter:sink0_channel
	wire          cmd_mux_003_src_startofpacket;                                               // cmd_mux_003:src_startofpacket -> nn_from_hps_s1_burst_adapter:sink0_startofpacket
	wire          cmd_mux_003_src_endofpacket;                                                 // cmd_mux_003:src_endofpacket -> nn_from_hps_s1_burst_adapter:sink0_endofpacket
	wire          nn_from_hps_s1_burst_adapter_source0_valid;                                  // nn_from_hps_s1_burst_adapter:source0_valid -> nn_from_hps_s1_agent:cp_valid
	wire  [119:0] nn_from_hps_s1_burst_adapter_source0_data;                                   // nn_from_hps_s1_burst_adapter:source0_data -> nn_from_hps_s1_agent:cp_data
	wire          nn_from_hps_s1_burst_adapter_source0_ready;                                  // nn_from_hps_s1_agent:cp_ready -> nn_from_hps_s1_burst_adapter:source0_ready
	wire   [26:0] nn_from_hps_s1_burst_adapter_source0_channel;                                // nn_from_hps_s1_burst_adapter:source0_channel -> nn_from_hps_s1_agent:cp_channel
	wire          nn_from_hps_s1_burst_adapter_source0_startofpacket;                          // nn_from_hps_s1_burst_adapter:source0_startofpacket -> nn_from_hps_s1_agent:cp_startofpacket
	wire          nn_from_hps_s1_burst_adapter_source0_endofpacket;                            // nn_from_hps_s1_burst_adapter:source0_endofpacket -> nn_from_hps_s1_agent:cp_endofpacket
	wire          cmd_mux_004_src_valid;                                                       // cmd_mux_004:src_valid -> ns_from_hps_s1_burst_adapter:sink0_valid
	wire  [119:0] cmd_mux_004_src_data;                                                        // cmd_mux_004:src_data -> ns_from_hps_s1_burst_adapter:sink0_data
	wire          cmd_mux_004_src_ready;                                                       // ns_from_hps_s1_burst_adapter:sink0_ready -> cmd_mux_004:src_ready
	wire   [26:0] cmd_mux_004_src_channel;                                                     // cmd_mux_004:src_channel -> ns_from_hps_s1_burst_adapter:sink0_channel
	wire          cmd_mux_004_src_startofpacket;                                               // cmd_mux_004:src_startofpacket -> ns_from_hps_s1_burst_adapter:sink0_startofpacket
	wire          cmd_mux_004_src_endofpacket;                                                 // cmd_mux_004:src_endofpacket -> ns_from_hps_s1_burst_adapter:sink0_endofpacket
	wire          ns_from_hps_s1_burst_adapter_source0_valid;                                  // ns_from_hps_s1_burst_adapter:source0_valid -> ns_from_hps_s1_agent:cp_valid
	wire  [119:0] ns_from_hps_s1_burst_adapter_source0_data;                                   // ns_from_hps_s1_burst_adapter:source0_data -> ns_from_hps_s1_agent:cp_data
	wire          ns_from_hps_s1_burst_adapter_source0_ready;                                  // ns_from_hps_s1_agent:cp_ready -> ns_from_hps_s1_burst_adapter:source0_ready
	wire   [26:0] ns_from_hps_s1_burst_adapter_source0_channel;                                // ns_from_hps_s1_burst_adapter:source0_channel -> ns_from_hps_s1_agent:cp_channel
	wire          ns_from_hps_s1_burst_adapter_source0_startofpacket;                          // ns_from_hps_s1_burst_adapter:source0_startofpacket -> ns_from_hps_s1_agent:cp_startofpacket
	wire          ns_from_hps_s1_burst_adapter_source0_endofpacket;                            // ns_from_hps_s1_burst_adapter:source0_endofpacket -> ns_from_hps_s1_agent:cp_endofpacket
	wire          cmd_mux_005_src_valid;                                                       // cmd_mux_005:src_valid -> nw_from_hps_s1_burst_adapter:sink0_valid
	wire  [119:0] cmd_mux_005_src_data;                                                        // cmd_mux_005:src_data -> nw_from_hps_s1_burst_adapter:sink0_data
	wire          cmd_mux_005_src_ready;                                                       // nw_from_hps_s1_burst_adapter:sink0_ready -> cmd_mux_005:src_ready
	wire   [26:0] cmd_mux_005_src_channel;                                                     // cmd_mux_005:src_channel -> nw_from_hps_s1_burst_adapter:sink0_channel
	wire          cmd_mux_005_src_startofpacket;                                               // cmd_mux_005:src_startofpacket -> nw_from_hps_s1_burst_adapter:sink0_startofpacket
	wire          cmd_mux_005_src_endofpacket;                                                 // cmd_mux_005:src_endofpacket -> nw_from_hps_s1_burst_adapter:sink0_endofpacket
	wire          nw_from_hps_s1_burst_adapter_source0_valid;                                  // nw_from_hps_s1_burst_adapter:source0_valid -> nw_from_hps_s1_agent:cp_valid
	wire  [119:0] nw_from_hps_s1_burst_adapter_source0_data;                                   // nw_from_hps_s1_burst_adapter:source0_data -> nw_from_hps_s1_agent:cp_data
	wire          nw_from_hps_s1_burst_adapter_source0_ready;                                  // nw_from_hps_s1_agent:cp_ready -> nw_from_hps_s1_burst_adapter:source0_ready
	wire   [26:0] nw_from_hps_s1_burst_adapter_source0_channel;                                // nw_from_hps_s1_burst_adapter:source0_channel -> nw_from_hps_s1_agent:cp_channel
	wire          nw_from_hps_s1_burst_adapter_source0_startofpacket;                          // nw_from_hps_s1_burst_adapter:source0_startofpacket -> nw_from_hps_s1_agent:cp_startofpacket
	wire          nw_from_hps_s1_burst_adapter_source0_endofpacket;                            // nw_from_hps_s1_burst_adapter:source0_endofpacket -> nw_from_hps_s1_agent:cp_endofpacket
	wire          cmd_mux_006_src_valid;                                                       // cmd_mux_006:src_valid -> ne_from_hps_s1_burst_adapter:sink0_valid
	wire  [119:0] cmd_mux_006_src_data;                                                        // cmd_mux_006:src_data -> ne_from_hps_s1_burst_adapter:sink0_data
	wire          cmd_mux_006_src_ready;                                                       // ne_from_hps_s1_burst_adapter:sink0_ready -> cmd_mux_006:src_ready
	wire   [26:0] cmd_mux_006_src_channel;                                                     // cmd_mux_006:src_channel -> ne_from_hps_s1_burst_adapter:sink0_channel
	wire          cmd_mux_006_src_startofpacket;                                               // cmd_mux_006:src_startofpacket -> ne_from_hps_s1_burst_adapter:sink0_startofpacket
	wire          cmd_mux_006_src_endofpacket;                                                 // cmd_mux_006:src_endofpacket -> ne_from_hps_s1_burst_adapter:sink0_endofpacket
	wire          ne_from_hps_s1_burst_adapter_source0_valid;                                  // ne_from_hps_s1_burst_adapter:source0_valid -> ne_from_hps_s1_agent:cp_valid
	wire  [119:0] ne_from_hps_s1_burst_adapter_source0_data;                                   // ne_from_hps_s1_burst_adapter:source0_data -> ne_from_hps_s1_agent:cp_data
	wire          ne_from_hps_s1_burst_adapter_source0_ready;                                  // ne_from_hps_s1_agent:cp_ready -> ne_from_hps_s1_burst_adapter:source0_ready
	wire   [26:0] ne_from_hps_s1_burst_adapter_source0_channel;                                // ne_from_hps_s1_burst_adapter:source0_channel -> ne_from_hps_s1_agent:cp_channel
	wire          ne_from_hps_s1_burst_adapter_source0_startofpacket;                          // ne_from_hps_s1_burst_adapter:source0_startofpacket -> ne_from_hps_s1_agent:cp_startofpacket
	wire          ne_from_hps_s1_burst_adapter_source0_endofpacket;                            // ne_from_hps_s1_burst_adapter:source0_endofpacket -> ne_from_hps_s1_agent:cp_endofpacket
	wire          cmd_mux_007_src_valid;                                                       // cmd_mux_007:src_valid -> nnw_from_hps_s1_burst_adapter:sink0_valid
	wire  [119:0] cmd_mux_007_src_data;                                                        // cmd_mux_007:src_data -> nnw_from_hps_s1_burst_adapter:sink0_data
	wire          cmd_mux_007_src_ready;                                                       // nnw_from_hps_s1_burst_adapter:sink0_ready -> cmd_mux_007:src_ready
	wire   [26:0] cmd_mux_007_src_channel;                                                     // cmd_mux_007:src_channel -> nnw_from_hps_s1_burst_adapter:sink0_channel
	wire          cmd_mux_007_src_startofpacket;                                               // cmd_mux_007:src_startofpacket -> nnw_from_hps_s1_burst_adapter:sink0_startofpacket
	wire          cmd_mux_007_src_endofpacket;                                                 // cmd_mux_007:src_endofpacket -> nnw_from_hps_s1_burst_adapter:sink0_endofpacket
	wire          nnw_from_hps_s1_burst_adapter_source0_valid;                                 // nnw_from_hps_s1_burst_adapter:source0_valid -> nnw_from_hps_s1_agent:cp_valid
	wire  [119:0] nnw_from_hps_s1_burst_adapter_source0_data;                                  // nnw_from_hps_s1_burst_adapter:source0_data -> nnw_from_hps_s1_agent:cp_data
	wire          nnw_from_hps_s1_burst_adapter_source0_ready;                                 // nnw_from_hps_s1_agent:cp_ready -> nnw_from_hps_s1_burst_adapter:source0_ready
	wire   [26:0] nnw_from_hps_s1_burst_adapter_source0_channel;                               // nnw_from_hps_s1_burst_adapter:source0_channel -> nnw_from_hps_s1_agent:cp_channel
	wire          nnw_from_hps_s1_burst_adapter_source0_startofpacket;                         // nnw_from_hps_s1_burst_adapter:source0_startofpacket -> nnw_from_hps_s1_agent:cp_startofpacket
	wire          nnw_from_hps_s1_burst_adapter_source0_endofpacket;                           // nnw_from_hps_s1_burst_adapter:source0_endofpacket -> nnw_from_hps_s1_agent:cp_endofpacket
	wire          cmd_mux_008_src_valid;                                                       // cmd_mux_008:src_valid -> nne_from_hps_s1_burst_adapter:sink0_valid
	wire  [119:0] cmd_mux_008_src_data;                                                        // cmd_mux_008:src_data -> nne_from_hps_s1_burst_adapter:sink0_data
	wire          cmd_mux_008_src_ready;                                                       // nne_from_hps_s1_burst_adapter:sink0_ready -> cmd_mux_008:src_ready
	wire   [26:0] cmd_mux_008_src_channel;                                                     // cmd_mux_008:src_channel -> nne_from_hps_s1_burst_adapter:sink0_channel
	wire          cmd_mux_008_src_startofpacket;                                               // cmd_mux_008:src_startofpacket -> nne_from_hps_s1_burst_adapter:sink0_startofpacket
	wire          cmd_mux_008_src_endofpacket;                                                 // cmd_mux_008:src_endofpacket -> nne_from_hps_s1_burst_adapter:sink0_endofpacket
	wire          nne_from_hps_s1_burst_adapter_source0_valid;                                 // nne_from_hps_s1_burst_adapter:source0_valid -> nne_from_hps_s1_agent:cp_valid
	wire  [119:0] nne_from_hps_s1_burst_adapter_source0_data;                                  // nne_from_hps_s1_burst_adapter:source0_data -> nne_from_hps_s1_agent:cp_data
	wire          nne_from_hps_s1_burst_adapter_source0_ready;                                 // nne_from_hps_s1_agent:cp_ready -> nne_from_hps_s1_burst_adapter:source0_ready
	wire   [26:0] nne_from_hps_s1_burst_adapter_source0_channel;                               // nne_from_hps_s1_burst_adapter:source0_channel -> nne_from_hps_s1_agent:cp_channel
	wire          nne_from_hps_s1_burst_adapter_source0_startofpacket;                         // nne_from_hps_s1_burst_adapter:source0_startofpacket -> nne_from_hps_s1_agent:cp_startofpacket
	wire          nne_from_hps_s1_burst_adapter_source0_endofpacket;                           // nne_from_hps_s1_burst_adapter:source0_endofpacket -> nne_from_hps_s1_agent:cp_endofpacket
	wire          cmd_mux_009_src_valid;                                                       // cmd_mux_009:src_valid -> nsw_from_hps_s1_burst_adapter:sink0_valid
	wire  [119:0] cmd_mux_009_src_data;                                                        // cmd_mux_009:src_data -> nsw_from_hps_s1_burst_adapter:sink0_data
	wire          cmd_mux_009_src_ready;                                                       // nsw_from_hps_s1_burst_adapter:sink0_ready -> cmd_mux_009:src_ready
	wire   [26:0] cmd_mux_009_src_channel;                                                     // cmd_mux_009:src_channel -> nsw_from_hps_s1_burst_adapter:sink0_channel
	wire          cmd_mux_009_src_startofpacket;                                               // cmd_mux_009:src_startofpacket -> nsw_from_hps_s1_burst_adapter:sink0_startofpacket
	wire          cmd_mux_009_src_endofpacket;                                                 // cmd_mux_009:src_endofpacket -> nsw_from_hps_s1_burst_adapter:sink0_endofpacket
	wire          nsw_from_hps_s1_burst_adapter_source0_valid;                                 // nsw_from_hps_s1_burst_adapter:source0_valid -> nsw_from_hps_s1_agent:cp_valid
	wire  [119:0] nsw_from_hps_s1_burst_adapter_source0_data;                                  // nsw_from_hps_s1_burst_adapter:source0_data -> nsw_from_hps_s1_agent:cp_data
	wire          nsw_from_hps_s1_burst_adapter_source0_ready;                                 // nsw_from_hps_s1_agent:cp_ready -> nsw_from_hps_s1_burst_adapter:source0_ready
	wire   [26:0] nsw_from_hps_s1_burst_adapter_source0_channel;                               // nsw_from_hps_s1_burst_adapter:source0_channel -> nsw_from_hps_s1_agent:cp_channel
	wire          nsw_from_hps_s1_burst_adapter_source0_startofpacket;                         // nsw_from_hps_s1_burst_adapter:source0_startofpacket -> nsw_from_hps_s1_agent:cp_startofpacket
	wire          nsw_from_hps_s1_burst_adapter_source0_endofpacket;                           // nsw_from_hps_s1_burst_adapter:source0_endofpacket -> nsw_from_hps_s1_agent:cp_endofpacket
	wire          cmd_mux_010_src_valid;                                                       // cmd_mux_010:src_valid -> nse_from_hps_s1_burst_adapter:sink0_valid
	wire  [119:0] cmd_mux_010_src_data;                                                        // cmd_mux_010:src_data -> nse_from_hps_s1_burst_adapter:sink0_data
	wire          cmd_mux_010_src_ready;                                                       // nse_from_hps_s1_burst_adapter:sink0_ready -> cmd_mux_010:src_ready
	wire   [26:0] cmd_mux_010_src_channel;                                                     // cmd_mux_010:src_channel -> nse_from_hps_s1_burst_adapter:sink0_channel
	wire          cmd_mux_010_src_startofpacket;                                               // cmd_mux_010:src_startofpacket -> nse_from_hps_s1_burst_adapter:sink0_startofpacket
	wire          cmd_mux_010_src_endofpacket;                                                 // cmd_mux_010:src_endofpacket -> nse_from_hps_s1_burst_adapter:sink0_endofpacket
	wire          nse_from_hps_s1_burst_adapter_source0_valid;                                 // nse_from_hps_s1_burst_adapter:source0_valid -> nse_from_hps_s1_agent:cp_valid
	wire  [119:0] nse_from_hps_s1_burst_adapter_source0_data;                                  // nse_from_hps_s1_burst_adapter:source0_data -> nse_from_hps_s1_agent:cp_data
	wire          nse_from_hps_s1_burst_adapter_source0_ready;                                 // nse_from_hps_s1_agent:cp_ready -> nse_from_hps_s1_burst_adapter:source0_ready
	wire   [26:0] nse_from_hps_s1_burst_adapter_source0_channel;                               // nse_from_hps_s1_burst_adapter:source0_channel -> nse_from_hps_s1_agent:cp_channel
	wire          nse_from_hps_s1_burst_adapter_source0_startofpacket;                         // nse_from_hps_s1_burst_adapter:source0_startofpacket -> nse_from_hps_s1_agent:cp_startofpacket
	wire          nse_from_hps_s1_burst_adapter_source0_endofpacket;                           // nse_from_hps_s1_burst_adapter:source0_endofpacket -> nse_from_hps_s1_agent:cp_endofpacket
	wire          cmd_mux_011_src_valid;                                                       // cmd_mux_011:src_valid -> n0_from_fpga_s1_burst_adapter:sink0_valid
	wire  [119:0] cmd_mux_011_src_data;                                                        // cmd_mux_011:src_data -> n0_from_fpga_s1_burst_adapter:sink0_data
	wire          cmd_mux_011_src_ready;                                                       // n0_from_fpga_s1_burst_adapter:sink0_ready -> cmd_mux_011:src_ready
	wire   [26:0] cmd_mux_011_src_channel;                                                     // cmd_mux_011:src_channel -> n0_from_fpga_s1_burst_adapter:sink0_channel
	wire          cmd_mux_011_src_startofpacket;                                               // cmd_mux_011:src_startofpacket -> n0_from_fpga_s1_burst_adapter:sink0_startofpacket
	wire          cmd_mux_011_src_endofpacket;                                                 // cmd_mux_011:src_endofpacket -> n0_from_fpga_s1_burst_adapter:sink0_endofpacket
	wire          n0_from_fpga_s1_burst_adapter_source0_valid;                                 // n0_from_fpga_s1_burst_adapter:source0_valid -> n0_from_fpga_s1_agent:cp_valid
	wire  [119:0] n0_from_fpga_s1_burst_adapter_source0_data;                                  // n0_from_fpga_s1_burst_adapter:source0_data -> n0_from_fpga_s1_agent:cp_data
	wire          n0_from_fpga_s1_burst_adapter_source0_ready;                                 // n0_from_fpga_s1_agent:cp_ready -> n0_from_fpga_s1_burst_adapter:source0_ready
	wire   [26:0] n0_from_fpga_s1_burst_adapter_source0_channel;                               // n0_from_fpga_s1_burst_adapter:source0_channel -> n0_from_fpga_s1_agent:cp_channel
	wire          n0_from_fpga_s1_burst_adapter_source0_startofpacket;                         // n0_from_fpga_s1_burst_adapter:source0_startofpacket -> n0_from_fpga_s1_agent:cp_startofpacket
	wire          n0_from_fpga_s1_burst_adapter_source0_endofpacket;                           // n0_from_fpga_s1_burst_adapter:source0_endofpacket -> n0_from_fpga_s1_agent:cp_endofpacket
	wire          cmd_mux_012_src_valid;                                                       // cmd_mux_012:src_valid -> nn_from_fpga_s1_burst_adapter:sink0_valid
	wire  [119:0] cmd_mux_012_src_data;                                                        // cmd_mux_012:src_data -> nn_from_fpga_s1_burst_adapter:sink0_data
	wire          cmd_mux_012_src_ready;                                                       // nn_from_fpga_s1_burst_adapter:sink0_ready -> cmd_mux_012:src_ready
	wire   [26:0] cmd_mux_012_src_channel;                                                     // cmd_mux_012:src_channel -> nn_from_fpga_s1_burst_adapter:sink0_channel
	wire          cmd_mux_012_src_startofpacket;                                               // cmd_mux_012:src_startofpacket -> nn_from_fpga_s1_burst_adapter:sink0_startofpacket
	wire          cmd_mux_012_src_endofpacket;                                                 // cmd_mux_012:src_endofpacket -> nn_from_fpga_s1_burst_adapter:sink0_endofpacket
	wire          nn_from_fpga_s1_burst_adapter_source0_valid;                                 // nn_from_fpga_s1_burst_adapter:source0_valid -> nn_from_fpga_s1_agent:cp_valid
	wire  [119:0] nn_from_fpga_s1_burst_adapter_source0_data;                                  // nn_from_fpga_s1_burst_adapter:source0_data -> nn_from_fpga_s1_agent:cp_data
	wire          nn_from_fpga_s1_burst_adapter_source0_ready;                                 // nn_from_fpga_s1_agent:cp_ready -> nn_from_fpga_s1_burst_adapter:source0_ready
	wire   [26:0] nn_from_fpga_s1_burst_adapter_source0_channel;                               // nn_from_fpga_s1_burst_adapter:source0_channel -> nn_from_fpga_s1_agent:cp_channel
	wire          nn_from_fpga_s1_burst_adapter_source0_startofpacket;                         // nn_from_fpga_s1_burst_adapter:source0_startofpacket -> nn_from_fpga_s1_agent:cp_startofpacket
	wire          nn_from_fpga_s1_burst_adapter_source0_endofpacket;                           // nn_from_fpga_s1_burst_adapter:source0_endofpacket -> nn_from_fpga_s1_agent:cp_endofpacket
	wire          cmd_mux_013_src_valid;                                                       // cmd_mux_013:src_valid -> ns_from_fpga_s1_burst_adapter:sink0_valid
	wire  [119:0] cmd_mux_013_src_data;                                                        // cmd_mux_013:src_data -> ns_from_fpga_s1_burst_adapter:sink0_data
	wire          cmd_mux_013_src_ready;                                                       // ns_from_fpga_s1_burst_adapter:sink0_ready -> cmd_mux_013:src_ready
	wire   [26:0] cmd_mux_013_src_channel;                                                     // cmd_mux_013:src_channel -> ns_from_fpga_s1_burst_adapter:sink0_channel
	wire          cmd_mux_013_src_startofpacket;                                               // cmd_mux_013:src_startofpacket -> ns_from_fpga_s1_burst_adapter:sink0_startofpacket
	wire          cmd_mux_013_src_endofpacket;                                                 // cmd_mux_013:src_endofpacket -> ns_from_fpga_s1_burst_adapter:sink0_endofpacket
	wire          ns_from_fpga_s1_burst_adapter_source0_valid;                                 // ns_from_fpga_s1_burst_adapter:source0_valid -> ns_from_fpga_s1_agent:cp_valid
	wire  [119:0] ns_from_fpga_s1_burst_adapter_source0_data;                                  // ns_from_fpga_s1_burst_adapter:source0_data -> ns_from_fpga_s1_agent:cp_data
	wire          ns_from_fpga_s1_burst_adapter_source0_ready;                                 // ns_from_fpga_s1_agent:cp_ready -> ns_from_fpga_s1_burst_adapter:source0_ready
	wire   [26:0] ns_from_fpga_s1_burst_adapter_source0_channel;                               // ns_from_fpga_s1_burst_adapter:source0_channel -> ns_from_fpga_s1_agent:cp_channel
	wire          ns_from_fpga_s1_burst_adapter_source0_startofpacket;                         // ns_from_fpga_s1_burst_adapter:source0_startofpacket -> ns_from_fpga_s1_agent:cp_startofpacket
	wire          ns_from_fpga_s1_burst_adapter_source0_endofpacket;                           // ns_from_fpga_s1_burst_adapter:source0_endofpacket -> ns_from_fpga_s1_agent:cp_endofpacket
	wire          cmd_mux_014_src_valid;                                                       // cmd_mux_014:src_valid -> nw_from_fpga_s1_burst_adapter:sink0_valid
	wire  [119:0] cmd_mux_014_src_data;                                                        // cmd_mux_014:src_data -> nw_from_fpga_s1_burst_adapter:sink0_data
	wire          cmd_mux_014_src_ready;                                                       // nw_from_fpga_s1_burst_adapter:sink0_ready -> cmd_mux_014:src_ready
	wire   [26:0] cmd_mux_014_src_channel;                                                     // cmd_mux_014:src_channel -> nw_from_fpga_s1_burst_adapter:sink0_channel
	wire          cmd_mux_014_src_startofpacket;                                               // cmd_mux_014:src_startofpacket -> nw_from_fpga_s1_burst_adapter:sink0_startofpacket
	wire          cmd_mux_014_src_endofpacket;                                                 // cmd_mux_014:src_endofpacket -> nw_from_fpga_s1_burst_adapter:sink0_endofpacket
	wire          nw_from_fpga_s1_burst_adapter_source0_valid;                                 // nw_from_fpga_s1_burst_adapter:source0_valid -> nw_from_fpga_s1_agent:cp_valid
	wire  [119:0] nw_from_fpga_s1_burst_adapter_source0_data;                                  // nw_from_fpga_s1_burst_adapter:source0_data -> nw_from_fpga_s1_agent:cp_data
	wire          nw_from_fpga_s1_burst_adapter_source0_ready;                                 // nw_from_fpga_s1_agent:cp_ready -> nw_from_fpga_s1_burst_adapter:source0_ready
	wire   [26:0] nw_from_fpga_s1_burst_adapter_source0_channel;                               // nw_from_fpga_s1_burst_adapter:source0_channel -> nw_from_fpga_s1_agent:cp_channel
	wire          nw_from_fpga_s1_burst_adapter_source0_startofpacket;                         // nw_from_fpga_s1_burst_adapter:source0_startofpacket -> nw_from_fpga_s1_agent:cp_startofpacket
	wire          nw_from_fpga_s1_burst_adapter_source0_endofpacket;                           // nw_from_fpga_s1_burst_adapter:source0_endofpacket -> nw_from_fpga_s1_agent:cp_endofpacket
	wire          cmd_mux_015_src_valid;                                                       // cmd_mux_015:src_valid -> ne_from_fpga_s1_burst_adapter:sink0_valid
	wire  [119:0] cmd_mux_015_src_data;                                                        // cmd_mux_015:src_data -> ne_from_fpga_s1_burst_adapter:sink0_data
	wire          cmd_mux_015_src_ready;                                                       // ne_from_fpga_s1_burst_adapter:sink0_ready -> cmd_mux_015:src_ready
	wire   [26:0] cmd_mux_015_src_channel;                                                     // cmd_mux_015:src_channel -> ne_from_fpga_s1_burst_adapter:sink0_channel
	wire          cmd_mux_015_src_startofpacket;                                               // cmd_mux_015:src_startofpacket -> ne_from_fpga_s1_burst_adapter:sink0_startofpacket
	wire          cmd_mux_015_src_endofpacket;                                                 // cmd_mux_015:src_endofpacket -> ne_from_fpga_s1_burst_adapter:sink0_endofpacket
	wire          ne_from_fpga_s1_burst_adapter_source0_valid;                                 // ne_from_fpga_s1_burst_adapter:source0_valid -> ne_from_fpga_s1_agent:cp_valid
	wire  [119:0] ne_from_fpga_s1_burst_adapter_source0_data;                                  // ne_from_fpga_s1_burst_adapter:source0_data -> ne_from_fpga_s1_agent:cp_data
	wire          ne_from_fpga_s1_burst_adapter_source0_ready;                                 // ne_from_fpga_s1_agent:cp_ready -> ne_from_fpga_s1_burst_adapter:source0_ready
	wire   [26:0] ne_from_fpga_s1_burst_adapter_source0_channel;                               // ne_from_fpga_s1_burst_adapter:source0_channel -> ne_from_fpga_s1_agent:cp_channel
	wire          ne_from_fpga_s1_burst_adapter_source0_startofpacket;                         // ne_from_fpga_s1_burst_adapter:source0_startofpacket -> ne_from_fpga_s1_agent:cp_startofpacket
	wire          ne_from_fpga_s1_burst_adapter_source0_endofpacket;                           // ne_from_fpga_s1_burst_adapter:source0_endofpacket -> ne_from_fpga_s1_agent:cp_endofpacket
	wire          cmd_mux_016_src_valid;                                                       // cmd_mux_016:src_valid -> nnw_from_fpga_s1_burst_adapter:sink0_valid
	wire  [119:0] cmd_mux_016_src_data;                                                        // cmd_mux_016:src_data -> nnw_from_fpga_s1_burst_adapter:sink0_data
	wire          cmd_mux_016_src_ready;                                                       // nnw_from_fpga_s1_burst_adapter:sink0_ready -> cmd_mux_016:src_ready
	wire   [26:0] cmd_mux_016_src_channel;                                                     // cmd_mux_016:src_channel -> nnw_from_fpga_s1_burst_adapter:sink0_channel
	wire          cmd_mux_016_src_startofpacket;                                               // cmd_mux_016:src_startofpacket -> nnw_from_fpga_s1_burst_adapter:sink0_startofpacket
	wire          cmd_mux_016_src_endofpacket;                                                 // cmd_mux_016:src_endofpacket -> nnw_from_fpga_s1_burst_adapter:sink0_endofpacket
	wire          nnw_from_fpga_s1_burst_adapter_source0_valid;                                // nnw_from_fpga_s1_burst_adapter:source0_valid -> nnw_from_fpga_s1_agent:cp_valid
	wire  [119:0] nnw_from_fpga_s1_burst_adapter_source0_data;                                 // nnw_from_fpga_s1_burst_adapter:source0_data -> nnw_from_fpga_s1_agent:cp_data
	wire          nnw_from_fpga_s1_burst_adapter_source0_ready;                                // nnw_from_fpga_s1_agent:cp_ready -> nnw_from_fpga_s1_burst_adapter:source0_ready
	wire   [26:0] nnw_from_fpga_s1_burst_adapter_source0_channel;                              // nnw_from_fpga_s1_burst_adapter:source0_channel -> nnw_from_fpga_s1_agent:cp_channel
	wire          nnw_from_fpga_s1_burst_adapter_source0_startofpacket;                        // nnw_from_fpga_s1_burst_adapter:source0_startofpacket -> nnw_from_fpga_s1_agent:cp_startofpacket
	wire          nnw_from_fpga_s1_burst_adapter_source0_endofpacket;                          // nnw_from_fpga_s1_burst_adapter:source0_endofpacket -> nnw_from_fpga_s1_agent:cp_endofpacket
	wire          cmd_mux_017_src_valid;                                                       // cmd_mux_017:src_valid -> nne_from_fpga_s1_burst_adapter:sink0_valid
	wire  [119:0] cmd_mux_017_src_data;                                                        // cmd_mux_017:src_data -> nne_from_fpga_s1_burst_adapter:sink0_data
	wire          cmd_mux_017_src_ready;                                                       // nne_from_fpga_s1_burst_adapter:sink0_ready -> cmd_mux_017:src_ready
	wire   [26:0] cmd_mux_017_src_channel;                                                     // cmd_mux_017:src_channel -> nne_from_fpga_s1_burst_adapter:sink0_channel
	wire          cmd_mux_017_src_startofpacket;                                               // cmd_mux_017:src_startofpacket -> nne_from_fpga_s1_burst_adapter:sink0_startofpacket
	wire          cmd_mux_017_src_endofpacket;                                                 // cmd_mux_017:src_endofpacket -> nne_from_fpga_s1_burst_adapter:sink0_endofpacket
	wire          nne_from_fpga_s1_burst_adapter_source0_valid;                                // nne_from_fpga_s1_burst_adapter:source0_valid -> nne_from_fpga_s1_agent:cp_valid
	wire  [119:0] nne_from_fpga_s1_burst_adapter_source0_data;                                 // nne_from_fpga_s1_burst_adapter:source0_data -> nne_from_fpga_s1_agent:cp_data
	wire          nne_from_fpga_s1_burst_adapter_source0_ready;                                // nne_from_fpga_s1_agent:cp_ready -> nne_from_fpga_s1_burst_adapter:source0_ready
	wire   [26:0] nne_from_fpga_s1_burst_adapter_source0_channel;                              // nne_from_fpga_s1_burst_adapter:source0_channel -> nne_from_fpga_s1_agent:cp_channel
	wire          nne_from_fpga_s1_burst_adapter_source0_startofpacket;                        // nne_from_fpga_s1_burst_adapter:source0_startofpacket -> nne_from_fpga_s1_agent:cp_startofpacket
	wire          nne_from_fpga_s1_burst_adapter_source0_endofpacket;                          // nne_from_fpga_s1_burst_adapter:source0_endofpacket -> nne_from_fpga_s1_agent:cp_endofpacket
	wire          cmd_mux_018_src_valid;                                                       // cmd_mux_018:src_valid -> nsw_from_fpga_s1_burst_adapter:sink0_valid
	wire  [119:0] cmd_mux_018_src_data;                                                        // cmd_mux_018:src_data -> nsw_from_fpga_s1_burst_adapter:sink0_data
	wire          cmd_mux_018_src_ready;                                                       // nsw_from_fpga_s1_burst_adapter:sink0_ready -> cmd_mux_018:src_ready
	wire   [26:0] cmd_mux_018_src_channel;                                                     // cmd_mux_018:src_channel -> nsw_from_fpga_s1_burst_adapter:sink0_channel
	wire          cmd_mux_018_src_startofpacket;                                               // cmd_mux_018:src_startofpacket -> nsw_from_fpga_s1_burst_adapter:sink0_startofpacket
	wire          cmd_mux_018_src_endofpacket;                                                 // cmd_mux_018:src_endofpacket -> nsw_from_fpga_s1_burst_adapter:sink0_endofpacket
	wire          nsw_from_fpga_s1_burst_adapter_source0_valid;                                // nsw_from_fpga_s1_burst_adapter:source0_valid -> nsw_from_fpga_s1_agent:cp_valid
	wire  [119:0] nsw_from_fpga_s1_burst_adapter_source0_data;                                 // nsw_from_fpga_s1_burst_adapter:source0_data -> nsw_from_fpga_s1_agent:cp_data
	wire          nsw_from_fpga_s1_burst_adapter_source0_ready;                                // nsw_from_fpga_s1_agent:cp_ready -> nsw_from_fpga_s1_burst_adapter:source0_ready
	wire   [26:0] nsw_from_fpga_s1_burst_adapter_source0_channel;                              // nsw_from_fpga_s1_burst_adapter:source0_channel -> nsw_from_fpga_s1_agent:cp_channel
	wire          nsw_from_fpga_s1_burst_adapter_source0_startofpacket;                        // nsw_from_fpga_s1_burst_adapter:source0_startofpacket -> nsw_from_fpga_s1_agent:cp_startofpacket
	wire          nsw_from_fpga_s1_burst_adapter_source0_endofpacket;                          // nsw_from_fpga_s1_burst_adapter:source0_endofpacket -> nsw_from_fpga_s1_agent:cp_endofpacket
	wire          cmd_mux_019_src_valid;                                                       // cmd_mux_019:src_valid -> nse_from_fpga_s1_burst_adapter:sink0_valid
	wire  [119:0] cmd_mux_019_src_data;                                                        // cmd_mux_019:src_data -> nse_from_fpga_s1_burst_adapter:sink0_data
	wire          cmd_mux_019_src_ready;                                                       // nse_from_fpga_s1_burst_adapter:sink0_ready -> cmd_mux_019:src_ready
	wire   [26:0] cmd_mux_019_src_channel;                                                     // cmd_mux_019:src_channel -> nse_from_fpga_s1_burst_adapter:sink0_channel
	wire          cmd_mux_019_src_startofpacket;                                               // cmd_mux_019:src_startofpacket -> nse_from_fpga_s1_burst_adapter:sink0_startofpacket
	wire          cmd_mux_019_src_endofpacket;                                                 // cmd_mux_019:src_endofpacket -> nse_from_fpga_s1_burst_adapter:sink0_endofpacket
	wire          nse_from_fpga_s1_burst_adapter_source0_valid;                                // nse_from_fpga_s1_burst_adapter:source0_valid -> nse_from_fpga_s1_agent:cp_valid
	wire  [119:0] nse_from_fpga_s1_burst_adapter_source0_data;                                 // nse_from_fpga_s1_burst_adapter:source0_data -> nse_from_fpga_s1_agent:cp_data
	wire          nse_from_fpga_s1_burst_adapter_source0_ready;                                // nse_from_fpga_s1_agent:cp_ready -> nse_from_fpga_s1_burst_adapter:source0_ready
	wire   [26:0] nse_from_fpga_s1_burst_adapter_source0_channel;                              // nse_from_fpga_s1_burst_adapter:source0_channel -> nse_from_fpga_s1_agent:cp_channel
	wire          nse_from_fpga_s1_burst_adapter_source0_startofpacket;                        // nse_from_fpga_s1_burst_adapter:source0_startofpacket -> nse_from_fpga_s1_agent:cp_startofpacket
	wire          nse_from_fpga_s1_burst_adapter_source0_endofpacket;                          // nse_from_fpga_s1_burst_adapter:source0_endofpacket -> nse_from_fpga_s1_agent:cp_endofpacket
	wire          cmd_mux_020_src_valid;                                                       // cmd_mux_020:src_valid -> one9th_s1_burst_adapter:sink0_valid
	wire  [119:0] cmd_mux_020_src_data;                                                        // cmd_mux_020:src_data -> one9th_s1_burst_adapter:sink0_data
	wire          cmd_mux_020_src_ready;                                                       // one9th_s1_burst_adapter:sink0_ready -> cmd_mux_020:src_ready
	wire   [26:0] cmd_mux_020_src_channel;                                                     // cmd_mux_020:src_channel -> one9th_s1_burst_adapter:sink0_channel
	wire          cmd_mux_020_src_startofpacket;                                               // cmd_mux_020:src_startofpacket -> one9th_s1_burst_adapter:sink0_startofpacket
	wire          cmd_mux_020_src_endofpacket;                                                 // cmd_mux_020:src_endofpacket -> one9th_s1_burst_adapter:sink0_endofpacket
	wire          one9th_s1_burst_adapter_source0_valid;                                       // one9th_s1_burst_adapter:source0_valid -> one9th_s1_agent:cp_valid
	wire  [119:0] one9th_s1_burst_adapter_source0_data;                                        // one9th_s1_burst_adapter:source0_data -> one9th_s1_agent:cp_data
	wire          one9th_s1_burst_adapter_source0_ready;                                       // one9th_s1_agent:cp_ready -> one9th_s1_burst_adapter:source0_ready
	wire   [26:0] one9th_s1_burst_adapter_source0_channel;                                     // one9th_s1_burst_adapter:source0_channel -> one9th_s1_agent:cp_channel
	wire          one9th_s1_burst_adapter_source0_startofpacket;                               // one9th_s1_burst_adapter:source0_startofpacket -> one9th_s1_agent:cp_startofpacket
	wire          one9th_s1_burst_adapter_source0_endofpacket;                                 // one9th_s1_burst_adapter:source0_endofpacket -> one9th_s1_agent:cp_endofpacket
	wire          cmd_mux_021_src_valid;                                                       // cmd_mux_021:src_valid -> one36th_s1_burst_adapter:sink0_valid
	wire  [119:0] cmd_mux_021_src_data;                                                        // cmd_mux_021:src_data -> one36th_s1_burst_adapter:sink0_data
	wire          cmd_mux_021_src_ready;                                                       // one36th_s1_burst_adapter:sink0_ready -> cmd_mux_021:src_ready
	wire   [26:0] cmd_mux_021_src_channel;                                                     // cmd_mux_021:src_channel -> one36th_s1_burst_adapter:sink0_channel
	wire          cmd_mux_021_src_startofpacket;                                               // cmd_mux_021:src_startofpacket -> one36th_s1_burst_adapter:sink0_startofpacket
	wire          cmd_mux_021_src_endofpacket;                                                 // cmd_mux_021:src_endofpacket -> one36th_s1_burst_adapter:sink0_endofpacket
	wire          one36th_s1_burst_adapter_source0_valid;                                      // one36th_s1_burst_adapter:source0_valid -> one36th_s1_agent:cp_valid
	wire  [119:0] one36th_s1_burst_adapter_source0_data;                                       // one36th_s1_burst_adapter:source0_data -> one36th_s1_agent:cp_data
	wire          one36th_s1_burst_adapter_source0_ready;                                      // one36th_s1_agent:cp_ready -> one36th_s1_burst_adapter:source0_ready
	wire   [26:0] one36th_s1_burst_adapter_source0_channel;                                    // one36th_s1_burst_adapter:source0_channel -> one36th_s1_agent:cp_channel
	wire          one36th_s1_burst_adapter_source0_startofpacket;                              // one36th_s1_burst_adapter:source0_startofpacket -> one36th_s1_agent:cp_startofpacket
	wire          one36th_s1_burst_adapter_source0_endofpacket;                                // one36th_s1_burst_adapter:source0_endofpacket -> one36th_s1_agent:cp_endofpacket
	wire          cmd_mux_022_src_valid;                                                       // cmd_mux_022:src_valid -> omega_s1_burst_adapter:sink0_valid
	wire  [119:0] cmd_mux_022_src_data;                                                        // cmd_mux_022:src_data -> omega_s1_burst_adapter:sink0_data
	wire          cmd_mux_022_src_ready;                                                       // omega_s1_burst_adapter:sink0_ready -> cmd_mux_022:src_ready
	wire   [26:0] cmd_mux_022_src_channel;                                                     // cmd_mux_022:src_channel -> omega_s1_burst_adapter:sink0_channel
	wire          cmd_mux_022_src_startofpacket;                                               // cmd_mux_022:src_startofpacket -> omega_s1_burst_adapter:sink0_startofpacket
	wire          cmd_mux_022_src_endofpacket;                                                 // cmd_mux_022:src_endofpacket -> omega_s1_burst_adapter:sink0_endofpacket
	wire          omega_s1_burst_adapter_source0_valid;                                        // omega_s1_burst_adapter:source0_valid -> omega_s1_agent:cp_valid
	wire  [119:0] omega_s1_burst_adapter_source0_data;                                         // omega_s1_burst_adapter:source0_data -> omega_s1_agent:cp_data
	wire          omega_s1_burst_adapter_source0_ready;                                        // omega_s1_agent:cp_ready -> omega_s1_burst_adapter:source0_ready
	wire   [26:0] omega_s1_burst_adapter_source0_channel;                                      // omega_s1_burst_adapter:source0_channel -> omega_s1_agent:cp_channel
	wire          omega_s1_burst_adapter_source0_startofpacket;                                // omega_s1_burst_adapter:source0_startofpacket -> omega_s1_agent:cp_startofpacket
	wire          omega_s1_burst_adapter_source0_endofpacket;                                  // omega_s1_burst_adapter:source0_endofpacket -> omega_s1_agent:cp_endofpacket
	wire          cmd_mux_023_src_valid;                                                       // cmd_mux_023:src_valid -> ux_s1_burst_adapter:sink0_valid
	wire  [119:0] cmd_mux_023_src_data;                                                        // cmd_mux_023:src_data -> ux_s1_burst_adapter:sink0_data
	wire          cmd_mux_023_src_ready;                                                       // ux_s1_burst_adapter:sink0_ready -> cmd_mux_023:src_ready
	wire   [26:0] cmd_mux_023_src_channel;                                                     // cmd_mux_023:src_channel -> ux_s1_burst_adapter:sink0_channel
	wire          cmd_mux_023_src_startofpacket;                                               // cmd_mux_023:src_startofpacket -> ux_s1_burst_adapter:sink0_startofpacket
	wire          cmd_mux_023_src_endofpacket;                                                 // cmd_mux_023:src_endofpacket -> ux_s1_burst_adapter:sink0_endofpacket
	wire          ux_s1_burst_adapter_source0_valid;                                           // ux_s1_burst_adapter:source0_valid -> ux_s1_agent:cp_valid
	wire  [119:0] ux_s1_burst_adapter_source0_data;                                            // ux_s1_burst_adapter:source0_data -> ux_s1_agent:cp_data
	wire          ux_s1_burst_adapter_source0_ready;                                           // ux_s1_agent:cp_ready -> ux_s1_burst_adapter:source0_ready
	wire   [26:0] ux_s1_burst_adapter_source0_channel;                                         // ux_s1_burst_adapter:source0_channel -> ux_s1_agent:cp_channel
	wire          ux_s1_burst_adapter_source0_startofpacket;                                   // ux_s1_burst_adapter:source0_startofpacket -> ux_s1_agent:cp_startofpacket
	wire          ux_s1_burst_adapter_source0_endofpacket;                                     // ux_s1_burst_adapter:source0_endofpacket -> ux_s1_agent:cp_endofpacket
	wire          cmd_mux_024_src_valid;                                                       // cmd_mux_024:src_valid -> uy_s1_burst_adapter:sink0_valid
	wire  [119:0] cmd_mux_024_src_data;                                                        // cmd_mux_024:src_data -> uy_s1_burst_adapter:sink0_data
	wire          cmd_mux_024_src_ready;                                                       // uy_s1_burst_adapter:sink0_ready -> cmd_mux_024:src_ready
	wire   [26:0] cmd_mux_024_src_channel;                                                     // cmd_mux_024:src_channel -> uy_s1_burst_adapter:sink0_channel
	wire          cmd_mux_024_src_startofpacket;                                               // cmd_mux_024:src_startofpacket -> uy_s1_burst_adapter:sink0_startofpacket
	wire          cmd_mux_024_src_endofpacket;                                                 // cmd_mux_024:src_endofpacket -> uy_s1_burst_adapter:sink0_endofpacket
	wire          uy_s1_burst_adapter_source0_valid;                                           // uy_s1_burst_adapter:source0_valid -> uy_s1_agent:cp_valid
	wire  [119:0] uy_s1_burst_adapter_source0_data;                                            // uy_s1_burst_adapter:source0_data -> uy_s1_agent:cp_data
	wire          uy_s1_burst_adapter_source0_ready;                                           // uy_s1_agent:cp_ready -> uy_s1_burst_adapter:source0_ready
	wire   [26:0] uy_s1_burst_adapter_source0_channel;                                         // uy_s1_burst_adapter:source0_channel -> uy_s1_agent:cp_channel
	wire          uy_s1_burst_adapter_source0_startofpacket;                                   // uy_s1_burst_adapter:source0_startofpacket -> uy_s1_agent:cp_startofpacket
	wire          uy_s1_burst_adapter_source0_endofpacket;                                     // uy_s1_burst_adapter:source0_endofpacket -> uy_s1_agent:cp_endofpacket
	wire          cmd_mux_025_src_valid;                                                       // cmd_mux_025:src_valid -> pipes_s1_burst_adapter:sink0_valid
	wire  [119:0] cmd_mux_025_src_data;                                                        // cmd_mux_025:src_data -> pipes_s1_burst_adapter:sink0_data
	wire          cmd_mux_025_src_ready;                                                       // pipes_s1_burst_adapter:sink0_ready -> cmd_mux_025:src_ready
	wire   [26:0] cmd_mux_025_src_channel;                                                     // cmd_mux_025:src_channel -> pipes_s1_burst_adapter:sink0_channel
	wire          cmd_mux_025_src_startofpacket;                                               // cmd_mux_025:src_startofpacket -> pipes_s1_burst_adapter:sink0_startofpacket
	wire          cmd_mux_025_src_endofpacket;                                                 // cmd_mux_025:src_endofpacket -> pipes_s1_burst_adapter:sink0_endofpacket
	wire          pipes_s1_burst_adapter_source0_valid;                                        // pipes_s1_burst_adapter:source0_valid -> pipes_s1_agent:cp_valid
	wire  [119:0] pipes_s1_burst_adapter_source0_data;                                         // pipes_s1_burst_adapter:source0_data -> pipes_s1_agent:cp_data
	wire          pipes_s1_burst_adapter_source0_ready;                                        // pipes_s1_agent:cp_ready -> pipes_s1_burst_adapter:source0_ready
	wire   [26:0] pipes_s1_burst_adapter_source0_channel;                                      // pipes_s1_burst_adapter:source0_channel -> pipes_s1_agent:cp_channel
	wire          pipes_s1_burst_adapter_source0_startofpacket;                                // pipes_s1_burst_adapter:source0_startofpacket -> pipes_s1_agent:cp_startofpacket
	wire          pipes_s1_burst_adapter_source0_endofpacket;                                  // pipes_s1_burst_adapter:source0_endofpacket -> pipes_s1_agent:cp_endofpacket
	wire          cmd_mux_026_src_valid;                                                       // cmd_mux_026:src_valid -> Pixel_DMA_Addr_Translation_slave_burst_adapter:sink0_valid
	wire  [119:0] cmd_mux_026_src_data;                                                        // cmd_mux_026:src_data -> Pixel_DMA_Addr_Translation_slave_burst_adapter:sink0_data
	wire          cmd_mux_026_src_ready;                                                       // Pixel_DMA_Addr_Translation_slave_burst_adapter:sink0_ready -> cmd_mux_026:src_ready
	wire   [26:0] cmd_mux_026_src_channel;                                                     // cmd_mux_026:src_channel -> Pixel_DMA_Addr_Translation_slave_burst_adapter:sink0_channel
	wire          cmd_mux_026_src_startofpacket;                                               // cmd_mux_026:src_startofpacket -> Pixel_DMA_Addr_Translation_slave_burst_adapter:sink0_startofpacket
	wire          cmd_mux_026_src_endofpacket;                                                 // cmd_mux_026:src_endofpacket -> Pixel_DMA_Addr_Translation_slave_burst_adapter:sink0_endofpacket
	wire          pixel_dma_addr_translation_slave_burst_adapter_source0_valid;                // Pixel_DMA_Addr_Translation_slave_burst_adapter:source0_valid -> Pixel_DMA_Addr_Translation_slave_agent:cp_valid
	wire  [119:0] pixel_dma_addr_translation_slave_burst_adapter_source0_data;                 // Pixel_DMA_Addr_Translation_slave_burst_adapter:source0_data -> Pixel_DMA_Addr_Translation_slave_agent:cp_data
	wire          pixel_dma_addr_translation_slave_burst_adapter_source0_ready;                // Pixel_DMA_Addr_Translation_slave_agent:cp_ready -> Pixel_DMA_Addr_Translation_slave_burst_adapter:source0_ready
	wire   [26:0] pixel_dma_addr_translation_slave_burst_adapter_source0_channel;              // Pixel_DMA_Addr_Translation_slave_burst_adapter:source0_channel -> Pixel_DMA_Addr_Translation_slave_agent:cp_channel
	wire          pixel_dma_addr_translation_slave_burst_adapter_source0_startofpacket;        // Pixel_DMA_Addr_Translation_slave_burst_adapter:source0_startofpacket -> Pixel_DMA_Addr_Translation_slave_agent:cp_startofpacket
	wire          pixel_dma_addr_translation_slave_burst_adapter_source0_endofpacket;          // Pixel_DMA_Addr_Translation_slave_burst_adapter:source0_endofpacket -> Pixel_DMA_Addr_Translation_slave_agent:cp_endofpacket
	wire          cmd_demux_src0_valid;                                                        // cmd_demux:src0_valid -> cmd_mux:sink0_valid
	wire  [119:0] cmd_demux_src0_data;                                                         // cmd_demux:src0_data -> cmd_mux:sink0_data
	wire          cmd_demux_src0_ready;                                                        // cmd_mux:sink0_ready -> cmd_demux:src0_ready
	wire   [26:0] cmd_demux_src0_channel;                                                      // cmd_demux:src0_channel -> cmd_mux:sink0_channel
	wire          cmd_demux_src0_startofpacket;                                                // cmd_demux:src0_startofpacket -> cmd_mux:sink0_startofpacket
	wire          cmd_demux_src0_endofpacket;                                                  // cmd_demux:src0_endofpacket -> cmd_mux:sink0_endofpacket
	wire          cmd_demux_src1_valid;                                                        // cmd_demux:src1_valid -> cmd_mux_001:sink0_valid
	wire  [119:0] cmd_demux_src1_data;                                                         // cmd_demux:src1_data -> cmd_mux_001:sink0_data
	wire          cmd_demux_src1_ready;                                                        // cmd_mux_001:sink0_ready -> cmd_demux:src1_ready
	wire   [26:0] cmd_demux_src1_channel;                                                      // cmd_demux:src1_channel -> cmd_mux_001:sink0_channel
	wire          cmd_demux_src1_startofpacket;                                                // cmd_demux:src1_startofpacket -> cmd_mux_001:sink0_startofpacket
	wire          cmd_demux_src1_endofpacket;                                                  // cmd_demux:src1_endofpacket -> cmd_mux_001:sink0_endofpacket
	wire          cmd_demux_src2_valid;                                                        // cmd_demux:src2_valid -> cmd_mux_002:sink0_valid
	wire  [119:0] cmd_demux_src2_data;                                                         // cmd_demux:src2_data -> cmd_mux_002:sink0_data
	wire          cmd_demux_src2_ready;                                                        // cmd_mux_002:sink0_ready -> cmd_demux:src2_ready
	wire   [26:0] cmd_demux_src2_channel;                                                      // cmd_demux:src2_channel -> cmd_mux_002:sink0_channel
	wire          cmd_demux_src2_startofpacket;                                                // cmd_demux:src2_startofpacket -> cmd_mux_002:sink0_startofpacket
	wire          cmd_demux_src2_endofpacket;                                                  // cmd_demux:src2_endofpacket -> cmd_mux_002:sink0_endofpacket
	wire          cmd_demux_src3_valid;                                                        // cmd_demux:src3_valid -> cmd_mux_003:sink0_valid
	wire  [119:0] cmd_demux_src3_data;                                                         // cmd_demux:src3_data -> cmd_mux_003:sink0_data
	wire          cmd_demux_src3_ready;                                                        // cmd_mux_003:sink0_ready -> cmd_demux:src3_ready
	wire   [26:0] cmd_demux_src3_channel;                                                      // cmd_demux:src3_channel -> cmd_mux_003:sink0_channel
	wire          cmd_demux_src3_startofpacket;                                                // cmd_demux:src3_startofpacket -> cmd_mux_003:sink0_startofpacket
	wire          cmd_demux_src3_endofpacket;                                                  // cmd_demux:src3_endofpacket -> cmd_mux_003:sink0_endofpacket
	wire          cmd_demux_src4_valid;                                                        // cmd_demux:src4_valid -> cmd_mux_004:sink0_valid
	wire  [119:0] cmd_demux_src4_data;                                                         // cmd_demux:src4_data -> cmd_mux_004:sink0_data
	wire          cmd_demux_src4_ready;                                                        // cmd_mux_004:sink0_ready -> cmd_demux:src4_ready
	wire   [26:0] cmd_demux_src4_channel;                                                      // cmd_demux:src4_channel -> cmd_mux_004:sink0_channel
	wire          cmd_demux_src4_startofpacket;                                                // cmd_demux:src4_startofpacket -> cmd_mux_004:sink0_startofpacket
	wire          cmd_demux_src4_endofpacket;                                                  // cmd_demux:src4_endofpacket -> cmd_mux_004:sink0_endofpacket
	wire          cmd_demux_src5_valid;                                                        // cmd_demux:src5_valid -> cmd_mux_005:sink0_valid
	wire  [119:0] cmd_demux_src5_data;                                                         // cmd_demux:src5_data -> cmd_mux_005:sink0_data
	wire          cmd_demux_src5_ready;                                                        // cmd_mux_005:sink0_ready -> cmd_demux:src5_ready
	wire   [26:0] cmd_demux_src5_channel;                                                      // cmd_demux:src5_channel -> cmd_mux_005:sink0_channel
	wire          cmd_demux_src5_startofpacket;                                                // cmd_demux:src5_startofpacket -> cmd_mux_005:sink0_startofpacket
	wire          cmd_demux_src5_endofpacket;                                                  // cmd_demux:src5_endofpacket -> cmd_mux_005:sink0_endofpacket
	wire          cmd_demux_src6_valid;                                                        // cmd_demux:src6_valid -> cmd_mux_006:sink0_valid
	wire  [119:0] cmd_demux_src6_data;                                                         // cmd_demux:src6_data -> cmd_mux_006:sink0_data
	wire          cmd_demux_src6_ready;                                                        // cmd_mux_006:sink0_ready -> cmd_demux:src6_ready
	wire   [26:0] cmd_demux_src6_channel;                                                      // cmd_demux:src6_channel -> cmd_mux_006:sink0_channel
	wire          cmd_demux_src6_startofpacket;                                                // cmd_demux:src6_startofpacket -> cmd_mux_006:sink0_startofpacket
	wire          cmd_demux_src6_endofpacket;                                                  // cmd_demux:src6_endofpacket -> cmd_mux_006:sink0_endofpacket
	wire          cmd_demux_src7_valid;                                                        // cmd_demux:src7_valid -> cmd_mux_007:sink0_valid
	wire  [119:0] cmd_demux_src7_data;                                                         // cmd_demux:src7_data -> cmd_mux_007:sink0_data
	wire          cmd_demux_src7_ready;                                                        // cmd_mux_007:sink0_ready -> cmd_demux:src7_ready
	wire   [26:0] cmd_demux_src7_channel;                                                      // cmd_demux:src7_channel -> cmd_mux_007:sink0_channel
	wire          cmd_demux_src7_startofpacket;                                                // cmd_demux:src7_startofpacket -> cmd_mux_007:sink0_startofpacket
	wire          cmd_demux_src7_endofpacket;                                                  // cmd_demux:src7_endofpacket -> cmd_mux_007:sink0_endofpacket
	wire          cmd_demux_src8_valid;                                                        // cmd_demux:src8_valid -> cmd_mux_008:sink0_valid
	wire  [119:0] cmd_demux_src8_data;                                                         // cmd_demux:src8_data -> cmd_mux_008:sink0_data
	wire          cmd_demux_src8_ready;                                                        // cmd_mux_008:sink0_ready -> cmd_demux:src8_ready
	wire   [26:0] cmd_demux_src8_channel;                                                      // cmd_demux:src8_channel -> cmd_mux_008:sink0_channel
	wire          cmd_demux_src8_startofpacket;                                                // cmd_demux:src8_startofpacket -> cmd_mux_008:sink0_startofpacket
	wire          cmd_demux_src8_endofpacket;                                                  // cmd_demux:src8_endofpacket -> cmd_mux_008:sink0_endofpacket
	wire          cmd_demux_src9_valid;                                                        // cmd_demux:src9_valid -> cmd_mux_009:sink0_valid
	wire  [119:0] cmd_demux_src9_data;                                                         // cmd_demux:src9_data -> cmd_mux_009:sink0_data
	wire          cmd_demux_src9_ready;                                                        // cmd_mux_009:sink0_ready -> cmd_demux:src9_ready
	wire   [26:0] cmd_demux_src9_channel;                                                      // cmd_demux:src9_channel -> cmd_mux_009:sink0_channel
	wire          cmd_demux_src9_startofpacket;                                                // cmd_demux:src9_startofpacket -> cmd_mux_009:sink0_startofpacket
	wire          cmd_demux_src9_endofpacket;                                                  // cmd_demux:src9_endofpacket -> cmd_mux_009:sink0_endofpacket
	wire          cmd_demux_src10_valid;                                                       // cmd_demux:src10_valid -> cmd_mux_010:sink0_valid
	wire  [119:0] cmd_demux_src10_data;                                                        // cmd_demux:src10_data -> cmd_mux_010:sink0_data
	wire          cmd_demux_src10_ready;                                                       // cmd_mux_010:sink0_ready -> cmd_demux:src10_ready
	wire   [26:0] cmd_demux_src10_channel;                                                     // cmd_demux:src10_channel -> cmd_mux_010:sink0_channel
	wire          cmd_demux_src10_startofpacket;                                               // cmd_demux:src10_startofpacket -> cmd_mux_010:sink0_startofpacket
	wire          cmd_demux_src10_endofpacket;                                                 // cmd_demux:src10_endofpacket -> cmd_mux_010:sink0_endofpacket
	wire          cmd_demux_src11_valid;                                                       // cmd_demux:src11_valid -> cmd_mux_011:sink0_valid
	wire  [119:0] cmd_demux_src11_data;                                                        // cmd_demux:src11_data -> cmd_mux_011:sink0_data
	wire          cmd_demux_src11_ready;                                                       // cmd_mux_011:sink0_ready -> cmd_demux:src11_ready
	wire   [26:0] cmd_demux_src11_channel;                                                     // cmd_demux:src11_channel -> cmd_mux_011:sink0_channel
	wire          cmd_demux_src11_startofpacket;                                               // cmd_demux:src11_startofpacket -> cmd_mux_011:sink0_startofpacket
	wire          cmd_demux_src11_endofpacket;                                                 // cmd_demux:src11_endofpacket -> cmd_mux_011:sink0_endofpacket
	wire          cmd_demux_src12_valid;                                                       // cmd_demux:src12_valid -> cmd_mux_012:sink0_valid
	wire  [119:0] cmd_demux_src12_data;                                                        // cmd_demux:src12_data -> cmd_mux_012:sink0_data
	wire          cmd_demux_src12_ready;                                                       // cmd_mux_012:sink0_ready -> cmd_demux:src12_ready
	wire   [26:0] cmd_demux_src12_channel;                                                     // cmd_demux:src12_channel -> cmd_mux_012:sink0_channel
	wire          cmd_demux_src12_startofpacket;                                               // cmd_demux:src12_startofpacket -> cmd_mux_012:sink0_startofpacket
	wire          cmd_demux_src12_endofpacket;                                                 // cmd_demux:src12_endofpacket -> cmd_mux_012:sink0_endofpacket
	wire          cmd_demux_src13_valid;                                                       // cmd_demux:src13_valid -> cmd_mux_013:sink0_valid
	wire  [119:0] cmd_demux_src13_data;                                                        // cmd_demux:src13_data -> cmd_mux_013:sink0_data
	wire          cmd_demux_src13_ready;                                                       // cmd_mux_013:sink0_ready -> cmd_demux:src13_ready
	wire   [26:0] cmd_demux_src13_channel;                                                     // cmd_demux:src13_channel -> cmd_mux_013:sink0_channel
	wire          cmd_demux_src13_startofpacket;                                               // cmd_demux:src13_startofpacket -> cmd_mux_013:sink0_startofpacket
	wire          cmd_demux_src13_endofpacket;                                                 // cmd_demux:src13_endofpacket -> cmd_mux_013:sink0_endofpacket
	wire          cmd_demux_src14_valid;                                                       // cmd_demux:src14_valid -> cmd_mux_014:sink0_valid
	wire  [119:0] cmd_demux_src14_data;                                                        // cmd_demux:src14_data -> cmd_mux_014:sink0_data
	wire          cmd_demux_src14_ready;                                                       // cmd_mux_014:sink0_ready -> cmd_demux:src14_ready
	wire   [26:0] cmd_demux_src14_channel;                                                     // cmd_demux:src14_channel -> cmd_mux_014:sink0_channel
	wire          cmd_demux_src14_startofpacket;                                               // cmd_demux:src14_startofpacket -> cmd_mux_014:sink0_startofpacket
	wire          cmd_demux_src14_endofpacket;                                                 // cmd_demux:src14_endofpacket -> cmd_mux_014:sink0_endofpacket
	wire          cmd_demux_src15_valid;                                                       // cmd_demux:src15_valid -> cmd_mux_015:sink0_valid
	wire  [119:0] cmd_demux_src15_data;                                                        // cmd_demux:src15_data -> cmd_mux_015:sink0_data
	wire          cmd_demux_src15_ready;                                                       // cmd_mux_015:sink0_ready -> cmd_demux:src15_ready
	wire   [26:0] cmd_demux_src15_channel;                                                     // cmd_demux:src15_channel -> cmd_mux_015:sink0_channel
	wire          cmd_demux_src15_startofpacket;                                               // cmd_demux:src15_startofpacket -> cmd_mux_015:sink0_startofpacket
	wire          cmd_demux_src15_endofpacket;                                                 // cmd_demux:src15_endofpacket -> cmd_mux_015:sink0_endofpacket
	wire          cmd_demux_src16_valid;                                                       // cmd_demux:src16_valid -> cmd_mux_016:sink0_valid
	wire  [119:0] cmd_demux_src16_data;                                                        // cmd_demux:src16_data -> cmd_mux_016:sink0_data
	wire          cmd_demux_src16_ready;                                                       // cmd_mux_016:sink0_ready -> cmd_demux:src16_ready
	wire   [26:0] cmd_demux_src16_channel;                                                     // cmd_demux:src16_channel -> cmd_mux_016:sink0_channel
	wire          cmd_demux_src16_startofpacket;                                               // cmd_demux:src16_startofpacket -> cmd_mux_016:sink0_startofpacket
	wire          cmd_demux_src16_endofpacket;                                                 // cmd_demux:src16_endofpacket -> cmd_mux_016:sink0_endofpacket
	wire          cmd_demux_src17_valid;                                                       // cmd_demux:src17_valid -> cmd_mux_017:sink0_valid
	wire  [119:0] cmd_demux_src17_data;                                                        // cmd_demux:src17_data -> cmd_mux_017:sink0_data
	wire          cmd_demux_src17_ready;                                                       // cmd_mux_017:sink0_ready -> cmd_demux:src17_ready
	wire   [26:0] cmd_demux_src17_channel;                                                     // cmd_demux:src17_channel -> cmd_mux_017:sink0_channel
	wire          cmd_demux_src17_startofpacket;                                               // cmd_demux:src17_startofpacket -> cmd_mux_017:sink0_startofpacket
	wire          cmd_demux_src17_endofpacket;                                                 // cmd_demux:src17_endofpacket -> cmd_mux_017:sink0_endofpacket
	wire          cmd_demux_src18_valid;                                                       // cmd_demux:src18_valid -> cmd_mux_018:sink0_valid
	wire  [119:0] cmd_demux_src18_data;                                                        // cmd_demux:src18_data -> cmd_mux_018:sink0_data
	wire          cmd_demux_src18_ready;                                                       // cmd_mux_018:sink0_ready -> cmd_demux:src18_ready
	wire   [26:0] cmd_demux_src18_channel;                                                     // cmd_demux:src18_channel -> cmd_mux_018:sink0_channel
	wire          cmd_demux_src18_startofpacket;                                               // cmd_demux:src18_startofpacket -> cmd_mux_018:sink0_startofpacket
	wire          cmd_demux_src18_endofpacket;                                                 // cmd_demux:src18_endofpacket -> cmd_mux_018:sink0_endofpacket
	wire          cmd_demux_src19_valid;                                                       // cmd_demux:src19_valid -> cmd_mux_019:sink0_valid
	wire  [119:0] cmd_demux_src19_data;                                                        // cmd_demux:src19_data -> cmd_mux_019:sink0_data
	wire          cmd_demux_src19_ready;                                                       // cmd_mux_019:sink0_ready -> cmd_demux:src19_ready
	wire   [26:0] cmd_demux_src19_channel;                                                     // cmd_demux:src19_channel -> cmd_mux_019:sink0_channel
	wire          cmd_demux_src19_startofpacket;                                               // cmd_demux:src19_startofpacket -> cmd_mux_019:sink0_startofpacket
	wire          cmd_demux_src19_endofpacket;                                                 // cmd_demux:src19_endofpacket -> cmd_mux_019:sink0_endofpacket
	wire          cmd_demux_src20_valid;                                                       // cmd_demux:src20_valid -> cmd_mux_020:sink0_valid
	wire  [119:0] cmd_demux_src20_data;                                                        // cmd_demux:src20_data -> cmd_mux_020:sink0_data
	wire          cmd_demux_src20_ready;                                                       // cmd_mux_020:sink0_ready -> cmd_demux:src20_ready
	wire   [26:0] cmd_demux_src20_channel;                                                     // cmd_demux:src20_channel -> cmd_mux_020:sink0_channel
	wire          cmd_demux_src20_startofpacket;                                               // cmd_demux:src20_startofpacket -> cmd_mux_020:sink0_startofpacket
	wire          cmd_demux_src20_endofpacket;                                                 // cmd_demux:src20_endofpacket -> cmd_mux_020:sink0_endofpacket
	wire          cmd_demux_src21_valid;                                                       // cmd_demux:src21_valid -> cmd_mux_021:sink0_valid
	wire  [119:0] cmd_demux_src21_data;                                                        // cmd_demux:src21_data -> cmd_mux_021:sink0_data
	wire          cmd_demux_src21_ready;                                                       // cmd_mux_021:sink0_ready -> cmd_demux:src21_ready
	wire   [26:0] cmd_demux_src21_channel;                                                     // cmd_demux:src21_channel -> cmd_mux_021:sink0_channel
	wire          cmd_demux_src21_startofpacket;                                               // cmd_demux:src21_startofpacket -> cmd_mux_021:sink0_startofpacket
	wire          cmd_demux_src21_endofpacket;                                                 // cmd_demux:src21_endofpacket -> cmd_mux_021:sink0_endofpacket
	wire          cmd_demux_src22_valid;                                                       // cmd_demux:src22_valid -> cmd_mux_022:sink0_valid
	wire  [119:0] cmd_demux_src22_data;                                                        // cmd_demux:src22_data -> cmd_mux_022:sink0_data
	wire          cmd_demux_src22_ready;                                                       // cmd_mux_022:sink0_ready -> cmd_demux:src22_ready
	wire   [26:0] cmd_demux_src22_channel;                                                     // cmd_demux:src22_channel -> cmd_mux_022:sink0_channel
	wire          cmd_demux_src22_startofpacket;                                               // cmd_demux:src22_startofpacket -> cmd_mux_022:sink0_startofpacket
	wire          cmd_demux_src22_endofpacket;                                                 // cmd_demux:src22_endofpacket -> cmd_mux_022:sink0_endofpacket
	wire          cmd_demux_src23_valid;                                                       // cmd_demux:src23_valid -> cmd_mux_023:sink0_valid
	wire  [119:0] cmd_demux_src23_data;                                                        // cmd_demux:src23_data -> cmd_mux_023:sink0_data
	wire          cmd_demux_src23_ready;                                                       // cmd_mux_023:sink0_ready -> cmd_demux:src23_ready
	wire   [26:0] cmd_demux_src23_channel;                                                     // cmd_demux:src23_channel -> cmd_mux_023:sink0_channel
	wire          cmd_demux_src23_startofpacket;                                               // cmd_demux:src23_startofpacket -> cmd_mux_023:sink0_startofpacket
	wire          cmd_demux_src23_endofpacket;                                                 // cmd_demux:src23_endofpacket -> cmd_mux_023:sink0_endofpacket
	wire          cmd_demux_src24_valid;                                                       // cmd_demux:src24_valid -> cmd_mux_024:sink0_valid
	wire  [119:0] cmd_demux_src24_data;                                                        // cmd_demux:src24_data -> cmd_mux_024:sink0_data
	wire          cmd_demux_src24_ready;                                                       // cmd_mux_024:sink0_ready -> cmd_demux:src24_ready
	wire   [26:0] cmd_demux_src24_channel;                                                     // cmd_demux:src24_channel -> cmd_mux_024:sink0_channel
	wire          cmd_demux_src24_startofpacket;                                               // cmd_demux:src24_startofpacket -> cmd_mux_024:sink0_startofpacket
	wire          cmd_demux_src24_endofpacket;                                                 // cmd_demux:src24_endofpacket -> cmd_mux_024:sink0_endofpacket
	wire          cmd_demux_src25_valid;                                                       // cmd_demux:src25_valid -> cmd_mux_025:sink0_valid
	wire  [119:0] cmd_demux_src25_data;                                                        // cmd_demux:src25_data -> cmd_mux_025:sink0_data
	wire          cmd_demux_src25_ready;                                                       // cmd_mux_025:sink0_ready -> cmd_demux:src25_ready
	wire   [26:0] cmd_demux_src25_channel;                                                     // cmd_demux:src25_channel -> cmd_mux_025:sink0_channel
	wire          cmd_demux_src25_startofpacket;                                               // cmd_demux:src25_startofpacket -> cmd_mux_025:sink0_startofpacket
	wire          cmd_demux_src25_endofpacket;                                                 // cmd_demux:src25_endofpacket -> cmd_mux_025:sink0_endofpacket
	wire          cmd_demux_src26_valid;                                                       // cmd_demux:src26_valid -> cmd_mux_026:sink0_valid
	wire  [119:0] cmd_demux_src26_data;                                                        // cmd_demux:src26_data -> cmd_mux_026:sink0_data
	wire          cmd_demux_src26_ready;                                                       // cmd_mux_026:sink0_ready -> cmd_demux:src26_ready
	wire   [26:0] cmd_demux_src26_channel;                                                     // cmd_demux:src26_channel -> cmd_mux_026:sink0_channel
	wire          cmd_demux_src26_startofpacket;                                               // cmd_demux:src26_startofpacket -> cmd_mux_026:sink0_startofpacket
	wire          cmd_demux_src26_endofpacket;                                                 // cmd_demux:src26_endofpacket -> cmd_mux_026:sink0_endofpacket
	wire          cmd_demux_001_src0_valid;                                                    // cmd_demux_001:src0_valid -> cmd_mux:sink1_valid
	wire  [119:0] cmd_demux_001_src0_data;                                                     // cmd_demux_001:src0_data -> cmd_mux:sink1_data
	wire          cmd_demux_001_src0_ready;                                                    // cmd_mux:sink1_ready -> cmd_demux_001:src0_ready
	wire   [26:0] cmd_demux_001_src0_channel;                                                  // cmd_demux_001:src0_channel -> cmd_mux:sink1_channel
	wire          cmd_demux_001_src0_startofpacket;                                            // cmd_demux_001:src0_startofpacket -> cmd_mux:sink1_startofpacket
	wire          cmd_demux_001_src0_endofpacket;                                              // cmd_demux_001:src0_endofpacket -> cmd_mux:sink1_endofpacket
	wire          cmd_demux_001_src1_valid;                                                    // cmd_demux_001:src1_valid -> cmd_mux_001:sink1_valid
	wire  [119:0] cmd_demux_001_src1_data;                                                     // cmd_demux_001:src1_data -> cmd_mux_001:sink1_data
	wire          cmd_demux_001_src1_ready;                                                    // cmd_mux_001:sink1_ready -> cmd_demux_001:src1_ready
	wire   [26:0] cmd_demux_001_src1_channel;                                                  // cmd_demux_001:src1_channel -> cmd_mux_001:sink1_channel
	wire          cmd_demux_001_src1_startofpacket;                                            // cmd_demux_001:src1_startofpacket -> cmd_mux_001:sink1_startofpacket
	wire          cmd_demux_001_src1_endofpacket;                                              // cmd_demux_001:src1_endofpacket -> cmd_mux_001:sink1_endofpacket
	wire          cmd_demux_001_src2_valid;                                                    // cmd_demux_001:src2_valid -> cmd_mux_002:sink1_valid
	wire  [119:0] cmd_demux_001_src2_data;                                                     // cmd_demux_001:src2_data -> cmd_mux_002:sink1_data
	wire          cmd_demux_001_src2_ready;                                                    // cmd_mux_002:sink1_ready -> cmd_demux_001:src2_ready
	wire   [26:0] cmd_demux_001_src2_channel;                                                  // cmd_demux_001:src2_channel -> cmd_mux_002:sink1_channel
	wire          cmd_demux_001_src2_startofpacket;                                            // cmd_demux_001:src2_startofpacket -> cmd_mux_002:sink1_startofpacket
	wire          cmd_demux_001_src2_endofpacket;                                              // cmd_demux_001:src2_endofpacket -> cmd_mux_002:sink1_endofpacket
	wire          cmd_demux_001_src3_valid;                                                    // cmd_demux_001:src3_valid -> cmd_mux_003:sink1_valid
	wire  [119:0] cmd_demux_001_src3_data;                                                     // cmd_demux_001:src3_data -> cmd_mux_003:sink1_data
	wire          cmd_demux_001_src3_ready;                                                    // cmd_mux_003:sink1_ready -> cmd_demux_001:src3_ready
	wire   [26:0] cmd_demux_001_src3_channel;                                                  // cmd_demux_001:src3_channel -> cmd_mux_003:sink1_channel
	wire          cmd_demux_001_src3_startofpacket;                                            // cmd_demux_001:src3_startofpacket -> cmd_mux_003:sink1_startofpacket
	wire          cmd_demux_001_src3_endofpacket;                                              // cmd_demux_001:src3_endofpacket -> cmd_mux_003:sink1_endofpacket
	wire          cmd_demux_001_src4_valid;                                                    // cmd_demux_001:src4_valid -> cmd_mux_004:sink1_valid
	wire  [119:0] cmd_demux_001_src4_data;                                                     // cmd_demux_001:src4_data -> cmd_mux_004:sink1_data
	wire          cmd_demux_001_src4_ready;                                                    // cmd_mux_004:sink1_ready -> cmd_demux_001:src4_ready
	wire   [26:0] cmd_demux_001_src4_channel;                                                  // cmd_demux_001:src4_channel -> cmd_mux_004:sink1_channel
	wire          cmd_demux_001_src4_startofpacket;                                            // cmd_demux_001:src4_startofpacket -> cmd_mux_004:sink1_startofpacket
	wire          cmd_demux_001_src4_endofpacket;                                              // cmd_demux_001:src4_endofpacket -> cmd_mux_004:sink1_endofpacket
	wire          cmd_demux_001_src5_valid;                                                    // cmd_demux_001:src5_valid -> cmd_mux_005:sink1_valid
	wire  [119:0] cmd_demux_001_src5_data;                                                     // cmd_demux_001:src5_data -> cmd_mux_005:sink1_data
	wire          cmd_demux_001_src5_ready;                                                    // cmd_mux_005:sink1_ready -> cmd_demux_001:src5_ready
	wire   [26:0] cmd_demux_001_src5_channel;                                                  // cmd_demux_001:src5_channel -> cmd_mux_005:sink1_channel
	wire          cmd_demux_001_src5_startofpacket;                                            // cmd_demux_001:src5_startofpacket -> cmd_mux_005:sink1_startofpacket
	wire          cmd_demux_001_src5_endofpacket;                                              // cmd_demux_001:src5_endofpacket -> cmd_mux_005:sink1_endofpacket
	wire          cmd_demux_001_src6_valid;                                                    // cmd_demux_001:src6_valid -> cmd_mux_006:sink1_valid
	wire  [119:0] cmd_demux_001_src6_data;                                                     // cmd_demux_001:src6_data -> cmd_mux_006:sink1_data
	wire          cmd_demux_001_src6_ready;                                                    // cmd_mux_006:sink1_ready -> cmd_demux_001:src6_ready
	wire   [26:0] cmd_demux_001_src6_channel;                                                  // cmd_demux_001:src6_channel -> cmd_mux_006:sink1_channel
	wire          cmd_demux_001_src6_startofpacket;                                            // cmd_demux_001:src6_startofpacket -> cmd_mux_006:sink1_startofpacket
	wire          cmd_demux_001_src6_endofpacket;                                              // cmd_demux_001:src6_endofpacket -> cmd_mux_006:sink1_endofpacket
	wire          cmd_demux_001_src7_valid;                                                    // cmd_demux_001:src7_valid -> cmd_mux_007:sink1_valid
	wire  [119:0] cmd_demux_001_src7_data;                                                     // cmd_demux_001:src7_data -> cmd_mux_007:sink1_data
	wire          cmd_demux_001_src7_ready;                                                    // cmd_mux_007:sink1_ready -> cmd_demux_001:src7_ready
	wire   [26:0] cmd_demux_001_src7_channel;                                                  // cmd_demux_001:src7_channel -> cmd_mux_007:sink1_channel
	wire          cmd_demux_001_src7_startofpacket;                                            // cmd_demux_001:src7_startofpacket -> cmd_mux_007:sink1_startofpacket
	wire          cmd_demux_001_src7_endofpacket;                                              // cmd_demux_001:src7_endofpacket -> cmd_mux_007:sink1_endofpacket
	wire          cmd_demux_001_src8_valid;                                                    // cmd_demux_001:src8_valid -> cmd_mux_008:sink1_valid
	wire  [119:0] cmd_demux_001_src8_data;                                                     // cmd_demux_001:src8_data -> cmd_mux_008:sink1_data
	wire          cmd_demux_001_src8_ready;                                                    // cmd_mux_008:sink1_ready -> cmd_demux_001:src8_ready
	wire   [26:0] cmd_demux_001_src8_channel;                                                  // cmd_demux_001:src8_channel -> cmd_mux_008:sink1_channel
	wire          cmd_demux_001_src8_startofpacket;                                            // cmd_demux_001:src8_startofpacket -> cmd_mux_008:sink1_startofpacket
	wire          cmd_demux_001_src8_endofpacket;                                              // cmd_demux_001:src8_endofpacket -> cmd_mux_008:sink1_endofpacket
	wire          cmd_demux_001_src9_valid;                                                    // cmd_demux_001:src9_valid -> cmd_mux_009:sink1_valid
	wire  [119:0] cmd_demux_001_src9_data;                                                     // cmd_demux_001:src9_data -> cmd_mux_009:sink1_data
	wire          cmd_demux_001_src9_ready;                                                    // cmd_mux_009:sink1_ready -> cmd_demux_001:src9_ready
	wire   [26:0] cmd_demux_001_src9_channel;                                                  // cmd_demux_001:src9_channel -> cmd_mux_009:sink1_channel
	wire          cmd_demux_001_src9_startofpacket;                                            // cmd_demux_001:src9_startofpacket -> cmd_mux_009:sink1_startofpacket
	wire          cmd_demux_001_src9_endofpacket;                                              // cmd_demux_001:src9_endofpacket -> cmd_mux_009:sink1_endofpacket
	wire          cmd_demux_001_src10_valid;                                                   // cmd_demux_001:src10_valid -> cmd_mux_010:sink1_valid
	wire  [119:0] cmd_demux_001_src10_data;                                                    // cmd_demux_001:src10_data -> cmd_mux_010:sink1_data
	wire          cmd_demux_001_src10_ready;                                                   // cmd_mux_010:sink1_ready -> cmd_demux_001:src10_ready
	wire   [26:0] cmd_demux_001_src10_channel;                                                 // cmd_demux_001:src10_channel -> cmd_mux_010:sink1_channel
	wire          cmd_demux_001_src10_startofpacket;                                           // cmd_demux_001:src10_startofpacket -> cmd_mux_010:sink1_startofpacket
	wire          cmd_demux_001_src10_endofpacket;                                             // cmd_demux_001:src10_endofpacket -> cmd_mux_010:sink1_endofpacket
	wire          cmd_demux_001_src11_valid;                                                   // cmd_demux_001:src11_valid -> cmd_mux_011:sink1_valid
	wire  [119:0] cmd_demux_001_src11_data;                                                    // cmd_demux_001:src11_data -> cmd_mux_011:sink1_data
	wire          cmd_demux_001_src11_ready;                                                   // cmd_mux_011:sink1_ready -> cmd_demux_001:src11_ready
	wire   [26:0] cmd_demux_001_src11_channel;                                                 // cmd_demux_001:src11_channel -> cmd_mux_011:sink1_channel
	wire          cmd_demux_001_src11_startofpacket;                                           // cmd_demux_001:src11_startofpacket -> cmd_mux_011:sink1_startofpacket
	wire          cmd_demux_001_src11_endofpacket;                                             // cmd_demux_001:src11_endofpacket -> cmd_mux_011:sink1_endofpacket
	wire          cmd_demux_001_src12_valid;                                                   // cmd_demux_001:src12_valid -> cmd_mux_012:sink1_valid
	wire  [119:0] cmd_demux_001_src12_data;                                                    // cmd_demux_001:src12_data -> cmd_mux_012:sink1_data
	wire          cmd_demux_001_src12_ready;                                                   // cmd_mux_012:sink1_ready -> cmd_demux_001:src12_ready
	wire   [26:0] cmd_demux_001_src12_channel;                                                 // cmd_demux_001:src12_channel -> cmd_mux_012:sink1_channel
	wire          cmd_demux_001_src12_startofpacket;                                           // cmd_demux_001:src12_startofpacket -> cmd_mux_012:sink1_startofpacket
	wire          cmd_demux_001_src12_endofpacket;                                             // cmd_demux_001:src12_endofpacket -> cmd_mux_012:sink1_endofpacket
	wire          cmd_demux_001_src13_valid;                                                   // cmd_demux_001:src13_valid -> cmd_mux_013:sink1_valid
	wire  [119:0] cmd_demux_001_src13_data;                                                    // cmd_demux_001:src13_data -> cmd_mux_013:sink1_data
	wire          cmd_demux_001_src13_ready;                                                   // cmd_mux_013:sink1_ready -> cmd_demux_001:src13_ready
	wire   [26:0] cmd_demux_001_src13_channel;                                                 // cmd_demux_001:src13_channel -> cmd_mux_013:sink1_channel
	wire          cmd_demux_001_src13_startofpacket;                                           // cmd_demux_001:src13_startofpacket -> cmd_mux_013:sink1_startofpacket
	wire          cmd_demux_001_src13_endofpacket;                                             // cmd_demux_001:src13_endofpacket -> cmd_mux_013:sink1_endofpacket
	wire          cmd_demux_001_src14_valid;                                                   // cmd_demux_001:src14_valid -> cmd_mux_014:sink1_valid
	wire  [119:0] cmd_demux_001_src14_data;                                                    // cmd_demux_001:src14_data -> cmd_mux_014:sink1_data
	wire          cmd_demux_001_src14_ready;                                                   // cmd_mux_014:sink1_ready -> cmd_demux_001:src14_ready
	wire   [26:0] cmd_demux_001_src14_channel;                                                 // cmd_demux_001:src14_channel -> cmd_mux_014:sink1_channel
	wire          cmd_demux_001_src14_startofpacket;                                           // cmd_demux_001:src14_startofpacket -> cmd_mux_014:sink1_startofpacket
	wire          cmd_demux_001_src14_endofpacket;                                             // cmd_demux_001:src14_endofpacket -> cmd_mux_014:sink1_endofpacket
	wire          cmd_demux_001_src15_valid;                                                   // cmd_demux_001:src15_valid -> cmd_mux_015:sink1_valid
	wire  [119:0] cmd_demux_001_src15_data;                                                    // cmd_demux_001:src15_data -> cmd_mux_015:sink1_data
	wire          cmd_demux_001_src15_ready;                                                   // cmd_mux_015:sink1_ready -> cmd_demux_001:src15_ready
	wire   [26:0] cmd_demux_001_src15_channel;                                                 // cmd_demux_001:src15_channel -> cmd_mux_015:sink1_channel
	wire          cmd_demux_001_src15_startofpacket;                                           // cmd_demux_001:src15_startofpacket -> cmd_mux_015:sink1_startofpacket
	wire          cmd_demux_001_src15_endofpacket;                                             // cmd_demux_001:src15_endofpacket -> cmd_mux_015:sink1_endofpacket
	wire          cmd_demux_001_src16_valid;                                                   // cmd_demux_001:src16_valid -> cmd_mux_016:sink1_valid
	wire  [119:0] cmd_demux_001_src16_data;                                                    // cmd_demux_001:src16_data -> cmd_mux_016:sink1_data
	wire          cmd_demux_001_src16_ready;                                                   // cmd_mux_016:sink1_ready -> cmd_demux_001:src16_ready
	wire   [26:0] cmd_demux_001_src16_channel;                                                 // cmd_demux_001:src16_channel -> cmd_mux_016:sink1_channel
	wire          cmd_demux_001_src16_startofpacket;                                           // cmd_demux_001:src16_startofpacket -> cmd_mux_016:sink1_startofpacket
	wire          cmd_demux_001_src16_endofpacket;                                             // cmd_demux_001:src16_endofpacket -> cmd_mux_016:sink1_endofpacket
	wire          cmd_demux_001_src17_valid;                                                   // cmd_demux_001:src17_valid -> cmd_mux_017:sink1_valid
	wire  [119:0] cmd_demux_001_src17_data;                                                    // cmd_demux_001:src17_data -> cmd_mux_017:sink1_data
	wire          cmd_demux_001_src17_ready;                                                   // cmd_mux_017:sink1_ready -> cmd_demux_001:src17_ready
	wire   [26:0] cmd_demux_001_src17_channel;                                                 // cmd_demux_001:src17_channel -> cmd_mux_017:sink1_channel
	wire          cmd_demux_001_src17_startofpacket;                                           // cmd_demux_001:src17_startofpacket -> cmd_mux_017:sink1_startofpacket
	wire          cmd_demux_001_src17_endofpacket;                                             // cmd_demux_001:src17_endofpacket -> cmd_mux_017:sink1_endofpacket
	wire          cmd_demux_001_src18_valid;                                                   // cmd_demux_001:src18_valid -> cmd_mux_018:sink1_valid
	wire  [119:0] cmd_demux_001_src18_data;                                                    // cmd_demux_001:src18_data -> cmd_mux_018:sink1_data
	wire          cmd_demux_001_src18_ready;                                                   // cmd_mux_018:sink1_ready -> cmd_demux_001:src18_ready
	wire   [26:0] cmd_demux_001_src18_channel;                                                 // cmd_demux_001:src18_channel -> cmd_mux_018:sink1_channel
	wire          cmd_demux_001_src18_startofpacket;                                           // cmd_demux_001:src18_startofpacket -> cmd_mux_018:sink1_startofpacket
	wire          cmd_demux_001_src18_endofpacket;                                             // cmd_demux_001:src18_endofpacket -> cmd_mux_018:sink1_endofpacket
	wire          cmd_demux_001_src19_valid;                                                   // cmd_demux_001:src19_valid -> cmd_mux_019:sink1_valid
	wire  [119:0] cmd_demux_001_src19_data;                                                    // cmd_demux_001:src19_data -> cmd_mux_019:sink1_data
	wire          cmd_demux_001_src19_ready;                                                   // cmd_mux_019:sink1_ready -> cmd_demux_001:src19_ready
	wire   [26:0] cmd_demux_001_src19_channel;                                                 // cmd_demux_001:src19_channel -> cmd_mux_019:sink1_channel
	wire          cmd_demux_001_src19_startofpacket;                                           // cmd_demux_001:src19_startofpacket -> cmd_mux_019:sink1_startofpacket
	wire          cmd_demux_001_src19_endofpacket;                                             // cmd_demux_001:src19_endofpacket -> cmd_mux_019:sink1_endofpacket
	wire          cmd_demux_001_src20_valid;                                                   // cmd_demux_001:src20_valid -> cmd_mux_020:sink1_valid
	wire  [119:0] cmd_demux_001_src20_data;                                                    // cmd_demux_001:src20_data -> cmd_mux_020:sink1_data
	wire          cmd_demux_001_src20_ready;                                                   // cmd_mux_020:sink1_ready -> cmd_demux_001:src20_ready
	wire   [26:0] cmd_demux_001_src20_channel;                                                 // cmd_demux_001:src20_channel -> cmd_mux_020:sink1_channel
	wire          cmd_demux_001_src20_startofpacket;                                           // cmd_demux_001:src20_startofpacket -> cmd_mux_020:sink1_startofpacket
	wire          cmd_demux_001_src20_endofpacket;                                             // cmd_demux_001:src20_endofpacket -> cmd_mux_020:sink1_endofpacket
	wire          cmd_demux_001_src21_valid;                                                   // cmd_demux_001:src21_valid -> cmd_mux_021:sink1_valid
	wire  [119:0] cmd_demux_001_src21_data;                                                    // cmd_demux_001:src21_data -> cmd_mux_021:sink1_data
	wire          cmd_demux_001_src21_ready;                                                   // cmd_mux_021:sink1_ready -> cmd_demux_001:src21_ready
	wire   [26:0] cmd_demux_001_src21_channel;                                                 // cmd_demux_001:src21_channel -> cmd_mux_021:sink1_channel
	wire          cmd_demux_001_src21_startofpacket;                                           // cmd_demux_001:src21_startofpacket -> cmd_mux_021:sink1_startofpacket
	wire          cmd_demux_001_src21_endofpacket;                                             // cmd_demux_001:src21_endofpacket -> cmd_mux_021:sink1_endofpacket
	wire          cmd_demux_001_src22_valid;                                                   // cmd_demux_001:src22_valid -> cmd_mux_022:sink1_valid
	wire  [119:0] cmd_demux_001_src22_data;                                                    // cmd_demux_001:src22_data -> cmd_mux_022:sink1_data
	wire          cmd_demux_001_src22_ready;                                                   // cmd_mux_022:sink1_ready -> cmd_demux_001:src22_ready
	wire   [26:0] cmd_demux_001_src22_channel;                                                 // cmd_demux_001:src22_channel -> cmd_mux_022:sink1_channel
	wire          cmd_demux_001_src22_startofpacket;                                           // cmd_demux_001:src22_startofpacket -> cmd_mux_022:sink1_startofpacket
	wire          cmd_demux_001_src22_endofpacket;                                             // cmd_demux_001:src22_endofpacket -> cmd_mux_022:sink1_endofpacket
	wire          cmd_demux_001_src23_valid;                                                   // cmd_demux_001:src23_valid -> cmd_mux_023:sink1_valid
	wire  [119:0] cmd_demux_001_src23_data;                                                    // cmd_demux_001:src23_data -> cmd_mux_023:sink1_data
	wire          cmd_demux_001_src23_ready;                                                   // cmd_mux_023:sink1_ready -> cmd_demux_001:src23_ready
	wire   [26:0] cmd_demux_001_src23_channel;                                                 // cmd_demux_001:src23_channel -> cmd_mux_023:sink1_channel
	wire          cmd_demux_001_src23_startofpacket;                                           // cmd_demux_001:src23_startofpacket -> cmd_mux_023:sink1_startofpacket
	wire          cmd_demux_001_src23_endofpacket;                                             // cmd_demux_001:src23_endofpacket -> cmd_mux_023:sink1_endofpacket
	wire          cmd_demux_001_src24_valid;                                                   // cmd_demux_001:src24_valid -> cmd_mux_024:sink1_valid
	wire  [119:0] cmd_demux_001_src24_data;                                                    // cmd_demux_001:src24_data -> cmd_mux_024:sink1_data
	wire          cmd_demux_001_src24_ready;                                                   // cmd_mux_024:sink1_ready -> cmd_demux_001:src24_ready
	wire   [26:0] cmd_demux_001_src24_channel;                                                 // cmd_demux_001:src24_channel -> cmd_mux_024:sink1_channel
	wire          cmd_demux_001_src24_startofpacket;                                           // cmd_demux_001:src24_startofpacket -> cmd_mux_024:sink1_startofpacket
	wire          cmd_demux_001_src24_endofpacket;                                             // cmd_demux_001:src24_endofpacket -> cmd_mux_024:sink1_endofpacket
	wire          cmd_demux_001_src25_valid;                                                   // cmd_demux_001:src25_valid -> cmd_mux_025:sink1_valid
	wire  [119:0] cmd_demux_001_src25_data;                                                    // cmd_demux_001:src25_data -> cmd_mux_025:sink1_data
	wire          cmd_demux_001_src25_ready;                                                   // cmd_mux_025:sink1_ready -> cmd_demux_001:src25_ready
	wire   [26:0] cmd_demux_001_src25_channel;                                                 // cmd_demux_001:src25_channel -> cmd_mux_025:sink1_channel
	wire          cmd_demux_001_src25_startofpacket;                                           // cmd_demux_001:src25_startofpacket -> cmd_mux_025:sink1_startofpacket
	wire          cmd_demux_001_src25_endofpacket;                                             // cmd_demux_001:src25_endofpacket -> cmd_mux_025:sink1_endofpacket
	wire          cmd_demux_001_src26_valid;                                                   // cmd_demux_001:src26_valid -> cmd_mux_026:sink1_valid
	wire  [119:0] cmd_demux_001_src26_data;                                                    // cmd_demux_001:src26_data -> cmd_mux_026:sink1_data
	wire          cmd_demux_001_src26_ready;                                                   // cmd_mux_026:sink1_ready -> cmd_demux_001:src26_ready
	wire   [26:0] cmd_demux_001_src26_channel;                                                 // cmd_demux_001:src26_channel -> cmd_mux_026:sink1_channel
	wire          cmd_demux_001_src26_startofpacket;                                           // cmd_demux_001:src26_startofpacket -> cmd_mux_026:sink1_startofpacket
	wire          cmd_demux_001_src26_endofpacket;                                             // cmd_demux_001:src26_endofpacket -> cmd_mux_026:sink1_endofpacket
	wire          rsp_demux_src0_valid;                                                        // rsp_demux:src0_valid -> rsp_mux:sink0_valid
	wire  [119:0] rsp_demux_src0_data;                                                         // rsp_demux:src0_data -> rsp_mux:sink0_data
	wire          rsp_demux_src0_ready;                                                        // rsp_mux:sink0_ready -> rsp_demux:src0_ready
	wire   [26:0] rsp_demux_src0_channel;                                                      // rsp_demux:src0_channel -> rsp_mux:sink0_channel
	wire          rsp_demux_src0_startofpacket;                                                // rsp_demux:src0_startofpacket -> rsp_mux:sink0_startofpacket
	wire          rsp_demux_src0_endofpacket;                                                  // rsp_demux:src0_endofpacket -> rsp_mux:sink0_endofpacket
	wire          rsp_demux_src1_valid;                                                        // rsp_demux:src1_valid -> rsp_mux_001:sink0_valid
	wire  [119:0] rsp_demux_src1_data;                                                         // rsp_demux:src1_data -> rsp_mux_001:sink0_data
	wire          rsp_demux_src1_ready;                                                        // rsp_mux_001:sink0_ready -> rsp_demux:src1_ready
	wire   [26:0] rsp_demux_src1_channel;                                                      // rsp_demux:src1_channel -> rsp_mux_001:sink0_channel
	wire          rsp_demux_src1_startofpacket;                                                // rsp_demux:src1_startofpacket -> rsp_mux_001:sink0_startofpacket
	wire          rsp_demux_src1_endofpacket;                                                  // rsp_demux:src1_endofpacket -> rsp_mux_001:sink0_endofpacket
	wire          rsp_demux_001_src0_valid;                                                    // rsp_demux_001:src0_valid -> rsp_mux:sink1_valid
	wire  [119:0] rsp_demux_001_src0_data;                                                     // rsp_demux_001:src0_data -> rsp_mux:sink1_data
	wire          rsp_demux_001_src0_ready;                                                    // rsp_mux:sink1_ready -> rsp_demux_001:src0_ready
	wire   [26:0] rsp_demux_001_src0_channel;                                                  // rsp_demux_001:src0_channel -> rsp_mux:sink1_channel
	wire          rsp_demux_001_src0_startofpacket;                                            // rsp_demux_001:src0_startofpacket -> rsp_mux:sink1_startofpacket
	wire          rsp_demux_001_src0_endofpacket;                                              // rsp_demux_001:src0_endofpacket -> rsp_mux:sink1_endofpacket
	wire          rsp_demux_001_src1_valid;                                                    // rsp_demux_001:src1_valid -> rsp_mux_001:sink1_valid
	wire  [119:0] rsp_demux_001_src1_data;                                                     // rsp_demux_001:src1_data -> rsp_mux_001:sink1_data
	wire          rsp_demux_001_src1_ready;                                                    // rsp_mux_001:sink1_ready -> rsp_demux_001:src1_ready
	wire   [26:0] rsp_demux_001_src1_channel;                                                  // rsp_demux_001:src1_channel -> rsp_mux_001:sink1_channel
	wire          rsp_demux_001_src1_startofpacket;                                            // rsp_demux_001:src1_startofpacket -> rsp_mux_001:sink1_startofpacket
	wire          rsp_demux_001_src1_endofpacket;                                              // rsp_demux_001:src1_endofpacket -> rsp_mux_001:sink1_endofpacket
	wire          rsp_demux_002_src0_valid;                                                    // rsp_demux_002:src0_valid -> rsp_mux:sink2_valid
	wire  [119:0] rsp_demux_002_src0_data;                                                     // rsp_demux_002:src0_data -> rsp_mux:sink2_data
	wire          rsp_demux_002_src0_ready;                                                    // rsp_mux:sink2_ready -> rsp_demux_002:src0_ready
	wire   [26:0] rsp_demux_002_src0_channel;                                                  // rsp_demux_002:src0_channel -> rsp_mux:sink2_channel
	wire          rsp_demux_002_src0_startofpacket;                                            // rsp_demux_002:src0_startofpacket -> rsp_mux:sink2_startofpacket
	wire          rsp_demux_002_src0_endofpacket;                                              // rsp_demux_002:src0_endofpacket -> rsp_mux:sink2_endofpacket
	wire          rsp_demux_002_src1_valid;                                                    // rsp_demux_002:src1_valid -> rsp_mux_001:sink2_valid
	wire  [119:0] rsp_demux_002_src1_data;                                                     // rsp_demux_002:src1_data -> rsp_mux_001:sink2_data
	wire          rsp_demux_002_src1_ready;                                                    // rsp_mux_001:sink2_ready -> rsp_demux_002:src1_ready
	wire   [26:0] rsp_demux_002_src1_channel;                                                  // rsp_demux_002:src1_channel -> rsp_mux_001:sink2_channel
	wire          rsp_demux_002_src1_startofpacket;                                            // rsp_demux_002:src1_startofpacket -> rsp_mux_001:sink2_startofpacket
	wire          rsp_demux_002_src1_endofpacket;                                              // rsp_demux_002:src1_endofpacket -> rsp_mux_001:sink2_endofpacket
	wire          rsp_demux_003_src0_valid;                                                    // rsp_demux_003:src0_valid -> rsp_mux:sink3_valid
	wire  [119:0] rsp_demux_003_src0_data;                                                     // rsp_demux_003:src0_data -> rsp_mux:sink3_data
	wire          rsp_demux_003_src0_ready;                                                    // rsp_mux:sink3_ready -> rsp_demux_003:src0_ready
	wire   [26:0] rsp_demux_003_src0_channel;                                                  // rsp_demux_003:src0_channel -> rsp_mux:sink3_channel
	wire          rsp_demux_003_src0_startofpacket;                                            // rsp_demux_003:src0_startofpacket -> rsp_mux:sink3_startofpacket
	wire          rsp_demux_003_src0_endofpacket;                                              // rsp_demux_003:src0_endofpacket -> rsp_mux:sink3_endofpacket
	wire          rsp_demux_003_src1_valid;                                                    // rsp_demux_003:src1_valid -> rsp_mux_001:sink3_valid
	wire  [119:0] rsp_demux_003_src1_data;                                                     // rsp_demux_003:src1_data -> rsp_mux_001:sink3_data
	wire          rsp_demux_003_src1_ready;                                                    // rsp_mux_001:sink3_ready -> rsp_demux_003:src1_ready
	wire   [26:0] rsp_demux_003_src1_channel;                                                  // rsp_demux_003:src1_channel -> rsp_mux_001:sink3_channel
	wire          rsp_demux_003_src1_startofpacket;                                            // rsp_demux_003:src1_startofpacket -> rsp_mux_001:sink3_startofpacket
	wire          rsp_demux_003_src1_endofpacket;                                              // rsp_demux_003:src1_endofpacket -> rsp_mux_001:sink3_endofpacket
	wire          rsp_demux_004_src0_valid;                                                    // rsp_demux_004:src0_valid -> rsp_mux:sink4_valid
	wire  [119:0] rsp_demux_004_src0_data;                                                     // rsp_demux_004:src0_data -> rsp_mux:sink4_data
	wire          rsp_demux_004_src0_ready;                                                    // rsp_mux:sink4_ready -> rsp_demux_004:src0_ready
	wire   [26:0] rsp_demux_004_src0_channel;                                                  // rsp_demux_004:src0_channel -> rsp_mux:sink4_channel
	wire          rsp_demux_004_src0_startofpacket;                                            // rsp_demux_004:src0_startofpacket -> rsp_mux:sink4_startofpacket
	wire          rsp_demux_004_src0_endofpacket;                                              // rsp_demux_004:src0_endofpacket -> rsp_mux:sink4_endofpacket
	wire          rsp_demux_004_src1_valid;                                                    // rsp_demux_004:src1_valid -> rsp_mux_001:sink4_valid
	wire  [119:0] rsp_demux_004_src1_data;                                                     // rsp_demux_004:src1_data -> rsp_mux_001:sink4_data
	wire          rsp_demux_004_src1_ready;                                                    // rsp_mux_001:sink4_ready -> rsp_demux_004:src1_ready
	wire   [26:0] rsp_demux_004_src1_channel;                                                  // rsp_demux_004:src1_channel -> rsp_mux_001:sink4_channel
	wire          rsp_demux_004_src1_startofpacket;                                            // rsp_demux_004:src1_startofpacket -> rsp_mux_001:sink4_startofpacket
	wire          rsp_demux_004_src1_endofpacket;                                              // rsp_demux_004:src1_endofpacket -> rsp_mux_001:sink4_endofpacket
	wire          rsp_demux_005_src0_valid;                                                    // rsp_demux_005:src0_valid -> rsp_mux:sink5_valid
	wire  [119:0] rsp_demux_005_src0_data;                                                     // rsp_demux_005:src0_data -> rsp_mux:sink5_data
	wire          rsp_demux_005_src0_ready;                                                    // rsp_mux:sink5_ready -> rsp_demux_005:src0_ready
	wire   [26:0] rsp_demux_005_src0_channel;                                                  // rsp_demux_005:src0_channel -> rsp_mux:sink5_channel
	wire          rsp_demux_005_src0_startofpacket;                                            // rsp_demux_005:src0_startofpacket -> rsp_mux:sink5_startofpacket
	wire          rsp_demux_005_src0_endofpacket;                                              // rsp_demux_005:src0_endofpacket -> rsp_mux:sink5_endofpacket
	wire          rsp_demux_005_src1_valid;                                                    // rsp_demux_005:src1_valid -> rsp_mux_001:sink5_valid
	wire  [119:0] rsp_demux_005_src1_data;                                                     // rsp_demux_005:src1_data -> rsp_mux_001:sink5_data
	wire          rsp_demux_005_src1_ready;                                                    // rsp_mux_001:sink5_ready -> rsp_demux_005:src1_ready
	wire   [26:0] rsp_demux_005_src1_channel;                                                  // rsp_demux_005:src1_channel -> rsp_mux_001:sink5_channel
	wire          rsp_demux_005_src1_startofpacket;                                            // rsp_demux_005:src1_startofpacket -> rsp_mux_001:sink5_startofpacket
	wire          rsp_demux_005_src1_endofpacket;                                              // rsp_demux_005:src1_endofpacket -> rsp_mux_001:sink5_endofpacket
	wire          rsp_demux_006_src0_valid;                                                    // rsp_demux_006:src0_valid -> rsp_mux:sink6_valid
	wire  [119:0] rsp_demux_006_src0_data;                                                     // rsp_demux_006:src0_data -> rsp_mux:sink6_data
	wire          rsp_demux_006_src0_ready;                                                    // rsp_mux:sink6_ready -> rsp_demux_006:src0_ready
	wire   [26:0] rsp_demux_006_src0_channel;                                                  // rsp_demux_006:src0_channel -> rsp_mux:sink6_channel
	wire          rsp_demux_006_src0_startofpacket;                                            // rsp_demux_006:src0_startofpacket -> rsp_mux:sink6_startofpacket
	wire          rsp_demux_006_src0_endofpacket;                                              // rsp_demux_006:src0_endofpacket -> rsp_mux:sink6_endofpacket
	wire          rsp_demux_006_src1_valid;                                                    // rsp_demux_006:src1_valid -> rsp_mux_001:sink6_valid
	wire  [119:0] rsp_demux_006_src1_data;                                                     // rsp_demux_006:src1_data -> rsp_mux_001:sink6_data
	wire          rsp_demux_006_src1_ready;                                                    // rsp_mux_001:sink6_ready -> rsp_demux_006:src1_ready
	wire   [26:0] rsp_demux_006_src1_channel;                                                  // rsp_demux_006:src1_channel -> rsp_mux_001:sink6_channel
	wire          rsp_demux_006_src1_startofpacket;                                            // rsp_demux_006:src1_startofpacket -> rsp_mux_001:sink6_startofpacket
	wire          rsp_demux_006_src1_endofpacket;                                              // rsp_demux_006:src1_endofpacket -> rsp_mux_001:sink6_endofpacket
	wire          rsp_demux_007_src0_valid;                                                    // rsp_demux_007:src0_valid -> rsp_mux:sink7_valid
	wire  [119:0] rsp_demux_007_src0_data;                                                     // rsp_demux_007:src0_data -> rsp_mux:sink7_data
	wire          rsp_demux_007_src0_ready;                                                    // rsp_mux:sink7_ready -> rsp_demux_007:src0_ready
	wire   [26:0] rsp_demux_007_src0_channel;                                                  // rsp_demux_007:src0_channel -> rsp_mux:sink7_channel
	wire          rsp_demux_007_src0_startofpacket;                                            // rsp_demux_007:src0_startofpacket -> rsp_mux:sink7_startofpacket
	wire          rsp_demux_007_src0_endofpacket;                                              // rsp_demux_007:src0_endofpacket -> rsp_mux:sink7_endofpacket
	wire          rsp_demux_007_src1_valid;                                                    // rsp_demux_007:src1_valid -> rsp_mux_001:sink7_valid
	wire  [119:0] rsp_demux_007_src1_data;                                                     // rsp_demux_007:src1_data -> rsp_mux_001:sink7_data
	wire          rsp_demux_007_src1_ready;                                                    // rsp_mux_001:sink7_ready -> rsp_demux_007:src1_ready
	wire   [26:0] rsp_demux_007_src1_channel;                                                  // rsp_demux_007:src1_channel -> rsp_mux_001:sink7_channel
	wire          rsp_demux_007_src1_startofpacket;                                            // rsp_demux_007:src1_startofpacket -> rsp_mux_001:sink7_startofpacket
	wire          rsp_demux_007_src1_endofpacket;                                              // rsp_demux_007:src1_endofpacket -> rsp_mux_001:sink7_endofpacket
	wire          rsp_demux_008_src0_valid;                                                    // rsp_demux_008:src0_valid -> rsp_mux:sink8_valid
	wire  [119:0] rsp_demux_008_src0_data;                                                     // rsp_demux_008:src0_data -> rsp_mux:sink8_data
	wire          rsp_demux_008_src0_ready;                                                    // rsp_mux:sink8_ready -> rsp_demux_008:src0_ready
	wire   [26:0] rsp_demux_008_src0_channel;                                                  // rsp_demux_008:src0_channel -> rsp_mux:sink8_channel
	wire          rsp_demux_008_src0_startofpacket;                                            // rsp_demux_008:src0_startofpacket -> rsp_mux:sink8_startofpacket
	wire          rsp_demux_008_src0_endofpacket;                                              // rsp_demux_008:src0_endofpacket -> rsp_mux:sink8_endofpacket
	wire          rsp_demux_008_src1_valid;                                                    // rsp_demux_008:src1_valid -> rsp_mux_001:sink8_valid
	wire  [119:0] rsp_demux_008_src1_data;                                                     // rsp_demux_008:src1_data -> rsp_mux_001:sink8_data
	wire          rsp_demux_008_src1_ready;                                                    // rsp_mux_001:sink8_ready -> rsp_demux_008:src1_ready
	wire   [26:0] rsp_demux_008_src1_channel;                                                  // rsp_demux_008:src1_channel -> rsp_mux_001:sink8_channel
	wire          rsp_demux_008_src1_startofpacket;                                            // rsp_demux_008:src1_startofpacket -> rsp_mux_001:sink8_startofpacket
	wire          rsp_demux_008_src1_endofpacket;                                              // rsp_demux_008:src1_endofpacket -> rsp_mux_001:sink8_endofpacket
	wire          rsp_demux_009_src0_valid;                                                    // rsp_demux_009:src0_valid -> rsp_mux:sink9_valid
	wire  [119:0] rsp_demux_009_src0_data;                                                     // rsp_demux_009:src0_data -> rsp_mux:sink9_data
	wire          rsp_demux_009_src0_ready;                                                    // rsp_mux:sink9_ready -> rsp_demux_009:src0_ready
	wire   [26:0] rsp_demux_009_src0_channel;                                                  // rsp_demux_009:src0_channel -> rsp_mux:sink9_channel
	wire          rsp_demux_009_src0_startofpacket;                                            // rsp_demux_009:src0_startofpacket -> rsp_mux:sink9_startofpacket
	wire          rsp_demux_009_src0_endofpacket;                                              // rsp_demux_009:src0_endofpacket -> rsp_mux:sink9_endofpacket
	wire          rsp_demux_009_src1_valid;                                                    // rsp_demux_009:src1_valid -> rsp_mux_001:sink9_valid
	wire  [119:0] rsp_demux_009_src1_data;                                                     // rsp_demux_009:src1_data -> rsp_mux_001:sink9_data
	wire          rsp_demux_009_src1_ready;                                                    // rsp_mux_001:sink9_ready -> rsp_demux_009:src1_ready
	wire   [26:0] rsp_demux_009_src1_channel;                                                  // rsp_demux_009:src1_channel -> rsp_mux_001:sink9_channel
	wire          rsp_demux_009_src1_startofpacket;                                            // rsp_demux_009:src1_startofpacket -> rsp_mux_001:sink9_startofpacket
	wire          rsp_demux_009_src1_endofpacket;                                              // rsp_demux_009:src1_endofpacket -> rsp_mux_001:sink9_endofpacket
	wire          rsp_demux_010_src0_valid;                                                    // rsp_demux_010:src0_valid -> rsp_mux:sink10_valid
	wire  [119:0] rsp_demux_010_src0_data;                                                     // rsp_demux_010:src0_data -> rsp_mux:sink10_data
	wire          rsp_demux_010_src0_ready;                                                    // rsp_mux:sink10_ready -> rsp_demux_010:src0_ready
	wire   [26:0] rsp_demux_010_src0_channel;                                                  // rsp_demux_010:src0_channel -> rsp_mux:sink10_channel
	wire          rsp_demux_010_src0_startofpacket;                                            // rsp_demux_010:src0_startofpacket -> rsp_mux:sink10_startofpacket
	wire          rsp_demux_010_src0_endofpacket;                                              // rsp_demux_010:src0_endofpacket -> rsp_mux:sink10_endofpacket
	wire          rsp_demux_010_src1_valid;                                                    // rsp_demux_010:src1_valid -> rsp_mux_001:sink10_valid
	wire  [119:0] rsp_demux_010_src1_data;                                                     // rsp_demux_010:src1_data -> rsp_mux_001:sink10_data
	wire          rsp_demux_010_src1_ready;                                                    // rsp_mux_001:sink10_ready -> rsp_demux_010:src1_ready
	wire   [26:0] rsp_demux_010_src1_channel;                                                  // rsp_demux_010:src1_channel -> rsp_mux_001:sink10_channel
	wire          rsp_demux_010_src1_startofpacket;                                            // rsp_demux_010:src1_startofpacket -> rsp_mux_001:sink10_startofpacket
	wire          rsp_demux_010_src1_endofpacket;                                              // rsp_demux_010:src1_endofpacket -> rsp_mux_001:sink10_endofpacket
	wire          rsp_demux_011_src0_valid;                                                    // rsp_demux_011:src0_valid -> rsp_mux:sink11_valid
	wire  [119:0] rsp_demux_011_src0_data;                                                     // rsp_demux_011:src0_data -> rsp_mux:sink11_data
	wire          rsp_demux_011_src0_ready;                                                    // rsp_mux:sink11_ready -> rsp_demux_011:src0_ready
	wire   [26:0] rsp_demux_011_src0_channel;                                                  // rsp_demux_011:src0_channel -> rsp_mux:sink11_channel
	wire          rsp_demux_011_src0_startofpacket;                                            // rsp_demux_011:src0_startofpacket -> rsp_mux:sink11_startofpacket
	wire          rsp_demux_011_src0_endofpacket;                                              // rsp_demux_011:src0_endofpacket -> rsp_mux:sink11_endofpacket
	wire          rsp_demux_011_src1_valid;                                                    // rsp_demux_011:src1_valid -> rsp_mux_001:sink11_valid
	wire  [119:0] rsp_demux_011_src1_data;                                                     // rsp_demux_011:src1_data -> rsp_mux_001:sink11_data
	wire          rsp_demux_011_src1_ready;                                                    // rsp_mux_001:sink11_ready -> rsp_demux_011:src1_ready
	wire   [26:0] rsp_demux_011_src1_channel;                                                  // rsp_demux_011:src1_channel -> rsp_mux_001:sink11_channel
	wire          rsp_demux_011_src1_startofpacket;                                            // rsp_demux_011:src1_startofpacket -> rsp_mux_001:sink11_startofpacket
	wire          rsp_demux_011_src1_endofpacket;                                              // rsp_demux_011:src1_endofpacket -> rsp_mux_001:sink11_endofpacket
	wire          rsp_demux_012_src0_valid;                                                    // rsp_demux_012:src0_valid -> rsp_mux:sink12_valid
	wire  [119:0] rsp_demux_012_src0_data;                                                     // rsp_demux_012:src0_data -> rsp_mux:sink12_data
	wire          rsp_demux_012_src0_ready;                                                    // rsp_mux:sink12_ready -> rsp_demux_012:src0_ready
	wire   [26:0] rsp_demux_012_src0_channel;                                                  // rsp_demux_012:src0_channel -> rsp_mux:sink12_channel
	wire          rsp_demux_012_src0_startofpacket;                                            // rsp_demux_012:src0_startofpacket -> rsp_mux:sink12_startofpacket
	wire          rsp_demux_012_src0_endofpacket;                                              // rsp_demux_012:src0_endofpacket -> rsp_mux:sink12_endofpacket
	wire          rsp_demux_012_src1_valid;                                                    // rsp_demux_012:src1_valid -> rsp_mux_001:sink12_valid
	wire  [119:0] rsp_demux_012_src1_data;                                                     // rsp_demux_012:src1_data -> rsp_mux_001:sink12_data
	wire          rsp_demux_012_src1_ready;                                                    // rsp_mux_001:sink12_ready -> rsp_demux_012:src1_ready
	wire   [26:0] rsp_demux_012_src1_channel;                                                  // rsp_demux_012:src1_channel -> rsp_mux_001:sink12_channel
	wire          rsp_demux_012_src1_startofpacket;                                            // rsp_demux_012:src1_startofpacket -> rsp_mux_001:sink12_startofpacket
	wire          rsp_demux_012_src1_endofpacket;                                              // rsp_demux_012:src1_endofpacket -> rsp_mux_001:sink12_endofpacket
	wire          rsp_demux_013_src0_valid;                                                    // rsp_demux_013:src0_valid -> rsp_mux:sink13_valid
	wire  [119:0] rsp_demux_013_src0_data;                                                     // rsp_demux_013:src0_data -> rsp_mux:sink13_data
	wire          rsp_demux_013_src0_ready;                                                    // rsp_mux:sink13_ready -> rsp_demux_013:src0_ready
	wire   [26:0] rsp_demux_013_src0_channel;                                                  // rsp_demux_013:src0_channel -> rsp_mux:sink13_channel
	wire          rsp_demux_013_src0_startofpacket;                                            // rsp_demux_013:src0_startofpacket -> rsp_mux:sink13_startofpacket
	wire          rsp_demux_013_src0_endofpacket;                                              // rsp_demux_013:src0_endofpacket -> rsp_mux:sink13_endofpacket
	wire          rsp_demux_013_src1_valid;                                                    // rsp_demux_013:src1_valid -> rsp_mux_001:sink13_valid
	wire  [119:0] rsp_demux_013_src1_data;                                                     // rsp_demux_013:src1_data -> rsp_mux_001:sink13_data
	wire          rsp_demux_013_src1_ready;                                                    // rsp_mux_001:sink13_ready -> rsp_demux_013:src1_ready
	wire   [26:0] rsp_demux_013_src1_channel;                                                  // rsp_demux_013:src1_channel -> rsp_mux_001:sink13_channel
	wire          rsp_demux_013_src1_startofpacket;                                            // rsp_demux_013:src1_startofpacket -> rsp_mux_001:sink13_startofpacket
	wire          rsp_demux_013_src1_endofpacket;                                              // rsp_demux_013:src1_endofpacket -> rsp_mux_001:sink13_endofpacket
	wire          rsp_demux_014_src0_valid;                                                    // rsp_demux_014:src0_valid -> rsp_mux:sink14_valid
	wire  [119:0] rsp_demux_014_src0_data;                                                     // rsp_demux_014:src0_data -> rsp_mux:sink14_data
	wire          rsp_demux_014_src0_ready;                                                    // rsp_mux:sink14_ready -> rsp_demux_014:src0_ready
	wire   [26:0] rsp_demux_014_src0_channel;                                                  // rsp_demux_014:src0_channel -> rsp_mux:sink14_channel
	wire          rsp_demux_014_src0_startofpacket;                                            // rsp_demux_014:src0_startofpacket -> rsp_mux:sink14_startofpacket
	wire          rsp_demux_014_src0_endofpacket;                                              // rsp_demux_014:src0_endofpacket -> rsp_mux:sink14_endofpacket
	wire          rsp_demux_014_src1_valid;                                                    // rsp_demux_014:src1_valid -> rsp_mux_001:sink14_valid
	wire  [119:0] rsp_demux_014_src1_data;                                                     // rsp_demux_014:src1_data -> rsp_mux_001:sink14_data
	wire          rsp_demux_014_src1_ready;                                                    // rsp_mux_001:sink14_ready -> rsp_demux_014:src1_ready
	wire   [26:0] rsp_demux_014_src1_channel;                                                  // rsp_demux_014:src1_channel -> rsp_mux_001:sink14_channel
	wire          rsp_demux_014_src1_startofpacket;                                            // rsp_demux_014:src1_startofpacket -> rsp_mux_001:sink14_startofpacket
	wire          rsp_demux_014_src1_endofpacket;                                              // rsp_demux_014:src1_endofpacket -> rsp_mux_001:sink14_endofpacket
	wire          rsp_demux_015_src0_valid;                                                    // rsp_demux_015:src0_valid -> rsp_mux:sink15_valid
	wire  [119:0] rsp_demux_015_src0_data;                                                     // rsp_demux_015:src0_data -> rsp_mux:sink15_data
	wire          rsp_demux_015_src0_ready;                                                    // rsp_mux:sink15_ready -> rsp_demux_015:src0_ready
	wire   [26:0] rsp_demux_015_src0_channel;                                                  // rsp_demux_015:src0_channel -> rsp_mux:sink15_channel
	wire          rsp_demux_015_src0_startofpacket;                                            // rsp_demux_015:src0_startofpacket -> rsp_mux:sink15_startofpacket
	wire          rsp_demux_015_src0_endofpacket;                                              // rsp_demux_015:src0_endofpacket -> rsp_mux:sink15_endofpacket
	wire          rsp_demux_015_src1_valid;                                                    // rsp_demux_015:src1_valid -> rsp_mux_001:sink15_valid
	wire  [119:0] rsp_demux_015_src1_data;                                                     // rsp_demux_015:src1_data -> rsp_mux_001:sink15_data
	wire          rsp_demux_015_src1_ready;                                                    // rsp_mux_001:sink15_ready -> rsp_demux_015:src1_ready
	wire   [26:0] rsp_demux_015_src1_channel;                                                  // rsp_demux_015:src1_channel -> rsp_mux_001:sink15_channel
	wire          rsp_demux_015_src1_startofpacket;                                            // rsp_demux_015:src1_startofpacket -> rsp_mux_001:sink15_startofpacket
	wire          rsp_demux_015_src1_endofpacket;                                              // rsp_demux_015:src1_endofpacket -> rsp_mux_001:sink15_endofpacket
	wire          rsp_demux_016_src0_valid;                                                    // rsp_demux_016:src0_valid -> rsp_mux:sink16_valid
	wire  [119:0] rsp_demux_016_src0_data;                                                     // rsp_demux_016:src0_data -> rsp_mux:sink16_data
	wire          rsp_demux_016_src0_ready;                                                    // rsp_mux:sink16_ready -> rsp_demux_016:src0_ready
	wire   [26:0] rsp_demux_016_src0_channel;                                                  // rsp_demux_016:src0_channel -> rsp_mux:sink16_channel
	wire          rsp_demux_016_src0_startofpacket;                                            // rsp_demux_016:src0_startofpacket -> rsp_mux:sink16_startofpacket
	wire          rsp_demux_016_src0_endofpacket;                                              // rsp_demux_016:src0_endofpacket -> rsp_mux:sink16_endofpacket
	wire          rsp_demux_016_src1_valid;                                                    // rsp_demux_016:src1_valid -> rsp_mux_001:sink16_valid
	wire  [119:0] rsp_demux_016_src1_data;                                                     // rsp_demux_016:src1_data -> rsp_mux_001:sink16_data
	wire          rsp_demux_016_src1_ready;                                                    // rsp_mux_001:sink16_ready -> rsp_demux_016:src1_ready
	wire   [26:0] rsp_demux_016_src1_channel;                                                  // rsp_demux_016:src1_channel -> rsp_mux_001:sink16_channel
	wire          rsp_demux_016_src1_startofpacket;                                            // rsp_demux_016:src1_startofpacket -> rsp_mux_001:sink16_startofpacket
	wire          rsp_demux_016_src1_endofpacket;                                              // rsp_demux_016:src1_endofpacket -> rsp_mux_001:sink16_endofpacket
	wire          rsp_demux_017_src0_valid;                                                    // rsp_demux_017:src0_valid -> rsp_mux:sink17_valid
	wire  [119:0] rsp_demux_017_src0_data;                                                     // rsp_demux_017:src0_data -> rsp_mux:sink17_data
	wire          rsp_demux_017_src0_ready;                                                    // rsp_mux:sink17_ready -> rsp_demux_017:src0_ready
	wire   [26:0] rsp_demux_017_src0_channel;                                                  // rsp_demux_017:src0_channel -> rsp_mux:sink17_channel
	wire          rsp_demux_017_src0_startofpacket;                                            // rsp_demux_017:src0_startofpacket -> rsp_mux:sink17_startofpacket
	wire          rsp_demux_017_src0_endofpacket;                                              // rsp_demux_017:src0_endofpacket -> rsp_mux:sink17_endofpacket
	wire          rsp_demux_017_src1_valid;                                                    // rsp_demux_017:src1_valid -> rsp_mux_001:sink17_valid
	wire  [119:0] rsp_demux_017_src1_data;                                                     // rsp_demux_017:src1_data -> rsp_mux_001:sink17_data
	wire          rsp_demux_017_src1_ready;                                                    // rsp_mux_001:sink17_ready -> rsp_demux_017:src1_ready
	wire   [26:0] rsp_demux_017_src1_channel;                                                  // rsp_demux_017:src1_channel -> rsp_mux_001:sink17_channel
	wire          rsp_demux_017_src1_startofpacket;                                            // rsp_demux_017:src1_startofpacket -> rsp_mux_001:sink17_startofpacket
	wire          rsp_demux_017_src1_endofpacket;                                              // rsp_demux_017:src1_endofpacket -> rsp_mux_001:sink17_endofpacket
	wire          rsp_demux_018_src0_valid;                                                    // rsp_demux_018:src0_valid -> rsp_mux:sink18_valid
	wire  [119:0] rsp_demux_018_src0_data;                                                     // rsp_demux_018:src0_data -> rsp_mux:sink18_data
	wire          rsp_demux_018_src0_ready;                                                    // rsp_mux:sink18_ready -> rsp_demux_018:src0_ready
	wire   [26:0] rsp_demux_018_src0_channel;                                                  // rsp_demux_018:src0_channel -> rsp_mux:sink18_channel
	wire          rsp_demux_018_src0_startofpacket;                                            // rsp_demux_018:src0_startofpacket -> rsp_mux:sink18_startofpacket
	wire          rsp_demux_018_src0_endofpacket;                                              // rsp_demux_018:src0_endofpacket -> rsp_mux:sink18_endofpacket
	wire          rsp_demux_018_src1_valid;                                                    // rsp_demux_018:src1_valid -> rsp_mux_001:sink18_valid
	wire  [119:0] rsp_demux_018_src1_data;                                                     // rsp_demux_018:src1_data -> rsp_mux_001:sink18_data
	wire          rsp_demux_018_src1_ready;                                                    // rsp_mux_001:sink18_ready -> rsp_demux_018:src1_ready
	wire   [26:0] rsp_demux_018_src1_channel;                                                  // rsp_demux_018:src1_channel -> rsp_mux_001:sink18_channel
	wire          rsp_demux_018_src1_startofpacket;                                            // rsp_demux_018:src1_startofpacket -> rsp_mux_001:sink18_startofpacket
	wire          rsp_demux_018_src1_endofpacket;                                              // rsp_demux_018:src1_endofpacket -> rsp_mux_001:sink18_endofpacket
	wire          rsp_demux_019_src0_valid;                                                    // rsp_demux_019:src0_valid -> rsp_mux:sink19_valid
	wire  [119:0] rsp_demux_019_src0_data;                                                     // rsp_demux_019:src0_data -> rsp_mux:sink19_data
	wire          rsp_demux_019_src0_ready;                                                    // rsp_mux:sink19_ready -> rsp_demux_019:src0_ready
	wire   [26:0] rsp_demux_019_src0_channel;                                                  // rsp_demux_019:src0_channel -> rsp_mux:sink19_channel
	wire          rsp_demux_019_src0_startofpacket;                                            // rsp_demux_019:src0_startofpacket -> rsp_mux:sink19_startofpacket
	wire          rsp_demux_019_src0_endofpacket;                                              // rsp_demux_019:src0_endofpacket -> rsp_mux:sink19_endofpacket
	wire          rsp_demux_019_src1_valid;                                                    // rsp_demux_019:src1_valid -> rsp_mux_001:sink19_valid
	wire  [119:0] rsp_demux_019_src1_data;                                                     // rsp_demux_019:src1_data -> rsp_mux_001:sink19_data
	wire          rsp_demux_019_src1_ready;                                                    // rsp_mux_001:sink19_ready -> rsp_demux_019:src1_ready
	wire   [26:0] rsp_demux_019_src1_channel;                                                  // rsp_demux_019:src1_channel -> rsp_mux_001:sink19_channel
	wire          rsp_demux_019_src1_startofpacket;                                            // rsp_demux_019:src1_startofpacket -> rsp_mux_001:sink19_startofpacket
	wire          rsp_demux_019_src1_endofpacket;                                              // rsp_demux_019:src1_endofpacket -> rsp_mux_001:sink19_endofpacket
	wire          rsp_demux_020_src0_valid;                                                    // rsp_demux_020:src0_valid -> rsp_mux:sink20_valid
	wire  [119:0] rsp_demux_020_src0_data;                                                     // rsp_demux_020:src0_data -> rsp_mux:sink20_data
	wire          rsp_demux_020_src0_ready;                                                    // rsp_mux:sink20_ready -> rsp_demux_020:src0_ready
	wire   [26:0] rsp_demux_020_src0_channel;                                                  // rsp_demux_020:src0_channel -> rsp_mux:sink20_channel
	wire          rsp_demux_020_src0_startofpacket;                                            // rsp_demux_020:src0_startofpacket -> rsp_mux:sink20_startofpacket
	wire          rsp_demux_020_src0_endofpacket;                                              // rsp_demux_020:src0_endofpacket -> rsp_mux:sink20_endofpacket
	wire          rsp_demux_020_src1_valid;                                                    // rsp_demux_020:src1_valid -> rsp_mux_001:sink20_valid
	wire  [119:0] rsp_demux_020_src1_data;                                                     // rsp_demux_020:src1_data -> rsp_mux_001:sink20_data
	wire          rsp_demux_020_src1_ready;                                                    // rsp_mux_001:sink20_ready -> rsp_demux_020:src1_ready
	wire   [26:0] rsp_demux_020_src1_channel;                                                  // rsp_demux_020:src1_channel -> rsp_mux_001:sink20_channel
	wire          rsp_demux_020_src1_startofpacket;                                            // rsp_demux_020:src1_startofpacket -> rsp_mux_001:sink20_startofpacket
	wire          rsp_demux_020_src1_endofpacket;                                              // rsp_demux_020:src1_endofpacket -> rsp_mux_001:sink20_endofpacket
	wire          rsp_demux_021_src0_valid;                                                    // rsp_demux_021:src0_valid -> rsp_mux:sink21_valid
	wire  [119:0] rsp_demux_021_src0_data;                                                     // rsp_demux_021:src0_data -> rsp_mux:sink21_data
	wire          rsp_demux_021_src0_ready;                                                    // rsp_mux:sink21_ready -> rsp_demux_021:src0_ready
	wire   [26:0] rsp_demux_021_src0_channel;                                                  // rsp_demux_021:src0_channel -> rsp_mux:sink21_channel
	wire          rsp_demux_021_src0_startofpacket;                                            // rsp_demux_021:src0_startofpacket -> rsp_mux:sink21_startofpacket
	wire          rsp_demux_021_src0_endofpacket;                                              // rsp_demux_021:src0_endofpacket -> rsp_mux:sink21_endofpacket
	wire          rsp_demux_021_src1_valid;                                                    // rsp_demux_021:src1_valid -> rsp_mux_001:sink21_valid
	wire  [119:0] rsp_demux_021_src1_data;                                                     // rsp_demux_021:src1_data -> rsp_mux_001:sink21_data
	wire          rsp_demux_021_src1_ready;                                                    // rsp_mux_001:sink21_ready -> rsp_demux_021:src1_ready
	wire   [26:0] rsp_demux_021_src1_channel;                                                  // rsp_demux_021:src1_channel -> rsp_mux_001:sink21_channel
	wire          rsp_demux_021_src1_startofpacket;                                            // rsp_demux_021:src1_startofpacket -> rsp_mux_001:sink21_startofpacket
	wire          rsp_demux_021_src1_endofpacket;                                              // rsp_demux_021:src1_endofpacket -> rsp_mux_001:sink21_endofpacket
	wire          rsp_demux_022_src0_valid;                                                    // rsp_demux_022:src0_valid -> rsp_mux:sink22_valid
	wire  [119:0] rsp_demux_022_src0_data;                                                     // rsp_demux_022:src0_data -> rsp_mux:sink22_data
	wire          rsp_demux_022_src0_ready;                                                    // rsp_mux:sink22_ready -> rsp_demux_022:src0_ready
	wire   [26:0] rsp_demux_022_src0_channel;                                                  // rsp_demux_022:src0_channel -> rsp_mux:sink22_channel
	wire          rsp_demux_022_src0_startofpacket;                                            // rsp_demux_022:src0_startofpacket -> rsp_mux:sink22_startofpacket
	wire          rsp_demux_022_src0_endofpacket;                                              // rsp_demux_022:src0_endofpacket -> rsp_mux:sink22_endofpacket
	wire          rsp_demux_022_src1_valid;                                                    // rsp_demux_022:src1_valid -> rsp_mux_001:sink22_valid
	wire  [119:0] rsp_demux_022_src1_data;                                                     // rsp_demux_022:src1_data -> rsp_mux_001:sink22_data
	wire          rsp_demux_022_src1_ready;                                                    // rsp_mux_001:sink22_ready -> rsp_demux_022:src1_ready
	wire   [26:0] rsp_demux_022_src1_channel;                                                  // rsp_demux_022:src1_channel -> rsp_mux_001:sink22_channel
	wire          rsp_demux_022_src1_startofpacket;                                            // rsp_demux_022:src1_startofpacket -> rsp_mux_001:sink22_startofpacket
	wire          rsp_demux_022_src1_endofpacket;                                              // rsp_demux_022:src1_endofpacket -> rsp_mux_001:sink22_endofpacket
	wire          rsp_demux_023_src0_valid;                                                    // rsp_demux_023:src0_valid -> rsp_mux:sink23_valid
	wire  [119:0] rsp_demux_023_src0_data;                                                     // rsp_demux_023:src0_data -> rsp_mux:sink23_data
	wire          rsp_demux_023_src0_ready;                                                    // rsp_mux:sink23_ready -> rsp_demux_023:src0_ready
	wire   [26:0] rsp_demux_023_src0_channel;                                                  // rsp_demux_023:src0_channel -> rsp_mux:sink23_channel
	wire          rsp_demux_023_src0_startofpacket;                                            // rsp_demux_023:src0_startofpacket -> rsp_mux:sink23_startofpacket
	wire          rsp_demux_023_src0_endofpacket;                                              // rsp_demux_023:src0_endofpacket -> rsp_mux:sink23_endofpacket
	wire          rsp_demux_023_src1_valid;                                                    // rsp_demux_023:src1_valid -> rsp_mux_001:sink23_valid
	wire  [119:0] rsp_demux_023_src1_data;                                                     // rsp_demux_023:src1_data -> rsp_mux_001:sink23_data
	wire          rsp_demux_023_src1_ready;                                                    // rsp_mux_001:sink23_ready -> rsp_demux_023:src1_ready
	wire   [26:0] rsp_demux_023_src1_channel;                                                  // rsp_demux_023:src1_channel -> rsp_mux_001:sink23_channel
	wire          rsp_demux_023_src1_startofpacket;                                            // rsp_demux_023:src1_startofpacket -> rsp_mux_001:sink23_startofpacket
	wire          rsp_demux_023_src1_endofpacket;                                              // rsp_demux_023:src1_endofpacket -> rsp_mux_001:sink23_endofpacket
	wire          rsp_demux_024_src0_valid;                                                    // rsp_demux_024:src0_valid -> rsp_mux:sink24_valid
	wire  [119:0] rsp_demux_024_src0_data;                                                     // rsp_demux_024:src0_data -> rsp_mux:sink24_data
	wire          rsp_demux_024_src0_ready;                                                    // rsp_mux:sink24_ready -> rsp_demux_024:src0_ready
	wire   [26:0] rsp_demux_024_src0_channel;                                                  // rsp_demux_024:src0_channel -> rsp_mux:sink24_channel
	wire          rsp_demux_024_src0_startofpacket;                                            // rsp_demux_024:src0_startofpacket -> rsp_mux:sink24_startofpacket
	wire          rsp_demux_024_src0_endofpacket;                                              // rsp_demux_024:src0_endofpacket -> rsp_mux:sink24_endofpacket
	wire          rsp_demux_024_src1_valid;                                                    // rsp_demux_024:src1_valid -> rsp_mux_001:sink24_valid
	wire  [119:0] rsp_demux_024_src1_data;                                                     // rsp_demux_024:src1_data -> rsp_mux_001:sink24_data
	wire          rsp_demux_024_src1_ready;                                                    // rsp_mux_001:sink24_ready -> rsp_demux_024:src1_ready
	wire   [26:0] rsp_demux_024_src1_channel;                                                  // rsp_demux_024:src1_channel -> rsp_mux_001:sink24_channel
	wire          rsp_demux_024_src1_startofpacket;                                            // rsp_demux_024:src1_startofpacket -> rsp_mux_001:sink24_startofpacket
	wire          rsp_demux_024_src1_endofpacket;                                              // rsp_demux_024:src1_endofpacket -> rsp_mux_001:sink24_endofpacket
	wire          rsp_demux_025_src0_valid;                                                    // rsp_demux_025:src0_valid -> rsp_mux:sink25_valid
	wire  [119:0] rsp_demux_025_src0_data;                                                     // rsp_demux_025:src0_data -> rsp_mux:sink25_data
	wire          rsp_demux_025_src0_ready;                                                    // rsp_mux:sink25_ready -> rsp_demux_025:src0_ready
	wire   [26:0] rsp_demux_025_src0_channel;                                                  // rsp_demux_025:src0_channel -> rsp_mux:sink25_channel
	wire          rsp_demux_025_src0_startofpacket;                                            // rsp_demux_025:src0_startofpacket -> rsp_mux:sink25_startofpacket
	wire          rsp_demux_025_src0_endofpacket;                                              // rsp_demux_025:src0_endofpacket -> rsp_mux:sink25_endofpacket
	wire          rsp_demux_025_src1_valid;                                                    // rsp_demux_025:src1_valid -> rsp_mux_001:sink25_valid
	wire  [119:0] rsp_demux_025_src1_data;                                                     // rsp_demux_025:src1_data -> rsp_mux_001:sink25_data
	wire          rsp_demux_025_src1_ready;                                                    // rsp_mux_001:sink25_ready -> rsp_demux_025:src1_ready
	wire   [26:0] rsp_demux_025_src1_channel;                                                  // rsp_demux_025:src1_channel -> rsp_mux_001:sink25_channel
	wire          rsp_demux_025_src1_startofpacket;                                            // rsp_demux_025:src1_startofpacket -> rsp_mux_001:sink25_startofpacket
	wire          rsp_demux_025_src1_endofpacket;                                              // rsp_demux_025:src1_endofpacket -> rsp_mux_001:sink25_endofpacket
	wire          rsp_demux_026_src0_valid;                                                    // rsp_demux_026:src0_valid -> rsp_mux:sink26_valid
	wire  [119:0] rsp_demux_026_src0_data;                                                     // rsp_demux_026:src0_data -> rsp_mux:sink26_data
	wire          rsp_demux_026_src0_ready;                                                    // rsp_mux:sink26_ready -> rsp_demux_026:src0_ready
	wire   [26:0] rsp_demux_026_src0_channel;                                                  // rsp_demux_026:src0_channel -> rsp_mux:sink26_channel
	wire          rsp_demux_026_src0_startofpacket;                                            // rsp_demux_026:src0_startofpacket -> rsp_mux:sink26_startofpacket
	wire          rsp_demux_026_src0_endofpacket;                                              // rsp_demux_026:src0_endofpacket -> rsp_mux:sink26_endofpacket
	wire          rsp_demux_026_src1_valid;                                                    // rsp_demux_026:src1_valid -> rsp_mux_001:sink26_valid
	wire  [119:0] rsp_demux_026_src1_data;                                                     // rsp_demux_026:src1_data -> rsp_mux_001:sink26_data
	wire          rsp_demux_026_src1_ready;                                                    // rsp_mux_001:sink26_ready -> rsp_demux_026:src1_ready
	wire   [26:0] rsp_demux_026_src1_channel;                                                  // rsp_demux_026:src1_channel -> rsp_mux_001:sink26_channel
	wire          rsp_demux_026_src1_startofpacket;                                            // rsp_demux_026:src1_startofpacket -> rsp_mux_001:sink26_startofpacket
	wire          rsp_demux_026_src1_endofpacket;                                              // rsp_demux_026:src1_endofpacket -> rsp_mux_001:sink26_endofpacket
	wire   [26:0] arm_a9_hps_h2f_lw_axi_master_wr_limiter_cmd_valid_data;                      // ARM_A9_HPS_h2f_lw_axi_master_wr_limiter:cmd_src_valid -> cmd_demux:sink_valid
	wire   [26:0] arm_a9_hps_h2f_lw_axi_master_rd_limiter_cmd_valid_data;                      // ARM_A9_HPS_h2f_lw_axi_master_rd_limiter:cmd_src_valid -> cmd_demux_001:sink_valid
	wire          av_config_avalon_av_config_slave_agent_rdata_fifo_out_valid;                 // AV_Config_avalon_av_config_slave_agent_rdata_fifo:out_valid -> avalon_st_adapter:in_0_valid
	wire   [33:0] av_config_avalon_av_config_slave_agent_rdata_fifo_out_data;                  // AV_Config_avalon_av_config_slave_agent_rdata_fifo:out_data -> avalon_st_adapter:in_0_data
	wire          av_config_avalon_av_config_slave_agent_rdata_fifo_out_ready;                 // avalon_st_adapter:in_0_ready -> AV_Config_avalon_av_config_slave_agent_rdata_fifo:out_ready
	wire          avalon_st_adapter_out_0_valid;                                               // avalon_st_adapter:out_0_valid -> AV_Config_avalon_av_config_slave_agent:rdata_fifo_sink_valid
	wire   [33:0] avalon_st_adapter_out_0_data;                                                // avalon_st_adapter:out_0_data -> AV_Config_avalon_av_config_slave_agent:rdata_fifo_sink_data
	wire          avalon_st_adapter_out_0_ready;                                               // AV_Config_avalon_av_config_slave_agent:rdata_fifo_sink_ready -> avalon_st_adapter:out_0_ready
	wire    [0:0] avalon_st_adapter_out_0_error;                                               // avalon_st_adapter:out_0_error -> AV_Config_avalon_av_config_slave_agent:rdata_fifo_sink_error
	wire          vga_subsystem_char_buffer_control_slave_agent_rdata_fifo_out_valid;          // VGA_Subsystem_char_buffer_control_slave_agent_rdata_fifo:out_valid -> avalon_st_adapter_001:in_0_valid
	wire   [33:0] vga_subsystem_char_buffer_control_slave_agent_rdata_fifo_out_data;           // VGA_Subsystem_char_buffer_control_slave_agent_rdata_fifo:out_data -> avalon_st_adapter_001:in_0_data
	wire          vga_subsystem_char_buffer_control_slave_agent_rdata_fifo_out_ready;          // avalon_st_adapter_001:in_0_ready -> VGA_Subsystem_char_buffer_control_slave_agent_rdata_fifo:out_ready
	wire          avalon_st_adapter_001_out_0_valid;                                           // avalon_st_adapter_001:out_0_valid -> VGA_Subsystem_char_buffer_control_slave_agent:rdata_fifo_sink_valid
	wire   [33:0] avalon_st_adapter_001_out_0_data;                                            // avalon_st_adapter_001:out_0_data -> VGA_Subsystem_char_buffer_control_slave_agent:rdata_fifo_sink_data
	wire          avalon_st_adapter_001_out_0_ready;                                           // VGA_Subsystem_char_buffer_control_slave_agent:rdata_fifo_sink_ready -> avalon_st_adapter_001:out_0_ready
	wire    [0:0] avalon_st_adapter_001_out_0_error;                                           // avalon_st_adapter_001:out_0_error -> VGA_Subsystem_char_buffer_control_slave_agent:rdata_fifo_sink_error
	wire          n0_from_hps_s1_agent_rdata_fifo_out_valid;                                   // n0_from_hps_s1_agent_rdata_fifo:out_valid -> avalon_st_adapter_002:in_0_valid
	wire   [33:0] n0_from_hps_s1_agent_rdata_fifo_out_data;                                    // n0_from_hps_s1_agent_rdata_fifo:out_data -> avalon_st_adapter_002:in_0_data
	wire          n0_from_hps_s1_agent_rdata_fifo_out_ready;                                   // avalon_st_adapter_002:in_0_ready -> n0_from_hps_s1_agent_rdata_fifo:out_ready
	wire          avalon_st_adapter_002_out_0_valid;                                           // avalon_st_adapter_002:out_0_valid -> n0_from_hps_s1_agent:rdata_fifo_sink_valid
	wire   [33:0] avalon_st_adapter_002_out_0_data;                                            // avalon_st_adapter_002:out_0_data -> n0_from_hps_s1_agent:rdata_fifo_sink_data
	wire          avalon_st_adapter_002_out_0_ready;                                           // n0_from_hps_s1_agent:rdata_fifo_sink_ready -> avalon_st_adapter_002:out_0_ready
	wire    [0:0] avalon_st_adapter_002_out_0_error;                                           // avalon_st_adapter_002:out_0_error -> n0_from_hps_s1_agent:rdata_fifo_sink_error
	wire          nn_from_hps_s1_agent_rdata_fifo_out_valid;                                   // nn_from_hps_s1_agent_rdata_fifo:out_valid -> avalon_st_adapter_003:in_0_valid
	wire   [33:0] nn_from_hps_s1_agent_rdata_fifo_out_data;                                    // nn_from_hps_s1_agent_rdata_fifo:out_data -> avalon_st_adapter_003:in_0_data
	wire          nn_from_hps_s1_agent_rdata_fifo_out_ready;                                   // avalon_st_adapter_003:in_0_ready -> nn_from_hps_s1_agent_rdata_fifo:out_ready
	wire          avalon_st_adapter_003_out_0_valid;                                           // avalon_st_adapter_003:out_0_valid -> nn_from_hps_s1_agent:rdata_fifo_sink_valid
	wire   [33:0] avalon_st_adapter_003_out_0_data;                                            // avalon_st_adapter_003:out_0_data -> nn_from_hps_s1_agent:rdata_fifo_sink_data
	wire          avalon_st_adapter_003_out_0_ready;                                           // nn_from_hps_s1_agent:rdata_fifo_sink_ready -> avalon_st_adapter_003:out_0_ready
	wire    [0:0] avalon_st_adapter_003_out_0_error;                                           // avalon_st_adapter_003:out_0_error -> nn_from_hps_s1_agent:rdata_fifo_sink_error
	wire          ns_from_hps_s1_agent_rdata_fifo_out_valid;                                   // ns_from_hps_s1_agent_rdata_fifo:out_valid -> avalon_st_adapter_004:in_0_valid
	wire   [33:0] ns_from_hps_s1_agent_rdata_fifo_out_data;                                    // ns_from_hps_s1_agent_rdata_fifo:out_data -> avalon_st_adapter_004:in_0_data
	wire          ns_from_hps_s1_agent_rdata_fifo_out_ready;                                   // avalon_st_adapter_004:in_0_ready -> ns_from_hps_s1_agent_rdata_fifo:out_ready
	wire          avalon_st_adapter_004_out_0_valid;                                           // avalon_st_adapter_004:out_0_valid -> ns_from_hps_s1_agent:rdata_fifo_sink_valid
	wire   [33:0] avalon_st_adapter_004_out_0_data;                                            // avalon_st_adapter_004:out_0_data -> ns_from_hps_s1_agent:rdata_fifo_sink_data
	wire          avalon_st_adapter_004_out_0_ready;                                           // ns_from_hps_s1_agent:rdata_fifo_sink_ready -> avalon_st_adapter_004:out_0_ready
	wire    [0:0] avalon_st_adapter_004_out_0_error;                                           // avalon_st_adapter_004:out_0_error -> ns_from_hps_s1_agent:rdata_fifo_sink_error
	wire          nw_from_hps_s1_agent_rdata_fifo_out_valid;                                   // nw_from_hps_s1_agent_rdata_fifo:out_valid -> avalon_st_adapter_005:in_0_valid
	wire   [33:0] nw_from_hps_s1_agent_rdata_fifo_out_data;                                    // nw_from_hps_s1_agent_rdata_fifo:out_data -> avalon_st_adapter_005:in_0_data
	wire          nw_from_hps_s1_agent_rdata_fifo_out_ready;                                   // avalon_st_adapter_005:in_0_ready -> nw_from_hps_s1_agent_rdata_fifo:out_ready
	wire          avalon_st_adapter_005_out_0_valid;                                           // avalon_st_adapter_005:out_0_valid -> nw_from_hps_s1_agent:rdata_fifo_sink_valid
	wire   [33:0] avalon_st_adapter_005_out_0_data;                                            // avalon_st_adapter_005:out_0_data -> nw_from_hps_s1_agent:rdata_fifo_sink_data
	wire          avalon_st_adapter_005_out_0_ready;                                           // nw_from_hps_s1_agent:rdata_fifo_sink_ready -> avalon_st_adapter_005:out_0_ready
	wire    [0:0] avalon_st_adapter_005_out_0_error;                                           // avalon_st_adapter_005:out_0_error -> nw_from_hps_s1_agent:rdata_fifo_sink_error
	wire          ne_from_hps_s1_agent_rdata_fifo_out_valid;                                   // ne_from_hps_s1_agent_rdata_fifo:out_valid -> avalon_st_adapter_006:in_0_valid
	wire   [33:0] ne_from_hps_s1_agent_rdata_fifo_out_data;                                    // ne_from_hps_s1_agent_rdata_fifo:out_data -> avalon_st_adapter_006:in_0_data
	wire          ne_from_hps_s1_agent_rdata_fifo_out_ready;                                   // avalon_st_adapter_006:in_0_ready -> ne_from_hps_s1_agent_rdata_fifo:out_ready
	wire          avalon_st_adapter_006_out_0_valid;                                           // avalon_st_adapter_006:out_0_valid -> ne_from_hps_s1_agent:rdata_fifo_sink_valid
	wire   [33:0] avalon_st_adapter_006_out_0_data;                                            // avalon_st_adapter_006:out_0_data -> ne_from_hps_s1_agent:rdata_fifo_sink_data
	wire          avalon_st_adapter_006_out_0_ready;                                           // ne_from_hps_s1_agent:rdata_fifo_sink_ready -> avalon_st_adapter_006:out_0_ready
	wire    [0:0] avalon_st_adapter_006_out_0_error;                                           // avalon_st_adapter_006:out_0_error -> ne_from_hps_s1_agent:rdata_fifo_sink_error
	wire          nnw_from_hps_s1_agent_rdata_fifo_out_valid;                                  // nnw_from_hps_s1_agent_rdata_fifo:out_valid -> avalon_st_adapter_007:in_0_valid
	wire   [33:0] nnw_from_hps_s1_agent_rdata_fifo_out_data;                                   // nnw_from_hps_s1_agent_rdata_fifo:out_data -> avalon_st_adapter_007:in_0_data
	wire          nnw_from_hps_s1_agent_rdata_fifo_out_ready;                                  // avalon_st_adapter_007:in_0_ready -> nnw_from_hps_s1_agent_rdata_fifo:out_ready
	wire          avalon_st_adapter_007_out_0_valid;                                           // avalon_st_adapter_007:out_0_valid -> nnw_from_hps_s1_agent:rdata_fifo_sink_valid
	wire   [33:0] avalon_st_adapter_007_out_0_data;                                            // avalon_st_adapter_007:out_0_data -> nnw_from_hps_s1_agent:rdata_fifo_sink_data
	wire          avalon_st_adapter_007_out_0_ready;                                           // nnw_from_hps_s1_agent:rdata_fifo_sink_ready -> avalon_st_adapter_007:out_0_ready
	wire    [0:0] avalon_st_adapter_007_out_0_error;                                           // avalon_st_adapter_007:out_0_error -> nnw_from_hps_s1_agent:rdata_fifo_sink_error
	wire          nne_from_hps_s1_agent_rdata_fifo_out_valid;                                  // nne_from_hps_s1_agent_rdata_fifo:out_valid -> avalon_st_adapter_008:in_0_valid
	wire   [33:0] nne_from_hps_s1_agent_rdata_fifo_out_data;                                   // nne_from_hps_s1_agent_rdata_fifo:out_data -> avalon_st_adapter_008:in_0_data
	wire          nne_from_hps_s1_agent_rdata_fifo_out_ready;                                  // avalon_st_adapter_008:in_0_ready -> nne_from_hps_s1_agent_rdata_fifo:out_ready
	wire          avalon_st_adapter_008_out_0_valid;                                           // avalon_st_adapter_008:out_0_valid -> nne_from_hps_s1_agent:rdata_fifo_sink_valid
	wire   [33:0] avalon_st_adapter_008_out_0_data;                                            // avalon_st_adapter_008:out_0_data -> nne_from_hps_s1_agent:rdata_fifo_sink_data
	wire          avalon_st_adapter_008_out_0_ready;                                           // nne_from_hps_s1_agent:rdata_fifo_sink_ready -> avalon_st_adapter_008:out_0_ready
	wire    [0:0] avalon_st_adapter_008_out_0_error;                                           // avalon_st_adapter_008:out_0_error -> nne_from_hps_s1_agent:rdata_fifo_sink_error
	wire          nsw_from_hps_s1_agent_rdata_fifo_out_valid;                                  // nsw_from_hps_s1_agent_rdata_fifo:out_valid -> avalon_st_adapter_009:in_0_valid
	wire   [33:0] nsw_from_hps_s1_agent_rdata_fifo_out_data;                                   // nsw_from_hps_s1_agent_rdata_fifo:out_data -> avalon_st_adapter_009:in_0_data
	wire          nsw_from_hps_s1_agent_rdata_fifo_out_ready;                                  // avalon_st_adapter_009:in_0_ready -> nsw_from_hps_s1_agent_rdata_fifo:out_ready
	wire          avalon_st_adapter_009_out_0_valid;                                           // avalon_st_adapter_009:out_0_valid -> nsw_from_hps_s1_agent:rdata_fifo_sink_valid
	wire   [33:0] avalon_st_adapter_009_out_0_data;                                            // avalon_st_adapter_009:out_0_data -> nsw_from_hps_s1_agent:rdata_fifo_sink_data
	wire          avalon_st_adapter_009_out_0_ready;                                           // nsw_from_hps_s1_agent:rdata_fifo_sink_ready -> avalon_st_adapter_009:out_0_ready
	wire    [0:0] avalon_st_adapter_009_out_0_error;                                           // avalon_st_adapter_009:out_0_error -> nsw_from_hps_s1_agent:rdata_fifo_sink_error
	wire          nse_from_hps_s1_agent_rdata_fifo_out_valid;                                  // nse_from_hps_s1_agent_rdata_fifo:out_valid -> avalon_st_adapter_010:in_0_valid
	wire   [33:0] nse_from_hps_s1_agent_rdata_fifo_out_data;                                   // nse_from_hps_s1_agent_rdata_fifo:out_data -> avalon_st_adapter_010:in_0_data
	wire          nse_from_hps_s1_agent_rdata_fifo_out_ready;                                  // avalon_st_adapter_010:in_0_ready -> nse_from_hps_s1_agent_rdata_fifo:out_ready
	wire          avalon_st_adapter_010_out_0_valid;                                           // avalon_st_adapter_010:out_0_valid -> nse_from_hps_s1_agent:rdata_fifo_sink_valid
	wire   [33:0] avalon_st_adapter_010_out_0_data;                                            // avalon_st_adapter_010:out_0_data -> nse_from_hps_s1_agent:rdata_fifo_sink_data
	wire          avalon_st_adapter_010_out_0_ready;                                           // nse_from_hps_s1_agent:rdata_fifo_sink_ready -> avalon_st_adapter_010:out_0_ready
	wire    [0:0] avalon_st_adapter_010_out_0_error;                                           // avalon_st_adapter_010:out_0_error -> nse_from_hps_s1_agent:rdata_fifo_sink_error
	wire          n0_from_fpga_s1_agent_rdata_fifo_out_valid;                                  // n0_from_fpga_s1_agent_rdata_fifo:out_valid -> avalon_st_adapter_011:in_0_valid
	wire   [33:0] n0_from_fpga_s1_agent_rdata_fifo_out_data;                                   // n0_from_fpga_s1_agent_rdata_fifo:out_data -> avalon_st_adapter_011:in_0_data
	wire          n0_from_fpga_s1_agent_rdata_fifo_out_ready;                                  // avalon_st_adapter_011:in_0_ready -> n0_from_fpga_s1_agent_rdata_fifo:out_ready
	wire          avalon_st_adapter_011_out_0_valid;                                           // avalon_st_adapter_011:out_0_valid -> n0_from_fpga_s1_agent:rdata_fifo_sink_valid
	wire   [33:0] avalon_st_adapter_011_out_0_data;                                            // avalon_st_adapter_011:out_0_data -> n0_from_fpga_s1_agent:rdata_fifo_sink_data
	wire          avalon_st_adapter_011_out_0_ready;                                           // n0_from_fpga_s1_agent:rdata_fifo_sink_ready -> avalon_st_adapter_011:out_0_ready
	wire    [0:0] avalon_st_adapter_011_out_0_error;                                           // avalon_st_adapter_011:out_0_error -> n0_from_fpga_s1_agent:rdata_fifo_sink_error
	wire          nn_from_fpga_s1_agent_rdata_fifo_out_valid;                                  // nn_from_fpga_s1_agent_rdata_fifo:out_valid -> avalon_st_adapter_012:in_0_valid
	wire   [33:0] nn_from_fpga_s1_agent_rdata_fifo_out_data;                                   // nn_from_fpga_s1_agent_rdata_fifo:out_data -> avalon_st_adapter_012:in_0_data
	wire          nn_from_fpga_s1_agent_rdata_fifo_out_ready;                                  // avalon_st_adapter_012:in_0_ready -> nn_from_fpga_s1_agent_rdata_fifo:out_ready
	wire          avalon_st_adapter_012_out_0_valid;                                           // avalon_st_adapter_012:out_0_valid -> nn_from_fpga_s1_agent:rdata_fifo_sink_valid
	wire   [33:0] avalon_st_adapter_012_out_0_data;                                            // avalon_st_adapter_012:out_0_data -> nn_from_fpga_s1_agent:rdata_fifo_sink_data
	wire          avalon_st_adapter_012_out_0_ready;                                           // nn_from_fpga_s1_agent:rdata_fifo_sink_ready -> avalon_st_adapter_012:out_0_ready
	wire    [0:0] avalon_st_adapter_012_out_0_error;                                           // avalon_st_adapter_012:out_0_error -> nn_from_fpga_s1_agent:rdata_fifo_sink_error
	wire          ns_from_fpga_s1_agent_rdata_fifo_out_valid;                                  // ns_from_fpga_s1_agent_rdata_fifo:out_valid -> avalon_st_adapter_013:in_0_valid
	wire   [33:0] ns_from_fpga_s1_agent_rdata_fifo_out_data;                                   // ns_from_fpga_s1_agent_rdata_fifo:out_data -> avalon_st_adapter_013:in_0_data
	wire          ns_from_fpga_s1_agent_rdata_fifo_out_ready;                                  // avalon_st_adapter_013:in_0_ready -> ns_from_fpga_s1_agent_rdata_fifo:out_ready
	wire          avalon_st_adapter_013_out_0_valid;                                           // avalon_st_adapter_013:out_0_valid -> ns_from_fpga_s1_agent:rdata_fifo_sink_valid
	wire   [33:0] avalon_st_adapter_013_out_0_data;                                            // avalon_st_adapter_013:out_0_data -> ns_from_fpga_s1_agent:rdata_fifo_sink_data
	wire          avalon_st_adapter_013_out_0_ready;                                           // ns_from_fpga_s1_agent:rdata_fifo_sink_ready -> avalon_st_adapter_013:out_0_ready
	wire    [0:0] avalon_st_adapter_013_out_0_error;                                           // avalon_st_adapter_013:out_0_error -> ns_from_fpga_s1_agent:rdata_fifo_sink_error
	wire          nw_from_fpga_s1_agent_rdata_fifo_out_valid;                                  // nw_from_fpga_s1_agent_rdata_fifo:out_valid -> avalon_st_adapter_014:in_0_valid
	wire   [33:0] nw_from_fpga_s1_agent_rdata_fifo_out_data;                                   // nw_from_fpga_s1_agent_rdata_fifo:out_data -> avalon_st_adapter_014:in_0_data
	wire          nw_from_fpga_s1_agent_rdata_fifo_out_ready;                                  // avalon_st_adapter_014:in_0_ready -> nw_from_fpga_s1_agent_rdata_fifo:out_ready
	wire          avalon_st_adapter_014_out_0_valid;                                           // avalon_st_adapter_014:out_0_valid -> nw_from_fpga_s1_agent:rdata_fifo_sink_valid
	wire   [33:0] avalon_st_adapter_014_out_0_data;                                            // avalon_st_adapter_014:out_0_data -> nw_from_fpga_s1_agent:rdata_fifo_sink_data
	wire          avalon_st_adapter_014_out_0_ready;                                           // nw_from_fpga_s1_agent:rdata_fifo_sink_ready -> avalon_st_adapter_014:out_0_ready
	wire    [0:0] avalon_st_adapter_014_out_0_error;                                           // avalon_st_adapter_014:out_0_error -> nw_from_fpga_s1_agent:rdata_fifo_sink_error
	wire          ne_from_fpga_s1_agent_rdata_fifo_out_valid;                                  // ne_from_fpga_s1_agent_rdata_fifo:out_valid -> avalon_st_adapter_015:in_0_valid
	wire   [33:0] ne_from_fpga_s1_agent_rdata_fifo_out_data;                                   // ne_from_fpga_s1_agent_rdata_fifo:out_data -> avalon_st_adapter_015:in_0_data
	wire          ne_from_fpga_s1_agent_rdata_fifo_out_ready;                                  // avalon_st_adapter_015:in_0_ready -> ne_from_fpga_s1_agent_rdata_fifo:out_ready
	wire          avalon_st_adapter_015_out_0_valid;                                           // avalon_st_adapter_015:out_0_valid -> ne_from_fpga_s1_agent:rdata_fifo_sink_valid
	wire   [33:0] avalon_st_adapter_015_out_0_data;                                            // avalon_st_adapter_015:out_0_data -> ne_from_fpga_s1_agent:rdata_fifo_sink_data
	wire          avalon_st_adapter_015_out_0_ready;                                           // ne_from_fpga_s1_agent:rdata_fifo_sink_ready -> avalon_st_adapter_015:out_0_ready
	wire    [0:0] avalon_st_adapter_015_out_0_error;                                           // avalon_st_adapter_015:out_0_error -> ne_from_fpga_s1_agent:rdata_fifo_sink_error
	wire          nnw_from_fpga_s1_agent_rdata_fifo_out_valid;                                 // nnw_from_fpga_s1_agent_rdata_fifo:out_valid -> avalon_st_adapter_016:in_0_valid
	wire   [33:0] nnw_from_fpga_s1_agent_rdata_fifo_out_data;                                  // nnw_from_fpga_s1_agent_rdata_fifo:out_data -> avalon_st_adapter_016:in_0_data
	wire          nnw_from_fpga_s1_agent_rdata_fifo_out_ready;                                 // avalon_st_adapter_016:in_0_ready -> nnw_from_fpga_s1_agent_rdata_fifo:out_ready
	wire          avalon_st_adapter_016_out_0_valid;                                           // avalon_st_adapter_016:out_0_valid -> nnw_from_fpga_s1_agent:rdata_fifo_sink_valid
	wire   [33:0] avalon_st_adapter_016_out_0_data;                                            // avalon_st_adapter_016:out_0_data -> nnw_from_fpga_s1_agent:rdata_fifo_sink_data
	wire          avalon_st_adapter_016_out_0_ready;                                           // nnw_from_fpga_s1_agent:rdata_fifo_sink_ready -> avalon_st_adapter_016:out_0_ready
	wire    [0:0] avalon_st_adapter_016_out_0_error;                                           // avalon_st_adapter_016:out_0_error -> nnw_from_fpga_s1_agent:rdata_fifo_sink_error
	wire          nne_from_fpga_s1_agent_rdata_fifo_out_valid;                                 // nne_from_fpga_s1_agent_rdata_fifo:out_valid -> avalon_st_adapter_017:in_0_valid
	wire   [33:0] nne_from_fpga_s1_agent_rdata_fifo_out_data;                                  // nne_from_fpga_s1_agent_rdata_fifo:out_data -> avalon_st_adapter_017:in_0_data
	wire          nne_from_fpga_s1_agent_rdata_fifo_out_ready;                                 // avalon_st_adapter_017:in_0_ready -> nne_from_fpga_s1_agent_rdata_fifo:out_ready
	wire          avalon_st_adapter_017_out_0_valid;                                           // avalon_st_adapter_017:out_0_valid -> nne_from_fpga_s1_agent:rdata_fifo_sink_valid
	wire   [33:0] avalon_st_adapter_017_out_0_data;                                            // avalon_st_adapter_017:out_0_data -> nne_from_fpga_s1_agent:rdata_fifo_sink_data
	wire          avalon_st_adapter_017_out_0_ready;                                           // nne_from_fpga_s1_agent:rdata_fifo_sink_ready -> avalon_st_adapter_017:out_0_ready
	wire    [0:0] avalon_st_adapter_017_out_0_error;                                           // avalon_st_adapter_017:out_0_error -> nne_from_fpga_s1_agent:rdata_fifo_sink_error
	wire          nsw_from_fpga_s1_agent_rdata_fifo_out_valid;                                 // nsw_from_fpga_s1_agent_rdata_fifo:out_valid -> avalon_st_adapter_018:in_0_valid
	wire   [33:0] nsw_from_fpga_s1_agent_rdata_fifo_out_data;                                  // nsw_from_fpga_s1_agent_rdata_fifo:out_data -> avalon_st_adapter_018:in_0_data
	wire          nsw_from_fpga_s1_agent_rdata_fifo_out_ready;                                 // avalon_st_adapter_018:in_0_ready -> nsw_from_fpga_s1_agent_rdata_fifo:out_ready
	wire          avalon_st_adapter_018_out_0_valid;                                           // avalon_st_adapter_018:out_0_valid -> nsw_from_fpga_s1_agent:rdata_fifo_sink_valid
	wire   [33:0] avalon_st_adapter_018_out_0_data;                                            // avalon_st_adapter_018:out_0_data -> nsw_from_fpga_s1_agent:rdata_fifo_sink_data
	wire          avalon_st_adapter_018_out_0_ready;                                           // nsw_from_fpga_s1_agent:rdata_fifo_sink_ready -> avalon_st_adapter_018:out_0_ready
	wire    [0:0] avalon_st_adapter_018_out_0_error;                                           // avalon_st_adapter_018:out_0_error -> nsw_from_fpga_s1_agent:rdata_fifo_sink_error
	wire          nse_from_fpga_s1_agent_rdata_fifo_out_valid;                                 // nse_from_fpga_s1_agent_rdata_fifo:out_valid -> avalon_st_adapter_019:in_0_valid
	wire   [33:0] nse_from_fpga_s1_agent_rdata_fifo_out_data;                                  // nse_from_fpga_s1_agent_rdata_fifo:out_data -> avalon_st_adapter_019:in_0_data
	wire          nse_from_fpga_s1_agent_rdata_fifo_out_ready;                                 // avalon_st_adapter_019:in_0_ready -> nse_from_fpga_s1_agent_rdata_fifo:out_ready
	wire          avalon_st_adapter_019_out_0_valid;                                           // avalon_st_adapter_019:out_0_valid -> nse_from_fpga_s1_agent:rdata_fifo_sink_valid
	wire   [33:0] avalon_st_adapter_019_out_0_data;                                            // avalon_st_adapter_019:out_0_data -> nse_from_fpga_s1_agent:rdata_fifo_sink_data
	wire          avalon_st_adapter_019_out_0_ready;                                           // nse_from_fpga_s1_agent:rdata_fifo_sink_ready -> avalon_st_adapter_019:out_0_ready
	wire    [0:0] avalon_st_adapter_019_out_0_error;                                           // avalon_st_adapter_019:out_0_error -> nse_from_fpga_s1_agent:rdata_fifo_sink_error
	wire          one9th_s1_agent_rdata_fifo_out_valid;                                        // one9th_s1_agent_rdata_fifo:out_valid -> avalon_st_adapter_020:in_0_valid
	wire   [33:0] one9th_s1_agent_rdata_fifo_out_data;                                         // one9th_s1_agent_rdata_fifo:out_data -> avalon_st_adapter_020:in_0_data
	wire          one9th_s1_agent_rdata_fifo_out_ready;                                        // avalon_st_adapter_020:in_0_ready -> one9th_s1_agent_rdata_fifo:out_ready
	wire          avalon_st_adapter_020_out_0_valid;                                           // avalon_st_adapter_020:out_0_valid -> one9th_s1_agent:rdata_fifo_sink_valid
	wire   [33:0] avalon_st_adapter_020_out_0_data;                                            // avalon_st_adapter_020:out_0_data -> one9th_s1_agent:rdata_fifo_sink_data
	wire          avalon_st_adapter_020_out_0_ready;                                           // one9th_s1_agent:rdata_fifo_sink_ready -> avalon_st_adapter_020:out_0_ready
	wire    [0:0] avalon_st_adapter_020_out_0_error;                                           // avalon_st_adapter_020:out_0_error -> one9th_s1_agent:rdata_fifo_sink_error
	wire          one36th_s1_agent_rdata_fifo_out_valid;                                       // one36th_s1_agent_rdata_fifo:out_valid -> avalon_st_adapter_021:in_0_valid
	wire   [33:0] one36th_s1_agent_rdata_fifo_out_data;                                        // one36th_s1_agent_rdata_fifo:out_data -> avalon_st_adapter_021:in_0_data
	wire          one36th_s1_agent_rdata_fifo_out_ready;                                       // avalon_st_adapter_021:in_0_ready -> one36th_s1_agent_rdata_fifo:out_ready
	wire          avalon_st_adapter_021_out_0_valid;                                           // avalon_st_adapter_021:out_0_valid -> one36th_s1_agent:rdata_fifo_sink_valid
	wire   [33:0] avalon_st_adapter_021_out_0_data;                                            // avalon_st_adapter_021:out_0_data -> one36th_s1_agent:rdata_fifo_sink_data
	wire          avalon_st_adapter_021_out_0_ready;                                           // one36th_s1_agent:rdata_fifo_sink_ready -> avalon_st_adapter_021:out_0_ready
	wire    [0:0] avalon_st_adapter_021_out_0_error;                                           // avalon_st_adapter_021:out_0_error -> one36th_s1_agent:rdata_fifo_sink_error
	wire          omega_s1_agent_rdata_fifo_out_valid;                                         // omega_s1_agent_rdata_fifo:out_valid -> avalon_st_adapter_022:in_0_valid
	wire   [33:0] omega_s1_agent_rdata_fifo_out_data;                                          // omega_s1_agent_rdata_fifo:out_data -> avalon_st_adapter_022:in_0_data
	wire          omega_s1_agent_rdata_fifo_out_ready;                                         // avalon_st_adapter_022:in_0_ready -> omega_s1_agent_rdata_fifo:out_ready
	wire          avalon_st_adapter_022_out_0_valid;                                           // avalon_st_adapter_022:out_0_valid -> omega_s1_agent:rdata_fifo_sink_valid
	wire   [33:0] avalon_st_adapter_022_out_0_data;                                            // avalon_st_adapter_022:out_0_data -> omega_s1_agent:rdata_fifo_sink_data
	wire          avalon_st_adapter_022_out_0_ready;                                           // omega_s1_agent:rdata_fifo_sink_ready -> avalon_st_adapter_022:out_0_ready
	wire    [0:0] avalon_st_adapter_022_out_0_error;                                           // avalon_st_adapter_022:out_0_error -> omega_s1_agent:rdata_fifo_sink_error
	wire          ux_s1_agent_rdata_fifo_out_valid;                                            // ux_s1_agent_rdata_fifo:out_valid -> avalon_st_adapter_023:in_0_valid
	wire   [33:0] ux_s1_agent_rdata_fifo_out_data;                                             // ux_s1_agent_rdata_fifo:out_data -> avalon_st_adapter_023:in_0_data
	wire          ux_s1_agent_rdata_fifo_out_ready;                                            // avalon_st_adapter_023:in_0_ready -> ux_s1_agent_rdata_fifo:out_ready
	wire          avalon_st_adapter_023_out_0_valid;                                           // avalon_st_adapter_023:out_0_valid -> ux_s1_agent:rdata_fifo_sink_valid
	wire   [33:0] avalon_st_adapter_023_out_0_data;                                            // avalon_st_adapter_023:out_0_data -> ux_s1_agent:rdata_fifo_sink_data
	wire          avalon_st_adapter_023_out_0_ready;                                           // ux_s1_agent:rdata_fifo_sink_ready -> avalon_st_adapter_023:out_0_ready
	wire    [0:0] avalon_st_adapter_023_out_0_error;                                           // avalon_st_adapter_023:out_0_error -> ux_s1_agent:rdata_fifo_sink_error
	wire          uy_s1_agent_rdata_fifo_out_valid;                                            // uy_s1_agent_rdata_fifo:out_valid -> avalon_st_adapter_024:in_0_valid
	wire   [33:0] uy_s1_agent_rdata_fifo_out_data;                                             // uy_s1_agent_rdata_fifo:out_data -> avalon_st_adapter_024:in_0_data
	wire          uy_s1_agent_rdata_fifo_out_ready;                                            // avalon_st_adapter_024:in_0_ready -> uy_s1_agent_rdata_fifo:out_ready
	wire          avalon_st_adapter_024_out_0_valid;                                           // avalon_st_adapter_024:out_0_valid -> uy_s1_agent:rdata_fifo_sink_valid
	wire   [33:0] avalon_st_adapter_024_out_0_data;                                            // avalon_st_adapter_024:out_0_data -> uy_s1_agent:rdata_fifo_sink_data
	wire          avalon_st_adapter_024_out_0_ready;                                           // uy_s1_agent:rdata_fifo_sink_ready -> avalon_st_adapter_024:out_0_ready
	wire    [0:0] avalon_st_adapter_024_out_0_error;                                           // avalon_st_adapter_024:out_0_error -> uy_s1_agent:rdata_fifo_sink_error
	wire          pipes_s1_agent_rdata_fifo_out_valid;                                         // pipes_s1_agent_rdata_fifo:out_valid -> avalon_st_adapter_025:in_0_valid
	wire   [33:0] pipes_s1_agent_rdata_fifo_out_data;                                          // pipes_s1_agent_rdata_fifo:out_data -> avalon_st_adapter_025:in_0_data
	wire          pipes_s1_agent_rdata_fifo_out_ready;                                         // avalon_st_adapter_025:in_0_ready -> pipes_s1_agent_rdata_fifo:out_ready
	wire          avalon_st_adapter_025_out_0_valid;                                           // avalon_st_adapter_025:out_0_valid -> pipes_s1_agent:rdata_fifo_sink_valid
	wire   [33:0] avalon_st_adapter_025_out_0_data;                                            // avalon_st_adapter_025:out_0_data -> pipes_s1_agent:rdata_fifo_sink_data
	wire          avalon_st_adapter_025_out_0_ready;                                           // pipes_s1_agent:rdata_fifo_sink_ready -> avalon_st_adapter_025:out_0_ready
	wire    [0:0] avalon_st_adapter_025_out_0_error;                                           // avalon_st_adapter_025:out_0_error -> pipes_s1_agent:rdata_fifo_sink_error
	wire          pixel_dma_addr_translation_slave_agent_rdata_fifo_out_valid;                 // Pixel_DMA_Addr_Translation_slave_agent_rdata_fifo:out_valid -> avalon_st_adapter_026:in_0_valid
	wire   [33:0] pixel_dma_addr_translation_slave_agent_rdata_fifo_out_data;                  // Pixel_DMA_Addr_Translation_slave_agent_rdata_fifo:out_data -> avalon_st_adapter_026:in_0_data
	wire          pixel_dma_addr_translation_slave_agent_rdata_fifo_out_ready;                 // avalon_st_adapter_026:in_0_ready -> Pixel_DMA_Addr_Translation_slave_agent_rdata_fifo:out_ready
	wire          avalon_st_adapter_026_out_0_valid;                                           // avalon_st_adapter_026:out_0_valid -> Pixel_DMA_Addr_Translation_slave_agent:rdata_fifo_sink_valid
	wire   [33:0] avalon_st_adapter_026_out_0_data;                                            // avalon_st_adapter_026:out_0_data -> Pixel_DMA_Addr_Translation_slave_agent:rdata_fifo_sink_data
	wire          avalon_st_adapter_026_out_0_ready;                                           // Pixel_DMA_Addr_Translation_slave_agent:rdata_fifo_sink_ready -> avalon_st_adapter_026:out_0_ready
	wire    [0:0] avalon_st_adapter_026_out_0_error;                                           // avalon_st_adapter_026:out_0_error -> Pixel_DMA_Addr_Translation_slave_agent:rdata_fifo_sink_error

	altera_merlin_slave_translator #(
		.AV_ADDRESS_W                   (2),
		.AV_DATA_W                      (32),
		.UAV_DATA_W                     (32),
		.AV_BURSTCOUNT_W                (1),
		.AV_BYTEENABLE_W                (4),
		.UAV_BYTEENABLE_W               (4),
		.UAV_ADDRESS_W                  (21),
		.UAV_BURSTCOUNT_W               (3),
		.AV_READLATENCY                 (1),
		.USE_READDATAVALID              (0),
		.USE_WAITREQUEST                (1),
		.USE_UAV_CLKEN                  (0),
		.USE_READRESPONSE               (0),
		.USE_WRITERESPONSE              (0),
		.AV_SYMBOLS_PER_WORD            (4),
		.AV_ADDRESS_SYMBOLS             (0),
		.AV_BURSTCOUNT_SYMBOLS          (0),
		.AV_CONSTANT_BURST_BEHAVIOR     (0),
		.UAV_CONSTANT_BURST_BEHAVIOR    (0),
		.AV_REQUIRE_UNALIGNED_ADDRESSES (0),
		.CHIPSELECT_THROUGH_READLATENCY (0),
		.AV_READ_WAIT_CYCLES            (0),
		.AV_WRITE_WAIT_CYCLES           (0),
		.AV_SETUP_WAIT_CYCLES           (0),
		.AV_DATA_HOLD_CYCLES            (0)
	) av_config_avalon_av_config_slave_translator (
		.clk                    (System_PLL_sys_clk_clk),                                  //                      clk.clk
		.reset                  (AV_Config_reset_reset_bridge_in_reset_reset),             //                    reset.reset
		.uav_address            (av_config_avalon_av_config_slave_agent_m0_address),       // avalon_universal_slave_0.address
		.uav_burstcount         (av_config_avalon_av_config_slave_agent_m0_burstcount),    //                         .burstcount
		.uav_read               (av_config_avalon_av_config_slave_agent_m0_read),          //                         .read
		.uav_write              (av_config_avalon_av_config_slave_agent_m0_write),         //                         .write
		.uav_waitrequest        (av_config_avalon_av_config_slave_agent_m0_waitrequest),   //                         .waitrequest
		.uav_readdatavalid      (av_config_avalon_av_config_slave_agent_m0_readdatavalid), //                         .readdatavalid
		.uav_byteenable         (av_config_avalon_av_config_slave_agent_m0_byteenable),    //                         .byteenable
		.uav_readdata           (av_config_avalon_av_config_slave_agent_m0_readdata),      //                         .readdata
		.uav_writedata          (av_config_avalon_av_config_slave_agent_m0_writedata),     //                         .writedata
		.uav_lock               (av_config_avalon_av_config_slave_agent_m0_lock),          //                         .lock
		.uav_debugaccess        (av_config_avalon_av_config_slave_agent_m0_debugaccess),   //                         .debugaccess
		.av_address             (AV_Config_avalon_av_config_slave_address),                //      avalon_anti_slave_0.address
		.av_write               (AV_Config_avalon_av_config_slave_write),                  //                         .write
		.av_read                (AV_Config_avalon_av_config_slave_read),                   //                         .read
		.av_readdata            (AV_Config_avalon_av_config_slave_readdata),               //                         .readdata
		.av_writedata           (AV_Config_avalon_av_config_slave_writedata),              //                         .writedata
		.av_byteenable          (AV_Config_avalon_av_config_slave_byteenable),             //                         .byteenable
		.av_waitrequest         (AV_Config_avalon_av_config_slave_waitrequest),            //                         .waitrequest
		.av_begintransfer       (),                                                        //              (terminated)
		.av_beginbursttransfer  (),                                                        //              (terminated)
		.av_burstcount          (),                                                        //              (terminated)
		.av_readdatavalid       (1'b0),                                                    //              (terminated)
		.av_writebyteenable     (),                                                        //              (terminated)
		.av_lock                (),                                                        //              (terminated)
		.av_chipselect          (),                                                        //              (terminated)
		.av_clken               (),                                                        //              (terminated)
		.uav_clken              (1'b0),                                                    //              (terminated)
		.av_debugaccess         (),                                                        //              (terminated)
		.av_outputenable        (),                                                        //              (terminated)
		.uav_response           (),                                                        //              (terminated)
		.av_response            (2'b00),                                                   //              (terminated)
		.uav_writeresponsevalid (),                                                        //              (terminated)
		.av_writeresponsevalid  (1'b0)                                                     //              (terminated)
	);

	altera_merlin_slave_translator #(
		.AV_ADDRESS_W                   (1),
		.AV_DATA_W                      (32),
		.UAV_DATA_W                     (32),
		.AV_BURSTCOUNT_W                (1),
		.AV_BYTEENABLE_W                (4),
		.UAV_BYTEENABLE_W               (4),
		.UAV_ADDRESS_W                  (21),
		.UAV_BURSTCOUNT_W               (3),
		.AV_READLATENCY                 (1),
		.USE_READDATAVALID              (0),
		.USE_WAITREQUEST                (0),
		.USE_UAV_CLKEN                  (0),
		.USE_READRESPONSE               (0),
		.USE_WRITERESPONSE              (0),
		.AV_SYMBOLS_PER_WORD            (4),
		.AV_ADDRESS_SYMBOLS             (0),
		.AV_BURSTCOUNT_SYMBOLS          (0),
		.AV_CONSTANT_BURST_BEHAVIOR     (0),
		.UAV_CONSTANT_BURST_BEHAVIOR    (0),
		.AV_REQUIRE_UNALIGNED_ADDRESSES (0),
		.CHIPSELECT_THROUGH_READLATENCY (0),
		.AV_READ_WAIT_CYCLES            (0),
		.AV_WRITE_WAIT_CYCLES           (0),
		.AV_SETUP_WAIT_CYCLES           (0),
		.AV_DATA_HOLD_CYCLES            (0)
	) vga_subsystem_char_buffer_control_slave_translator (
		.clk                    (System_PLL_sys_clk_clk),                                         //                      clk.clk
		.reset                  (AV_Config_reset_reset_bridge_in_reset_reset),                    //                    reset.reset
		.uav_address            (vga_subsystem_char_buffer_control_slave_agent_m0_address),       // avalon_universal_slave_0.address
		.uav_burstcount         (vga_subsystem_char_buffer_control_slave_agent_m0_burstcount),    //                         .burstcount
		.uav_read               (vga_subsystem_char_buffer_control_slave_agent_m0_read),          //                         .read
		.uav_write              (vga_subsystem_char_buffer_control_slave_agent_m0_write),         //                         .write
		.uav_waitrequest        (vga_subsystem_char_buffer_control_slave_agent_m0_waitrequest),   //                         .waitrequest
		.uav_readdatavalid      (vga_subsystem_char_buffer_control_slave_agent_m0_readdatavalid), //                         .readdatavalid
		.uav_byteenable         (vga_subsystem_char_buffer_control_slave_agent_m0_byteenable),    //                         .byteenable
		.uav_readdata           (vga_subsystem_char_buffer_control_slave_agent_m0_readdata),      //                         .readdata
		.uav_writedata          (vga_subsystem_char_buffer_control_slave_agent_m0_writedata),     //                         .writedata
		.uav_lock               (vga_subsystem_char_buffer_control_slave_agent_m0_lock),          //                         .lock
		.uav_debugaccess        (vga_subsystem_char_buffer_control_slave_agent_m0_debugaccess),   //                         .debugaccess
		.av_address             (VGA_Subsystem_char_buffer_control_slave_address),                //      avalon_anti_slave_0.address
		.av_write               (VGA_Subsystem_char_buffer_control_slave_write),                  //                         .write
		.av_read                (VGA_Subsystem_char_buffer_control_slave_read),                   //                         .read
		.av_readdata            (VGA_Subsystem_char_buffer_control_slave_readdata),               //                         .readdata
		.av_writedata           (VGA_Subsystem_char_buffer_control_slave_writedata),              //                         .writedata
		.av_byteenable          (VGA_Subsystem_char_buffer_control_slave_byteenable),             //                         .byteenable
		.av_chipselect          (VGA_Subsystem_char_buffer_control_slave_chipselect),             //                         .chipselect
		.av_begintransfer       (),                                                               //              (terminated)
		.av_beginbursttransfer  (),                                                               //              (terminated)
		.av_burstcount          (),                                                               //              (terminated)
		.av_readdatavalid       (1'b0),                                                           //              (terminated)
		.av_waitrequest         (1'b0),                                                           //              (terminated)
		.av_writebyteenable     (),                                                               //              (terminated)
		.av_lock                (),                                                               //              (terminated)
		.av_clken               (),                                                               //              (terminated)
		.uav_clken              (1'b0),                                                           //              (terminated)
		.av_debugaccess         (),                                                               //              (terminated)
		.av_outputenable        (),                                                               //              (terminated)
		.uav_response           (),                                                               //              (terminated)
		.av_response            (2'b00),                                                          //              (terminated)
		.uav_writeresponsevalid (),                                                               //              (terminated)
		.av_writeresponsevalid  (1'b0)                                                            //              (terminated)
	);

	altera_merlin_slave_translator #(
		.AV_ADDRESS_W                   (2),
		.AV_DATA_W                      (32),
		.UAV_DATA_W                     (32),
		.AV_BURSTCOUNT_W                (1),
		.AV_BYTEENABLE_W                (1),
		.UAV_BYTEENABLE_W               (4),
		.UAV_ADDRESS_W                  (21),
		.UAV_BURSTCOUNT_W               (3),
		.AV_READLATENCY                 (0),
		.USE_READDATAVALID              (0),
		.USE_WAITREQUEST                (0),
		.USE_UAV_CLKEN                  (0),
		.USE_READRESPONSE               (0),
		.USE_WRITERESPONSE              (0),
		.AV_SYMBOLS_PER_WORD            (4),
		.AV_ADDRESS_SYMBOLS             (0),
		.AV_BURSTCOUNT_SYMBOLS          (0),
		.AV_CONSTANT_BURST_BEHAVIOR     (0),
		.UAV_CONSTANT_BURST_BEHAVIOR    (0),
		.AV_REQUIRE_UNALIGNED_ADDRESSES (0),
		.CHIPSELECT_THROUGH_READLATENCY (0),
		.AV_READ_WAIT_CYCLES            (1),
		.AV_WRITE_WAIT_CYCLES           (0),
		.AV_SETUP_WAIT_CYCLES           (0),
		.AV_DATA_HOLD_CYCLES            (0)
	) n0_from_hps_s1_translator (
		.clk                    (System_PLL_sys_clk_clk),                        //                      clk.clk
		.reset                  (n0_from_hps_reset_reset_bridge_in_reset_reset), //                    reset.reset
		.uav_address            (n0_from_hps_s1_agent_m0_address),               // avalon_universal_slave_0.address
		.uav_burstcount         (n0_from_hps_s1_agent_m0_burstcount),            //                         .burstcount
		.uav_read               (n0_from_hps_s1_agent_m0_read),                  //                         .read
		.uav_write              (n0_from_hps_s1_agent_m0_write),                 //                         .write
		.uav_waitrequest        (n0_from_hps_s1_agent_m0_waitrequest),           //                         .waitrequest
		.uav_readdatavalid      (n0_from_hps_s1_agent_m0_readdatavalid),         //                         .readdatavalid
		.uav_byteenable         (n0_from_hps_s1_agent_m0_byteenable),            //                         .byteenable
		.uav_readdata           (n0_from_hps_s1_agent_m0_readdata),              //                         .readdata
		.uav_writedata          (n0_from_hps_s1_agent_m0_writedata),             //                         .writedata
		.uav_lock               (n0_from_hps_s1_agent_m0_lock),                  //                         .lock
		.uav_debugaccess        (n0_from_hps_s1_agent_m0_debugaccess),           //                         .debugaccess
		.av_address             (n0_from_hps_s1_address),                        //      avalon_anti_slave_0.address
		.av_write               (n0_from_hps_s1_write),                          //                         .write
		.av_readdata            (n0_from_hps_s1_readdata),                       //                         .readdata
		.av_writedata           (n0_from_hps_s1_writedata),                      //                         .writedata
		.av_chipselect          (n0_from_hps_s1_chipselect),                     //                         .chipselect
		.av_read                (),                                              //              (terminated)
		.av_begintransfer       (),                                              //              (terminated)
		.av_beginbursttransfer  (),                                              //              (terminated)
		.av_burstcount          (),                                              //              (terminated)
		.av_byteenable          (),                                              //              (terminated)
		.av_readdatavalid       (1'b0),                                          //              (terminated)
		.av_waitrequest         (1'b0),                                          //              (terminated)
		.av_writebyteenable     (),                                              //              (terminated)
		.av_lock                (),                                              //              (terminated)
		.av_clken               (),                                              //              (terminated)
		.uav_clken              (1'b0),                                          //              (terminated)
		.av_debugaccess         (),                                              //              (terminated)
		.av_outputenable        (),                                              //              (terminated)
		.uav_response           (),                                              //              (terminated)
		.av_response            (2'b00),                                         //              (terminated)
		.uav_writeresponsevalid (),                                              //              (terminated)
		.av_writeresponsevalid  (1'b0)                                           //              (terminated)
	);

	altera_merlin_slave_translator #(
		.AV_ADDRESS_W                   (2),
		.AV_DATA_W                      (32),
		.UAV_DATA_W                     (32),
		.AV_BURSTCOUNT_W                (1),
		.AV_BYTEENABLE_W                (1),
		.UAV_BYTEENABLE_W               (4),
		.UAV_ADDRESS_W                  (21),
		.UAV_BURSTCOUNT_W               (3),
		.AV_READLATENCY                 (0),
		.USE_READDATAVALID              (0),
		.USE_WAITREQUEST                (0),
		.USE_UAV_CLKEN                  (0),
		.USE_READRESPONSE               (0),
		.USE_WRITERESPONSE              (0),
		.AV_SYMBOLS_PER_WORD            (4),
		.AV_ADDRESS_SYMBOLS             (0),
		.AV_BURSTCOUNT_SYMBOLS          (0),
		.AV_CONSTANT_BURST_BEHAVIOR     (0),
		.UAV_CONSTANT_BURST_BEHAVIOR    (0),
		.AV_REQUIRE_UNALIGNED_ADDRESSES (0),
		.CHIPSELECT_THROUGH_READLATENCY (0),
		.AV_READ_WAIT_CYCLES            (1),
		.AV_WRITE_WAIT_CYCLES           (0),
		.AV_SETUP_WAIT_CYCLES           (0),
		.AV_DATA_HOLD_CYCLES            (0)
	) nn_from_hps_s1_translator (
		.clk                    (System_PLL_sys_clk_clk),                        //                      clk.clk
		.reset                  (n0_from_hps_reset_reset_bridge_in_reset_reset), //                    reset.reset
		.uav_address            (nn_from_hps_s1_agent_m0_address),               // avalon_universal_slave_0.address
		.uav_burstcount         (nn_from_hps_s1_agent_m0_burstcount),            //                         .burstcount
		.uav_read               (nn_from_hps_s1_agent_m0_read),                  //                         .read
		.uav_write              (nn_from_hps_s1_agent_m0_write),                 //                         .write
		.uav_waitrequest        (nn_from_hps_s1_agent_m0_waitrequest),           //                         .waitrequest
		.uav_readdatavalid      (nn_from_hps_s1_agent_m0_readdatavalid),         //                         .readdatavalid
		.uav_byteenable         (nn_from_hps_s1_agent_m0_byteenable),            //                         .byteenable
		.uav_readdata           (nn_from_hps_s1_agent_m0_readdata),              //                         .readdata
		.uav_writedata          (nn_from_hps_s1_agent_m0_writedata),             //                         .writedata
		.uav_lock               (nn_from_hps_s1_agent_m0_lock),                  //                         .lock
		.uav_debugaccess        (nn_from_hps_s1_agent_m0_debugaccess),           //                         .debugaccess
		.av_address             (nn_from_hps_s1_address),                        //      avalon_anti_slave_0.address
		.av_write               (nn_from_hps_s1_write),                          //                         .write
		.av_readdata            (nn_from_hps_s1_readdata),                       //                         .readdata
		.av_writedata           (nn_from_hps_s1_writedata),                      //                         .writedata
		.av_chipselect          (nn_from_hps_s1_chipselect),                     //                         .chipselect
		.av_read                (),                                              //              (terminated)
		.av_begintransfer       (),                                              //              (terminated)
		.av_beginbursttransfer  (),                                              //              (terminated)
		.av_burstcount          (),                                              //              (terminated)
		.av_byteenable          (),                                              //              (terminated)
		.av_readdatavalid       (1'b0),                                          //              (terminated)
		.av_waitrequest         (1'b0),                                          //              (terminated)
		.av_writebyteenable     (),                                              //              (terminated)
		.av_lock                (),                                              //              (terminated)
		.av_clken               (),                                              //              (terminated)
		.uav_clken              (1'b0),                                          //              (terminated)
		.av_debugaccess         (),                                              //              (terminated)
		.av_outputenable        (),                                              //              (terminated)
		.uav_response           (),                                              //              (terminated)
		.av_response            (2'b00),                                         //              (terminated)
		.uav_writeresponsevalid (),                                              //              (terminated)
		.av_writeresponsevalid  (1'b0)                                           //              (terminated)
	);

	altera_merlin_slave_translator #(
		.AV_ADDRESS_W                   (2),
		.AV_DATA_W                      (32),
		.UAV_DATA_W                     (32),
		.AV_BURSTCOUNT_W                (1),
		.AV_BYTEENABLE_W                (1),
		.UAV_BYTEENABLE_W               (4),
		.UAV_ADDRESS_W                  (21),
		.UAV_BURSTCOUNT_W               (3),
		.AV_READLATENCY                 (0),
		.USE_READDATAVALID              (0),
		.USE_WAITREQUEST                (0),
		.USE_UAV_CLKEN                  (0),
		.USE_READRESPONSE               (0),
		.USE_WRITERESPONSE              (0),
		.AV_SYMBOLS_PER_WORD            (4),
		.AV_ADDRESS_SYMBOLS             (0),
		.AV_BURSTCOUNT_SYMBOLS          (0),
		.AV_CONSTANT_BURST_BEHAVIOR     (0),
		.UAV_CONSTANT_BURST_BEHAVIOR    (0),
		.AV_REQUIRE_UNALIGNED_ADDRESSES (0),
		.CHIPSELECT_THROUGH_READLATENCY (0),
		.AV_READ_WAIT_CYCLES            (1),
		.AV_WRITE_WAIT_CYCLES           (0),
		.AV_SETUP_WAIT_CYCLES           (0),
		.AV_DATA_HOLD_CYCLES            (0)
	) ns_from_hps_s1_translator (
		.clk                    (System_PLL_sys_clk_clk),                        //                      clk.clk
		.reset                  (n0_from_hps_reset_reset_bridge_in_reset_reset), //                    reset.reset
		.uav_address            (ns_from_hps_s1_agent_m0_address),               // avalon_universal_slave_0.address
		.uav_burstcount         (ns_from_hps_s1_agent_m0_burstcount),            //                         .burstcount
		.uav_read               (ns_from_hps_s1_agent_m0_read),                  //                         .read
		.uav_write              (ns_from_hps_s1_agent_m0_write),                 //                         .write
		.uav_waitrequest        (ns_from_hps_s1_agent_m0_waitrequest),           //                         .waitrequest
		.uav_readdatavalid      (ns_from_hps_s1_agent_m0_readdatavalid),         //                         .readdatavalid
		.uav_byteenable         (ns_from_hps_s1_agent_m0_byteenable),            //                         .byteenable
		.uav_readdata           (ns_from_hps_s1_agent_m0_readdata),              //                         .readdata
		.uav_writedata          (ns_from_hps_s1_agent_m0_writedata),             //                         .writedata
		.uav_lock               (ns_from_hps_s1_agent_m0_lock),                  //                         .lock
		.uav_debugaccess        (ns_from_hps_s1_agent_m0_debugaccess),           //                         .debugaccess
		.av_address             (ns_from_hps_s1_address),                        //      avalon_anti_slave_0.address
		.av_write               (ns_from_hps_s1_write),                          //                         .write
		.av_readdata            (ns_from_hps_s1_readdata),                       //                         .readdata
		.av_writedata           (ns_from_hps_s1_writedata),                      //                         .writedata
		.av_chipselect          (ns_from_hps_s1_chipselect),                     //                         .chipselect
		.av_read                (),                                              //              (terminated)
		.av_begintransfer       (),                                              //              (terminated)
		.av_beginbursttransfer  (),                                              //              (terminated)
		.av_burstcount          (),                                              //              (terminated)
		.av_byteenable          (),                                              //              (terminated)
		.av_readdatavalid       (1'b0),                                          //              (terminated)
		.av_waitrequest         (1'b0),                                          //              (terminated)
		.av_writebyteenable     (),                                              //              (terminated)
		.av_lock                (),                                              //              (terminated)
		.av_clken               (),                                              //              (terminated)
		.uav_clken              (1'b0),                                          //              (terminated)
		.av_debugaccess         (),                                              //              (terminated)
		.av_outputenable        (),                                              //              (terminated)
		.uav_response           (),                                              //              (terminated)
		.av_response            (2'b00),                                         //              (terminated)
		.uav_writeresponsevalid (),                                              //              (terminated)
		.av_writeresponsevalid  (1'b0)                                           //              (terminated)
	);

	altera_merlin_slave_translator #(
		.AV_ADDRESS_W                   (2),
		.AV_DATA_W                      (32),
		.UAV_DATA_W                     (32),
		.AV_BURSTCOUNT_W                (1),
		.AV_BYTEENABLE_W                (1),
		.UAV_BYTEENABLE_W               (4),
		.UAV_ADDRESS_W                  (21),
		.UAV_BURSTCOUNT_W               (3),
		.AV_READLATENCY                 (0),
		.USE_READDATAVALID              (0),
		.USE_WAITREQUEST                (0),
		.USE_UAV_CLKEN                  (0),
		.USE_READRESPONSE               (0),
		.USE_WRITERESPONSE              (0),
		.AV_SYMBOLS_PER_WORD            (4),
		.AV_ADDRESS_SYMBOLS             (0),
		.AV_BURSTCOUNT_SYMBOLS          (0),
		.AV_CONSTANT_BURST_BEHAVIOR     (0),
		.UAV_CONSTANT_BURST_BEHAVIOR    (0),
		.AV_REQUIRE_UNALIGNED_ADDRESSES (0),
		.CHIPSELECT_THROUGH_READLATENCY (0),
		.AV_READ_WAIT_CYCLES            (1),
		.AV_WRITE_WAIT_CYCLES           (0),
		.AV_SETUP_WAIT_CYCLES           (0),
		.AV_DATA_HOLD_CYCLES            (0)
	) nw_from_hps_s1_translator (
		.clk                    (System_PLL_sys_clk_clk),                        //                      clk.clk
		.reset                  (n0_from_hps_reset_reset_bridge_in_reset_reset), //                    reset.reset
		.uav_address            (nw_from_hps_s1_agent_m0_address),               // avalon_universal_slave_0.address
		.uav_burstcount         (nw_from_hps_s1_agent_m0_burstcount),            //                         .burstcount
		.uav_read               (nw_from_hps_s1_agent_m0_read),                  //                         .read
		.uav_write              (nw_from_hps_s1_agent_m0_write),                 //                         .write
		.uav_waitrequest        (nw_from_hps_s1_agent_m0_waitrequest),           //                         .waitrequest
		.uav_readdatavalid      (nw_from_hps_s1_agent_m0_readdatavalid),         //                         .readdatavalid
		.uav_byteenable         (nw_from_hps_s1_agent_m0_byteenable),            //                         .byteenable
		.uav_readdata           (nw_from_hps_s1_agent_m0_readdata),              //                         .readdata
		.uav_writedata          (nw_from_hps_s1_agent_m0_writedata),             //                         .writedata
		.uav_lock               (nw_from_hps_s1_agent_m0_lock),                  //                         .lock
		.uav_debugaccess        (nw_from_hps_s1_agent_m0_debugaccess),           //                         .debugaccess
		.av_address             (nw_from_hps_s1_address),                        //      avalon_anti_slave_0.address
		.av_write               (nw_from_hps_s1_write),                          //                         .write
		.av_readdata            (nw_from_hps_s1_readdata),                       //                         .readdata
		.av_writedata           (nw_from_hps_s1_writedata),                      //                         .writedata
		.av_chipselect          (nw_from_hps_s1_chipselect),                     //                         .chipselect
		.av_read                (),                                              //              (terminated)
		.av_begintransfer       (),                                              //              (terminated)
		.av_beginbursttransfer  (),                                              //              (terminated)
		.av_burstcount          (),                                              //              (terminated)
		.av_byteenable          (),                                              //              (terminated)
		.av_readdatavalid       (1'b0),                                          //              (terminated)
		.av_waitrequest         (1'b0),                                          //              (terminated)
		.av_writebyteenable     (),                                              //              (terminated)
		.av_lock                (),                                              //              (terminated)
		.av_clken               (),                                              //              (terminated)
		.uav_clken              (1'b0),                                          //              (terminated)
		.av_debugaccess         (),                                              //              (terminated)
		.av_outputenable        (),                                              //              (terminated)
		.uav_response           (),                                              //              (terminated)
		.av_response            (2'b00),                                         //              (terminated)
		.uav_writeresponsevalid (),                                              //              (terminated)
		.av_writeresponsevalid  (1'b0)                                           //              (terminated)
	);

	altera_merlin_slave_translator #(
		.AV_ADDRESS_W                   (2),
		.AV_DATA_W                      (32),
		.UAV_DATA_W                     (32),
		.AV_BURSTCOUNT_W                (1),
		.AV_BYTEENABLE_W                (1),
		.UAV_BYTEENABLE_W               (4),
		.UAV_ADDRESS_W                  (21),
		.UAV_BURSTCOUNT_W               (3),
		.AV_READLATENCY                 (0),
		.USE_READDATAVALID              (0),
		.USE_WAITREQUEST                (0),
		.USE_UAV_CLKEN                  (0),
		.USE_READRESPONSE               (0),
		.USE_WRITERESPONSE              (0),
		.AV_SYMBOLS_PER_WORD            (4),
		.AV_ADDRESS_SYMBOLS             (0),
		.AV_BURSTCOUNT_SYMBOLS          (0),
		.AV_CONSTANT_BURST_BEHAVIOR     (0),
		.UAV_CONSTANT_BURST_BEHAVIOR    (0),
		.AV_REQUIRE_UNALIGNED_ADDRESSES (0),
		.CHIPSELECT_THROUGH_READLATENCY (0),
		.AV_READ_WAIT_CYCLES            (1),
		.AV_WRITE_WAIT_CYCLES           (0),
		.AV_SETUP_WAIT_CYCLES           (0),
		.AV_DATA_HOLD_CYCLES            (0)
	) ne_from_hps_s1_translator (
		.clk                    (System_PLL_sys_clk_clk),                        //                      clk.clk
		.reset                  (n0_from_hps_reset_reset_bridge_in_reset_reset), //                    reset.reset
		.uav_address            (ne_from_hps_s1_agent_m0_address),               // avalon_universal_slave_0.address
		.uav_burstcount         (ne_from_hps_s1_agent_m0_burstcount),            //                         .burstcount
		.uav_read               (ne_from_hps_s1_agent_m0_read),                  //                         .read
		.uav_write              (ne_from_hps_s1_agent_m0_write),                 //                         .write
		.uav_waitrequest        (ne_from_hps_s1_agent_m0_waitrequest),           //                         .waitrequest
		.uav_readdatavalid      (ne_from_hps_s1_agent_m0_readdatavalid),         //                         .readdatavalid
		.uav_byteenable         (ne_from_hps_s1_agent_m0_byteenable),            //                         .byteenable
		.uav_readdata           (ne_from_hps_s1_agent_m0_readdata),              //                         .readdata
		.uav_writedata          (ne_from_hps_s1_agent_m0_writedata),             //                         .writedata
		.uav_lock               (ne_from_hps_s1_agent_m0_lock),                  //                         .lock
		.uav_debugaccess        (ne_from_hps_s1_agent_m0_debugaccess),           //                         .debugaccess
		.av_address             (ne_from_hps_s1_address),                        //      avalon_anti_slave_0.address
		.av_write               (ne_from_hps_s1_write),                          //                         .write
		.av_readdata            (ne_from_hps_s1_readdata),                       //                         .readdata
		.av_writedata           (ne_from_hps_s1_writedata),                      //                         .writedata
		.av_chipselect          (ne_from_hps_s1_chipselect),                     //                         .chipselect
		.av_read                (),                                              //              (terminated)
		.av_begintransfer       (),                                              //              (terminated)
		.av_beginbursttransfer  (),                                              //              (terminated)
		.av_burstcount          (),                                              //              (terminated)
		.av_byteenable          (),                                              //              (terminated)
		.av_readdatavalid       (1'b0),                                          //              (terminated)
		.av_waitrequest         (1'b0),                                          //              (terminated)
		.av_writebyteenable     (),                                              //              (terminated)
		.av_lock                (),                                              //              (terminated)
		.av_clken               (),                                              //              (terminated)
		.uav_clken              (1'b0),                                          //              (terminated)
		.av_debugaccess         (),                                              //              (terminated)
		.av_outputenable        (),                                              //              (terminated)
		.uav_response           (),                                              //              (terminated)
		.av_response            (2'b00),                                         //              (terminated)
		.uav_writeresponsevalid (),                                              //              (terminated)
		.av_writeresponsevalid  (1'b0)                                           //              (terminated)
	);

	altera_merlin_slave_translator #(
		.AV_ADDRESS_W                   (2),
		.AV_DATA_W                      (32),
		.UAV_DATA_W                     (32),
		.AV_BURSTCOUNT_W                (1),
		.AV_BYTEENABLE_W                (1),
		.UAV_BYTEENABLE_W               (4),
		.UAV_ADDRESS_W                  (21),
		.UAV_BURSTCOUNT_W               (3),
		.AV_READLATENCY                 (0),
		.USE_READDATAVALID              (0),
		.USE_WAITREQUEST                (0),
		.USE_UAV_CLKEN                  (0),
		.USE_READRESPONSE               (0),
		.USE_WRITERESPONSE              (0),
		.AV_SYMBOLS_PER_WORD            (4),
		.AV_ADDRESS_SYMBOLS             (0),
		.AV_BURSTCOUNT_SYMBOLS          (0),
		.AV_CONSTANT_BURST_BEHAVIOR     (0),
		.UAV_CONSTANT_BURST_BEHAVIOR    (0),
		.AV_REQUIRE_UNALIGNED_ADDRESSES (0),
		.CHIPSELECT_THROUGH_READLATENCY (0),
		.AV_READ_WAIT_CYCLES            (1),
		.AV_WRITE_WAIT_CYCLES           (0),
		.AV_SETUP_WAIT_CYCLES           (0),
		.AV_DATA_HOLD_CYCLES            (0)
	) nnw_from_hps_s1_translator (
		.clk                    (System_PLL_sys_clk_clk),                        //                      clk.clk
		.reset                  (n0_from_hps_reset_reset_bridge_in_reset_reset), //                    reset.reset
		.uav_address            (nnw_from_hps_s1_agent_m0_address),              // avalon_universal_slave_0.address
		.uav_burstcount         (nnw_from_hps_s1_agent_m0_burstcount),           //                         .burstcount
		.uav_read               (nnw_from_hps_s1_agent_m0_read),                 //                         .read
		.uav_write              (nnw_from_hps_s1_agent_m0_write),                //                         .write
		.uav_waitrequest        (nnw_from_hps_s1_agent_m0_waitrequest),          //                         .waitrequest
		.uav_readdatavalid      (nnw_from_hps_s1_agent_m0_readdatavalid),        //                         .readdatavalid
		.uav_byteenable         (nnw_from_hps_s1_agent_m0_byteenable),           //                         .byteenable
		.uav_readdata           (nnw_from_hps_s1_agent_m0_readdata),             //                         .readdata
		.uav_writedata          (nnw_from_hps_s1_agent_m0_writedata),            //                         .writedata
		.uav_lock               (nnw_from_hps_s1_agent_m0_lock),                 //                         .lock
		.uav_debugaccess        (nnw_from_hps_s1_agent_m0_debugaccess),          //                         .debugaccess
		.av_address             (nnw_from_hps_s1_address),                       //      avalon_anti_slave_0.address
		.av_write               (nnw_from_hps_s1_write),                         //                         .write
		.av_readdata            (nnw_from_hps_s1_readdata),                      //                         .readdata
		.av_writedata           (nnw_from_hps_s1_writedata),                     //                         .writedata
		.av_chipselect          (nnw_from_hps_s1_chipselect),                    //                         .chipselect
		.av_read                (),                                              //              (terminated)
		.av_begintransfer       (),                                              //              (terminated)
		.av_beginbursttransfer  (),                                              //              (terminated)
		.av_burstcount          (),                                              //              (terminated)
		.av_byteenable          (),                                              //              (terminated)
		.av_readdatavalid       (1'b0),                                          //              (terminated)
		.av_waitrequest         (1'b0),                                          //              (terminated)
		.av_writebyteenable     (),                                              //              (terminated)
		.av_lock                (),                                              //              (terminated)
		.av_clken               (),                                              //              (terminated)
		.uav_clken              (1'b0),                                          //              (terminated)
		.av_debugaccess         (),                                              //              (terminated)
		.av_outputenable        (),                                              //              (terminated)
		.uav_response           (),                                              //              (terminated)
		.av_response            (2'b00),                                         //              (terminated)
		.uav_writeresponsevalid (),                                              //              (terminated)
		.av_writeresponsevalid  (1'b0)                                           //              (terminated)
	);

	altera_merlin_slave_translator #(
		.AV_ADDRESS_W                   (2),
		.AV_DATA_W                      (32),
		.UAV_DATA_W                     (32),
		.AV_BURSTCOUNT_W                (1),
		.AV_BYTEENABLE_W                (1),
		.UAV_BYTEENABLE_W               (4),
		.UAV_ADDRESS_W                  (21),
		.UAV_BURSTCOUNT_W               (3),
		.AV_READLATENCY                 (0),
		.USE_READDATAVALID              (0),
		.USE_WAITREQUEST                (0),
		.USE_UAV_CLKEN                  (0),
		.USE_READRESPONSE               (0),
		.USE_WRITERESPONSE              (0),
		.AV_SYMBOLS_PER_WORD            (4),
		.AV_ADDRESS_SYMBOLS             (0),
		.AV_BURSTCOUNT_SYMBOLS          (0),
		.AV_CONSTANT_BURST_BEHAVIOR     (0),
		.UAV_CONSTANT_BURST_BEHAVIOR    (0),
		.AV_REQUIRE_UNALIGNED_ADDRESSES (0),
		.CHIPSELECT_THROUGH_READLATENCY (0),
		.AV_READ_WAIT_CYCLES            (1),
		.AV_WRITE_WAIT_CYCLES           (0),
		.AV_SETUP_WAIT_CYCLES           (0),
		.AV_DATA_HOLD_CYCLES            (0)
	) nne_from_hps_s1_translator (
		.clk                    (System_PLL_sys_clk_clk),                        //                      clk.clk
		.reset                  (n0_from_hps_reset_reset_bridge_in_reset_reset), //                    reset.reset
		.uav_address            (nne_from_hps_s1_agent_m0_address),              // avalon_universal_slave_0.address
		.uav_burstcount         (nne_from_hps_s1_agent_m0_burstcount),           //                         .burstcount
		.uav_read               (nne_from_hps_s1_agent_m0_read),                 //                         .read
		.uav_write              (nne_from_hps_s1_agent_m0_write),                //                         .write
		.uav_waitrequest        (nne_from_hps_s1_agent_m0_waitrequest),          //                         .waitrequest
		.uav_readdatavalid      (nne_from_hps_s1_agent_m0_readdatavalid),        //                         .readdatavalid
		.uav_byteenable         (nne_from_hps_s1_agent_m0_byteenable),           //                         .byteenable
		.uav_readdata           (nne_from_hps_s1_agent_m0_readdata),             //                         .readdata
		.uav_writedata          (nne_from_hps_s1_agent_m0_writedata),            //                         .writedata
		.uav_lock               (nne_from_hps_s1_agent_m0_lock),                 //                         .lock
		.uav_debugaccess        (nne_from_hps_s1_agent_m0_debugaccess),          //                         .debugaccess
		.av_address             (nne_from_hps_s1_address),                       //      avalon_anti_slave_0.address
		.av_write               (nne_from_hps_s1_write),                         //                         .write
		.av_readdata            (nne_from_hps_s1_readdata),                      //                         .readdata
		.av_writedata           (nne_from_hps_s1_writedata),                     //                         .writedata
		.av_chipselect          (nne_from_hps_s1_chipselect),                    //                         .chipselect
		.av_read                (),                                              //              (terminated)
		.av_begintransfer       (),                                              //              (terminated)
		.av_beginbursttransfer  (),                                              //              (terminated)
		.av_burstcount          (),                                              //              (terminated)
		.av_byteenable          (),                                              //              (terminated)
		.av_readdatavalid       (1'b0),                                          //              (terminated)
		.av_waitrequest         (1'b0),                                          //              (terminated)
		.av_writebyteenable     (),                                              //              (terminated)
		.av_lock                (),                                              //              (terminated)
		.av_clken               (),                                              //              (terminated)
		.uav_clken              (1'b0),                                          //              (terminated)
		.av_debugaccess         (),                                              //              (terminated)
		.av_outputenable        (),                                              //              (terminated)
		.uav_response           (),                                              //              (terminated)
		.av_response            (2'b00),                                         //              (terminated)
		.uav_writeresponsevalid (),                                              //              (terminated)
		.av_writeresponsevalid  (1'b0)                                           //              (terminated)
	);

	altera_merlin_slave_translator #(
		.AV_ADDRESS_W                   (2),
		.AV_DATA_W                      (32),
		.UAV_DATA_W                     (32),
		.AV_BURSTCOUNT_W                (1),
		.AV_BYTEENABLE_W                (1),
		.UAV_BYTEENABLE_W               (4),
		.UAV_ADDRESS_W                  (21),
		.UAV_BURSTCOUNT_W               (3),
		.AV_READLATENCY                 (0),
		.USE_READDATAVALID              (0),
		.USE_WAITREQUEST                (0),
		.USE_UAV_CLKEN                  (0),
		.USE_READRESPONSE               (0),
		.USE_WRITERESPONSE              (0),
		.AV_SYMBOLS_PER_WORD            (4),
		.AV_ADDRESS_SYMBOLS             (0),
		.AV_BURSTCOUNT_SYMBOLS          (0),
		.AV_CONSTANT_BURST_BEHAVIOR     (0),
		.UAV_CONSTANT_BURST_BEHAVIOR    (0),
		.AV_REQUIRE_UNALIGNED_ADDRESSES (0),
		.CHIPSELECT_THROUGH_READLATENCY (0),
		.AV_READ_WAIT_CYCLES            (1),
		.AV_WRITE_WAIT_CYCLES           (0),
		.AV_SETUP_WAIT_CYCLES           (0),
		.AV_DATA_HOLD_CYCLES            (0)
	) nsw_from_hps_s1_translator (
		.clk                    (System_PLL_sys_clk_clk),                        //                      clk.clk
		.reset                  (n0_from_hps_reset_reset_bridge_in_reset_reset), //                    reset.reset
		.uav_address            (nsw_from_hps_s1_agent_m0_address),              // avalon_universal_slave_0.address
		.uav_burstcount         (nsw_from_hps_s1_agent_m0_burstcount),           //                         .burstcount
		.uav_read               (nsw_from_hps_s1_agent_m0_read),                 //                         .read
		.uav_write              (nsw_from_hps_s1_agent_m0_write),                //                         .write
		.uav_waitrequest        (nsw_from_hps_s1_agent_m0_waitrequest),          //                         .waitrequest
		.uav_readdatavalid      (nsw_from_hps_s1_agent_m0_readdatavalid),        //                         .readdatavalid
		.uav_byteenable         (nsw_from_hps_s1_agent_m0_byteenable),           //                         .byteenable
		.uav_readdata           (nsw_from_hps_s1_agent_m0_readdata),             //                         .readdata
		.uav_writedata          (nsw_from_hps_s1_agent_m0_writedata),            //                         .writedata
		.uav_lock               (nsw_from_hps_s1_agent_m0_lock),                 //                         .lock
		.uav_debugaccess        (nsw_from_hps_s1_agent_m0_debugaccess),          //                         .debugaccess
		.av_address             (nsw_from_hps_s1_address),                       //      avalon_anti_slave_0.address
		.av_write               (nsw_from_hps_s1_write),                         //                         .write
		.av_readdata            (nsw_from_hps_s1_readdata),                      //                         .readdata
		.av_writedata           (nsw_from_hps_s1_writedata),                     //                         .writedata
		.av_chipselect          (nsw_from_hps_s1_chipselect),                    //                         .chipselect
		.av_read                (),                                              //              (terminated)
		.av_begintransfer       (),                                              //              (terminated)
		.av_beginbursttransfer  (),                                              //              (terminated)
		.av_burstcount          (),                                              //              (terminated)
		.av_byteenable          (),                                              //              (terminated)
		.av_readdatavalid       (1'b0),                                          //              (terminated)
		.av_waitrequest         (1'b0),                                          //              (terminated)
		.av_writebyteenable     (),                                              //              (terminated)
		.av_lock                (),                                              //              (terminated)
		.av_clken               (),                                              //              (terminated)
		.uav_clken              (1'b0),                                          //              (terminated)
		.av_debugaccess         (),                                              //              (terminated)
		.av_outputenable        (),                                              //              (terminated)
		.uav_response           (),                                              //              (terminated)
		.av_response            (2'b00),                                         //              (terminated)
		.uav_writeresponsevalid (),                                              //              (terminated)
		.av_writeresponsevalid  (1'b0)                                           //              (terminated)
	);

	altera_merlin_slave_translator #(
		.AV_ADDRESS_W                   (2),
		.AV_DATA_W                      (32),
		.UAV_DATA_W                     (32),
		.AV_BURSTCOUNT_W                (1),
		.AV_BYTEENABLE_W                (1),
		.UAV_BYTEENABLE_W               (4),
		.UAV_ADDRESS_W                  (21),
		.UAV_BURSTCOUNT_W               (3),
		.AV_READLATENCY                 (0),
		.USE_READDATAVALID              (0),
		.USE_WAITREQUEST                (0),
		.USE_UAV_CLKEN                  (0),
		.USE_READRESPONSE               (0),
		.USE_WRITERESPONSE              (0),
		.AV_SYMBOLS_PER_WORD            (4),
		.AV_ADDRESS_SYMBOLS             (0),
		.AV_BURSTCOUNT_SYMBOLS          (0),
		.AV_CONSTANT_BURST_BEHAVIOR     (0),
		.UAV_CONSTANT_BURST_BEHAVIOR    (0),
		.AV_REQUIRE_UNALIGNED_ADDRESSES (0),
		.CHIPSELECT_THROUGH_READLATENCY (0),
		.AV_READ_WAIT_CYCLES            (1),
		.AV_WRITE_WAIT_CYCLES           (0),
		.AV_SETUP_WAIT_CYCLES           (0),
		.AV_DATA_HOLD_CYCLES            (0)
	) nse_from_hps_s1_translator (
		.clk                    (System_PLL_sys_clk_clk),                        //                      clk.clk
		.reset                  (n0_from_hps_reset_reset_bridge_in_reset_reset), //                    reset.reset
		.uav_address            (nse_from_hps_s1_agent_m0_address),              // avalon_universal_slave_0.address
		.uav_burstcount         (nse_from_hps_s1_agent_m0_burstcount),           //                         .burstcount
		.uav_read               (nse_from_hps_s1_agent_m0_read),                 //                         .read
		.uav_write              (nse_from_hps_s1_agent_m0_write),                //                         .write
		.uav_waitrequest        (nse_from_hps_s1_agent_m0_waitrequest),          //                         .waitrequest
		.uav_readdatavalid      (nse_from_hps_s1_agent_m0_readdatavalid),        //                         .readdatavalid
		.uav_byteenable         (nse_from_hps_s1_agent_m0_byteenable),           //                         .byteenable
		.uav_readdata           (nse_from_hps_s1_agent_m0_readdata),             //                         .readdata
		.uav_writedata          (nse_from_hps_s1_agent_m0_writedata),            //                         .writedata
		.uav_lock               (nse_from_hps_s1_agent_m0_lock),                 //                         .lock
		.uav_debugaccess        (nse_from_hps_s1_agent_m0_debugaccess),          //                         .debugaccess
		.av_address             (nse_from_hps_s1_address),                       //      avalon_anti_slave_0.address
		.av_write               (nse_from_hps_s1_write),                         //                         .write
		.av_readdata            (nse_from_hps_s1_readdata),                      //                         .readdata
		.av_writedata           (nse_from_hps_s1_writedata),                     //                         .writedata
		.av_chipselect          (nse_from_hps_s1_chipselect),                    //                         .chipselect
		.av_read                (),                                              //              (terminated)
		.av_begintransfer       (),                                              //              (terminated)
		.av_beginbursttransfer  (),                                              //              (terminated)
		.av_burstcount          (),                                              //              (terminated)
		.av_byteenable          (),                                              //              (terminated)
		.av_readdatavalid       (1'b0),                                          //              (terminated)
		.av_waitrequest         (1'b0),                                          //              (terminated)
		.av_writebyteenable     (),                                              //              (terminated)
		.av_lock                (),                                              //              (terminated)
		.av_clken               (),                                              //              (terminated)
		.uav_clken              (1'b0),                                          //              (terminated)
		.av_debugaccess         (),                                              //              (terminated)
		.av_outputenable        (),                                              //              (terminated)
		.uav_response           (),                                              //              (terminated)
		.av_response            (2'b00),                                         //              (terminated)
		.uav_writeresponsevalid (),                                              //              (terminated)
		.av_writeresponsevalid  (1'b0)                                           //              (terminated)
	);

	altera_merlin_slave_translator #(
		.AV_ADDRESS_W                   (2),
		.AV_DATA_W                      (32),
		.UAV_DATA_W                     (32),
		.AV_BURSTCOUNT_W                (1),
		.AV_BYTEENABLE_W                (1),
		.UAV_BYTEENABLE_W               (4),
		.UAV_ADDRESS_W                  (21),
		.UAV_BURSTCOUNT_W               (3),
		.AV_READLATENCY                 (0),
		.USE_READDATAVALID              (0),
		.USE_WAITREQUEST                (0),
		.USE_UAV_CLKEN                  (0),
		.USE_READRESPONSE               (0),
		.USE_WRITERESPONSE              (0),
		.AV_SYMBOLS_PER_WORD            (4),
		.AV_ADDRESS_SYMBOLS             (0),
		.AV_BURSTCOUNT_SYMBOLS          (0),
		.AV_CONSTANT_BURST_BEHAVIOR     (0),
		.UAV_CONSTANT_BURST_BEHAVIOR    (0),
		.AV_REQUIRE_UNALIGNED_ADDRESSES (0),
		.CHIPSELECT_THROUGH_READLATENCY (0),
		.AV_READ_WAIT_CYCLES            (1),
		.AV_WRITE_WAIT_CYCLES           (0),
		.AV_SETUP_WAIT_CYCLES           (0),
		.AV_DATA_HOLD_CYCLES            (0)
	) n0_from_fpga_s1_translator (
		.clk                    (System_PLL_sys_clk_clk),                        //                      clk.clk
		.reset                  (n0_from_hps_reset_reset_bridge_in_reset_reset), //                    reset.reset
		.uav_address            (n0_from_fpga_s1_agent_m0_address),              // avalon_universal_slave_0.address
		.uav_burstcount         (n0_from_fpga_s1_agent_m0_burstcount),           //                         .burstcount
		.uav_read               (n0_from_fpga_s1_agent_m0_read),                 //                         .read
		.uav_write              (n0_from_fpga_s1_agent_m0_write),                //                         .write
		.uav_waitrequest        (n0_from_fpga_s1_agent_m0_waitrequest),          //                         .waitrequest
		.uav_readdatavalid      (n0_from_fpga_s1_agent_m0_readdatavalid),        //                         .readdatavalid
		.uav_byteenable         (n0_from_fpga_s1_agent_m0_byteenable),           //                         .byteenable
		.uav_readdata           (n0_from_fpga_s1_agent_m0_readdata),             //                         .readdata
		.uav_writedata          (n0_from_fpga_s1_agent_m0_writedata),            //                         .writedata
		.uav_lock               (n0_from_fpga_s1_agent_m0_lock),                 //                         .lock
		.uav_debugaccess        (n0_from_fpga_s1_agent_m0_debugaccess),          //                         .debugaccess
		.av_address             (n0_from_fpga_s1_address),                       //      avalon_anti_slave_0.address
		.av_readdata            (n0_from_fpga_s1_readdata),                      //                         .readdata
		.av_write               (),                                              //              (terminated)
		.av_read                (),                                              //              (terminated)
		.av_writedata           (),                                              //              (terminated)
		.av_begintransfer       (),                                              //              (terminated)
		.av_beginbursttransfer  (),                                              //              (terminated)
		.av_burstcount          (),                                              //              (terminated)
		.av_byteenable          (),                                              //              (terminated)
		.av_readdatavalid       (1'b0),                                          //              (terminated)
		.av_waitrequest         (1'b0),                                          //              (terminated)
		.av_writebyteenable     (),                                              //              (terminated)
		.av_lock                (),                                              //              (terminated)
		.av_chipselect          (),                                              //              (terminated)
		.av_clken               (),                                              //              (terminated)
		.uav_clken              (1'b0),                                          //              (terminated)
		.av_debugaccess         (),                                              //              (terminated)
		.av_outputenable        (),                                              //              (terminated)
		.uav_response           (),                                              //              (terminated)
		.av_response            (2'b00),                                         //              (terminated)
		.uav_writeresponsevalid (),                                              //              (terminated)
		.av_writeresponsevalid  (1'b0)                                           //              (terminated)
	);

	altera_merlin_slave_translator #(
		.AV_ADDRESS_W                   (2),
		.AV_DATA_W                      (32),
		.UAV_DATA_W                     (32),
		.AV_BURSTCOUNT_W                (1),
		.AV_BYTEENABLE_W                (1),
		.UAV_BYTEENABLE_W               (4),
		.UAV_ADDRESS_W                  (21),
		.UAV_BURSTCOUNT_W               (3),
		.AV_READLATENCY                 (0),
		.USE_READDATAVALID              (0),
		.USE_WAITREQUEST                (0),
		.USE_UAV_CLKEN                  (0),
		.USE_READRESPONSE               (0),
		.USE_WRITERESPONSE              (0),
		.AV_SYMBOLS_PER_WORD            (4),
		.AV_ADDRESS_SYMBOLS             (0),
		.AV_BURSTCOUNT_SYMBOLS          (0),
		.AV_CONSTANT_BURST_BEHAVIOR     (0),
		.UAV_CONSTANT_BURST_BEHAVIOR    (0),
		.AV_REQUIRE_UNALIGNED_ADDRESSES (0),
		.CHIPSELECT_THROUGH_READLATENCY (0),
		.AV_READ_WAIT_CYCLES            (1),
		.AV_WRITE_WAIT_CYCLES           (0),
		.AV_SETUP_WAIT_CYCLES           (0),
		.AV_DATA_HOLD_CYCLES            (0)
	) nn_from_fpga_s1_translator (
		.clk                    (System_PLL_sys_clk_clk),                        //                      clk.clk
		.reset                  (n0_from_hps_reset_reset_bridge_in_reset_reset), //                    reset.reset
		.uav_address            (nn_from_fpga_s1_agent_m0_address),              // avalon_universal_slave_0.address
		.uav_burstcount         (nn_from_fpga_s1_agent_m0_burstcount),           //                         .burstcount
		.uav_read               (nn_from_fpga_s1_agent_m0_read),                 //                         .read
		.uav_write              (nn_from_fpga_s1_agent_m0_write),                //                         .write
		.uav_waitrequest        (nn_from_fpga_s1_agent_m0_waitrequest),          //                         .waitrequest
		.uav_readdatavalid      (nn_from_fpga_s1_agent_m0_readdatavalid),        //                         .readdatavalid
		.uav_byteenable         (nn_from_fpga_s1_agent_m0_byteenable),           //                         .byteenable
		.uav_readdata           (nn_from_fpga_s1_agent_m0_readdata),             //                         .readdata
		.uav_writedata          (nn_from_fpga_s1_agent_m0_writedata),            //                         .writedata
		.uav_lock               (nn_from_fpga_s1_agent_m0_lock),                 //                         .lock
		.uav_debugaccess        (nn_from_fpga_s1_agent_m0_debugaccess),          //                         .debugaccess
		.av_address             (nn_from_fpga_s1_address),                       //      avalon_anti_slave_0.address
		.av_readdata            (nn_from_fpga_s1_readdata),                      //                         .readdata
		.av_write               (),                                              //              (terminated)
		.av_read                (),                                              //              (terminated)
		.av_writedata           (),                                              //              (terminated)
		.av_begintransfer       (),                                              //              (terminated)
		.av_beginbursttransfer  (),                                              //              (terminated)
		.av_burstcount          (),                                              //              (terminated)
		.av_byteenable          (),                                              //              (terminated)
		.av_readdatavalid       (1'b0),                                          //              (terminated)
		.av_waitrequest         (1'b0),                                          //              (terminated)
		.av_writebyteenable     (),                                              //              (terminated)
		.av_lock                (),                                              //              (terminated)
		.av_chipselect          (),                                              //              (terminated)
		.av_clken               (),                                              //              (terminated)
		.uav_clken              (1'b0),                                          //              (terminated)
		.av_debugaccess         (),                                              //              (terminated)
		.av_outputenable        (),                                              //              (terminated)
		.uav_response           (),                                              //              (terminated)
		.av_response            (2'b00),                                         //              (terminated)
		.uav_writeresponsevalid (),                                              //              (terminated)
		.av_writeresponsevalid  (1'b0)                                           //              (terminated)
	);

	altera_merlin_slave_translator #(
		.AV_ADDRESS_W                   (2),
		.AV_DATA_W                      (32),
		.UAV_DATA_W                     (32),
		.AV_BURSTCOUNT_W                (1),
		.AV_BYTEENABLE_W                (1),
		.UAV_BYTEENABLE_W               (4),
		.UAV_ADDRESS_W                  (21),
		.UAV_BURSTCOUNT_W               (3),
		.AV_READLATENCY                 (0),
		.USE_READDATAVALID              (0),
		.USE_WAITREQUEST                (0),
		.USE_UAV_CLKEN                  (0),
		.USE_READRESPONSE               (0),
		.USE_WRITERESPONSE              (0),
		.AV_SYMBOLS_PER_WORD            (4),
		.AV_ADDRESS_SYMBOLS             (0),
		.AV_BURSTCOUNT_SYMBOLS          (0),
		.AV_CONSTANT_BURST_BEHAVIOR     (0),
		.UAV_CONSTANT_BURST_BEHAVIOR    (0),
		.AV_REQUIRE_UNALIGNED_ADDRESSES (0),
		.CHIPSELECT_THROUGH_READLATENCY (0),
		.AV_READ_WAIT_CYCLES            (1),
		.AV_WRITE_WAIT_CYCLES           (0),
		.AV_SETUP_WAIT_CYCLES           (0),
		.AV_DATA_HOLD_CYCLES            (0)
	) ns_from_fpga_s1_translator (
		.clk                    (System_PLL_sys_clk_clk),                        //                      clk.clk
		.reset                  (n0_from_hps_reset_reset_bridge_in_reset_reset), //                    reset.reset
		.uav_address            (ns_from_fpga_s1_agent_m0_address),              // avalon_universal_slave_0.address
		.uav_burstcount         (ns_from_fpga_s1_agent_m0_burstcount),           //                         .burstcount
		.uav_read               (ns_from_fpga_s1_agent_m0_read),                 //                         .read
		.uav_write              (ns_from_fpga_s1_agent_m0_write),                //                         .write
		.uav_waitrequest        (ns_from_fpga_s1_agent_m0_waitrequest),          //                         .waitrequest
		.uav_readdatavalid      (ns_from_fpga_s1_agent_m0_readdatavalid),        //                         .readdatavalid
		.uav_byteenable         (ns_from_fpga_s1_agent_m0_byteenable),           //                         .byteenable
		.uav_readdata           (ns_from_fpga_s1_agent_m0_readdata),             //                         .readdata
		.uav_writedata          (ns_from_fpga_s1_agent_m0_writedata),            //                         .writedata
		.uav_lock               (ns_from_fpga_s1_agent_m0_lock),                 //                         .lock
		.uav_debugaccess        (ns_from_fpga_s1_agent_m0_debugaccess),          //                         .debugaccess
		.av_address             (ns_from_fpga_s1_address),                       //      avalon_anti_slave_0.address
		.av_readdata            (ns_from_fpga_s1_readdata),                      //                         .readdata
		.av_write               (),                                              //              (terminated)
		.av_read                (),                                              //              (terminated)
		.av_writedata           (),                                              //              (terminated)
		.av_begintransfer       (),                                              //              (terminated)
		.av_beginbursttransfer  (),                                              //              (terminated)
		.av_burstcount          (),                                              //              (terminated)
		.av_byteenable          (),                                              //              (terminated)
		.av_readdatavalid       (1'b0),                                          //              (terminated)
		.av_waitrequest         (1'b0),                                          //              (terminated)
		.av_writebyteenable     (),                                              //              (terminated)
		.av_lock                (),                                              //              (terminated)
		.av_chipselect          (),                                              //              (terminated)
		.av_clken               (),                                              //              (terminated)
		.uav_clken              (1'b0),                                          //              (terminated)
		.av_debugaccess         (),                                              //              (terminated)
		.av_outputenable        (),                                              //              (terminated)
		.uav_response           (),                                              //              (terminated)
		.av_response            (2'b00),                                         //              (terminated)
		.uav_writeresponsevalid (),                                              //              (terminated)
		.av_writeresponsevalid  (1'b0)                                           //              (terminated)
	);

	altera_merlin_slave_translator #(
		.AV_ADDRESS_W                   (2),
		.AV_DATA_W                      (32),
		.UAV_DATA_W                     (32),
		.AV_BURSTCOUNT_W                (1),
		.AV_BYTEENABLE_W                (1),
		.UAV_BYTEENABLE_W               (4),
		.UAV_ADDRESS_W                  (21),
		.UAV_BURSTCOUNT_W               (3),
		.AV_READLATENCY                 (0),
		.USE_READDATAVALID              (0),
		.USE_WAITREQUEST                (0),
		.USE_UAV_CLKEN                  (0),
		.USE_READRESPONSE               (0),
		.USE_WRITERESPONSE              (0),
		.AV_SYMBOLS_PER_WORD            (4),
		.AV_ADDRESS_SYMBOLS             (0),
		.AV_BURSTCOUNT_SYMBOLS          (0),
		.AV_CONSTANT_BURST_BEHAVIOR     (0),
		.UAV_CONSTANT_BURST_BEHAVIOR    (0),
		.AV_REQUIRE_UNALIGNED_ADDRESSES (0),
		.CHIPSELECT_THROUGH_READLATENCY (0),
		.AV_READ_WAIT_CYCLES            (1),
		.AV_WRITE_WAIT_CYCLES           (0),
		.AV_SETUP_WAIT_CYCLES           (0),
		.AV_DATA_HOLD_CYCLES            (0)
	) nw_from_fpga_s1_translator (
		.clk                    (System_PLL_sys_clk_clk),                        //                      clk.clk
		.reset                  (n0_from_hps_reset_reset_bridge_in_reset_reset), //                    reset.reset
		.uav_address            (nw_from_fpga_s1_agent_m0_address),              // avalon_universal_slave_0.address
		.uav_burstcount         (nw_from_fpga_s1_agent_m0_burstcount),           //                         .burstcount
		.uav_read               (nw_from_fpga_s1_agent_m0_read),                 //                         .read
		.uav_write              (nw_from_fpga_s1_agent_m0_write),                //                         .write
		.uav_waitrequest        (nw_from_fpga_s1_agent_m0_waitrequest),          //                         .waitrequest
		.uav_readdatavalid      (nw_from_fpga_s1_agent_m0_readdatavalid),        //                         .readdatavalid
		.uav_byteenable         (nw_from_fpga_s1_agent_m0_byteenable),           //                         .byteenable
		.uav_readdata           (nw_from_fpga_s1_agent_m0_readdata),             //                         .readdata
		.uav_writedata          (nw_from_fpga_s1_agent_m0_writedata),            //                         .writedata
		.uav_lock               (nw_from_fpga_s1_agent_m0_lock),                 //                         .lock
		.uav_debugaccess        (nw_from_fpga_s1_agent_m0_debugaccess),          //                         .debugaccess
		.av_address             (nw_from_fpga_s1_address),                       //      avalon_anti_slave_0.address
		.av_readdata            (nw_from_fpga_s1_readdata),                      //                         .readdata
		.av_write               (),                                              //              (terminated)
		.av_read                (),                                              //              (terminated)
		.av_writedata           (),                                              //              (terminated)
		.av_begintransfer       (),                                              //              (terminated)
		.av_beginbursttransfer  (),                                              //              (terminated)
		.av_burstcount          (),                                              //              (terminated)
		.av_byteenable          (),                                              //              (terminated)
		.av_readdatavalid       (1'b0),                                          //              (terminated)
		.av_waitrequest         (1'b0),                                          //              (terminated)
		.av_writebyteenable     (),                                              //              (terminated)
		.av_lock                (),                                              //              (terminated)
		.av_chipselect          (),                                              //              (terminated)
		.av_clken               (),                                              //              (terminated)
		.uav_clken              (1'b0),                                          //              (terminated)
		.av_debugaccess         (),                                              //              (terminated)
		.av_outputenable        (),                                              //              (terminated)
		.uav_response           (),                                              //              (terminated)
		.av_response            (2'b00),                                         //              (terminated)
		.uav_writeresponsevalid (),                                              //              (terminated)
		.av_writeresponsevalid  (1'b0)                                           //              (terminated)
	);

	altera_merlin_slave_translator #(
		.AV_ADDRESS_W                   (2),
		.AV_DATA_W                      (32),
		.UAV_DATA_W                     (32),
		.AV_BURSTCOUNT_W                (1),
		.AV_BYTEENABLE_W                (1),
		.UAV_BYTEENABLE_W               (4),
		.UAV_ADDRESS_W                  (21),
		.UAV_BURSTCOUNT_W               (3),
		.AV_READLATENCY                 (0),
		.USE_READDATAVALID              (0),
		.USE_WAITREQUEST                (0),
		.USE_UAV_CLKEN                  (0),
		.USE_READRESPONSE               (0),
		.USE_WRITERESPONSE              (0),
		.AV_SYMBOLS_PER_WORD            (4),
		.AV_ADDRESS_SYMBOLS             (0),
		.AV_BURSTCOUNT_SYMBOLS          (0),
		.AV_CONSTANT_BURST_BEHAVIOR     (0),
		.UAV_CONSTANT_BURST_BEHAVIOR    (0),
		.AV_REQUIRE_UNALIGNED_ADDRESSES (0),
		.CHIPSELECT_THROUGH_READLATENCY (0),
		.AV_READ_WAIT_CYCLES            (1),
		.AV_WRITE_WAIT_CYCLES           (0),
		.AV_SETUP_WAIT_CYCLES           (0),
		.AV_DATA_HOLD_CYCLES            (0)
	) ne_from_fpga_s1_translator (
		.clk                    (System_PLL_sys_clk_clk),                        //                      clk.clk
		.reset                  (n0_from_hps_reset_reset_bridge_in_reset_reset), //                    reset.reset
		.uav_address            (ne_from_fpga_s1_agent_m0_address),              // avalon_universal_slave_0.address
		.uav_burstcount         (ne_from_fpga_s1_agent_m0_burstcount),           //                         .burstcount
		.uav_read               (ne_from_fpga_s1_agent_m0_read),                 //                         .read
		.uav_write              (ne_from_fpga_s1_agent_m0_write),                //                         .write
		.uav_waitrequest        (ne_from_fpga_s1_agent_m0_waitrequest),          //                         .waitrequest
		.uav_readdatavalid      (ne_from_fpga_s1_agent_m0_readdatavalid),        //                         .readdatavalid
		.uav_byteenable         (ne_from_fpga_s1_agent_m0_byteenable),           //                         .byteenable
		.uav_readdata           (ne_from_fpga_s1_agent_m0_readdata),             //                         .readdata
		.uav_writedata          (ne_from_fpga_s1_agent_m0_writedata),            //                         .writedata
		.uav_lock               (ne_from_fpga_s1_agent_m0_lock),                 //                         .lock
		.uav_debugaccess        (ne_from_fpga_s1_agent_m0_debugaccess),          //                         .debugaccess
		.av_address             (ne_from_fpga_s1_address),                       //      avalon_anti_slave_0.address
		.av_readdata            (ne_from_fpga_s1_readdata),                      //                         .readdata
		.av_write               (),                                              //              (terminated)
		.av_read                (),                                              //              (terminated)
		.av_writedata           (),                                              //              (terminated)
		.av_begintransfer       (),                                              //              (terminated)
		.av_beginbursttransfer  (),                                              //              (terminated)
		.av_burstcount          (),                                              //              (terminated)
		.av_byteenable          (),                                              //              (terminated)
		.av_readdatavalid       (1'b0),                                          //              (terminated)
		.av_waitrequest         (1'b0),                                          //              (terminated)
		.av_writebyteenable     (),                                              //              (terminated)
		.av_lock                (),                                              //              (terminated)
		.av_chipselect          (),                                              //              (terminated)
		.av_clken               (),                                              //              (terminated)
		.uav_clken              (1'b0),                                          //              (terminated)
		.av_debugaccess         (),                                              //              (terminated)
		.av_outputenable        (),                                              //              (terminated)
		.uav_response           (),                                              //              (terminated)
		.av_response            (2'b00),                                         //              (terminated)
		.uav_writeresponsevalid (),                                              //              (terminated)
		.av_writeresponsevalid  (1'b0)                                           //              (terminated)
	);

	altera_merlin_slave_translator #(
		.AV_ADDRESS_W                   (2),
		.AV_DATA_W                      (32),
		.UAV_DATA_W                     (32),
		.AV_BURSTCOUNT_W                (1),
		.AV_BYTEENABLE_W                (1),
		.UAV_BYTEENABLE_W               (4),
		.UAV_ADDRESS_W                  (21),
		.UAV_BURSTCOUNT_W               (3),
		.AV_READLATENCY                 (0),
		.USE_READDATAVALID              (0),
		.USE_WAITREQUEST                (0),
		.USE_UAV_CLKEN                  (0),
		.USE_READRESPONSE               (0),
		.USE_WRITERESPONSE              (0),
		.AV_SYMBOLS_PER_WORD            (4),
		.AV_ADDRESS_SYMBOLS             (0),
		.AV_BURSTCOUNT_SYMBOLS          (0),
		.AV_CONSTANT_BURST_BEHAVIOR     (0),
		.UAV_CONSTANT_BURST_BEHAVIOR    (0),
		.AV_REQUIRE_UNALIGNED_ADDRESSES (0),
		.CHIPSELECT_THROUGH_READLATENCY (0),
		.AV_READ_WAIT_CYCLES            (1),
		.AV_WRITE_WAIT_CYCLES           (0),
		.AV_SETUP_WAIT_CYCLES           (0),
		.AV_DATA_HOLD_CYCLES            (0)
	) nnw_from_fpga_s1_translator (
		.clk                    (System_PLL_sys_clk_clk),                        //                      clk.clk
		.reset                  (n0_from_hps_reset_reset_bridge_in_reset_reset), //                    reset.reset
		.uav_address            (nnw_from_fpga_s1_agent_m0_address),             // avalon_universal_slave_0.address
		.uav_burstcount         (nnw_from_fpga_s1_agent_m0_burstcount),          //                         .burstcount
		.uav_read               (nnw_from_fpga_s1_agent_m0_read),                //                         .read
		.uav_write              (nnw_from_fpga_s1_agent_m0_write),               //                         .write
		.uav_waitrequest        (nnw_from_fpga_s1_agent_m0_waitrequest),         //                         .waitrequest
		.uav_readdatavalid      (nnw_from_fpga_s1_agent_m0_readdatavalid),       //                         .readdatavalid
		.uav_byteenable         (nnw_from_fpga_s1_agent_m0_byteenable),          //                         .byteenable
		.uav_readdata           (nnw_from_fpga_s1_agent_m0_readdata),            //                         .readdata
		.uav_writedata          (nnw_from_fpga_s1_agent_m0_writedata),           //                         .writedata
		.uav_lock               (nnw_from_fpga_s1_agent_m0_lock),                //                         .lock
		.uav_debugaccess        (nnw_from_fpga_s1_agent_m0_debugaccess),         //                         .debugaccess
		.av_address             (nnw_from_fpga_s1_address),                      //      avalon_anti_slave_0.address
		.av_readdata            (nnw_from_fpga_s1_readdata),                     //                         .readdata
		.av_write               (),                                              //              (terminated)
		.av_read                (),                                              //              (terminated)
		.av_writedata           (),                                              //              (terminated)
		.av_begintransfer       (),                                              //              (terminated)
		.av_beginbursttransfer  (),                                              //              (terminated)
		.av_burstcount          (),                                              //              (terminated)
		.av_byteenable          (),                                              //              (terminated)
		.av_readdatavalid       (1'b0),                                          //              (terminated)
		.av_waitrequest         (1'b0),                                          //              (terminated)
		.av_writebyteenable     (),                                              //              (terminated)
		.av_lock                (),                                              //              (terminated)
		.av_chipselect          (),                                              //              (terminated)
		.av_clken               (),                                              //              (terminated)
		.uav_clken              (1'b0),                                          //              (terminated)
		.av_debugaccess         (),                                              //              (terminated)
		.av_outputenable        (),                                              //              (terminated)
		.uav_response           (),                                              //              (terminated)
		.av_response            (2'b00),                                         //              (terminated)
		.uav_writeresponsevalid (),                                              //              (terminated)
		.av_writeresponsevalid  (1'b0)                                           //              (terminated)
	);

	altera_merlin_slave_translator #(
		.AV_ADDRESS_W                   (2),
		.AV_DATA_W                      (32),
		.UAV_DATA_W                     (32),
		.AV_BURSTCOUNT_W                (1),
		.AV_BYTEENABLE_W                (1),
		.UAV_BYTEENABLE_W               (4),
		.UAV_ADDRESS_W                  (21),
		.UAV_BURSTCOUNT_W               (3),
		.AV_READLATENCY                 (0),
		.USE_READDATAVALID              (0),
		.USE_WAITREQUEST                (0),
		.USE_UAV_CLKEN                  (0),
		.USE_READRESPONSE               (0),
		.USE_WRITERESPONSE              (0),
		.AV_SYMBOLS_PER_WORD            (4),
		.AV_ADDRESS_SYMBOLS             (0),
		.AV_BURSTCOUNT_SYMBOLS          (0),
		.AV_CONSTANT_BURST_BEHAVIOR     (0),
		.UAV_CONSTANT_BURST_BEHAVIOR    (0),
		.AV_REQUIRE_UNALIGNED_ADDRESSES (0),
		.CHIPSELECT_THROUGH_READLATENCY (0),
		.AV_READ_WAIT_CYCLES            (1),
		.AV_WRITE_WAIT_CYCLES           (0),
		.AV_SETUP_WAIT_CYCLES           (0),
		.AV_DATA_HOLD_CYCLES            (0)
	) nne_from_fpga_s1_translator (
		.clk                    (System_PLL_sys_clk_clk),                        //                      clk.clk
		.reset                  (n0_from_hps_reset_reset_bridge_in_reset_reset), //                    reset.reset
		.uav_address            (nne_from_fpga_s1_agent_m0_address),             // avalon_universal_slave_0.address
		.uav_burstcount         (nne_from_fpga_s1_agent_m0_burstcount),          //                         .burstcount
		.uav_read               (nne_from_fpga_s1_agent_m0_read),                //                         .read
		.uav_write              (nne_from_fpga_s1_agent_m0_write),               //                         .write
		.uav_waitrequest        (nne_from_fpga_s1_agent_m0_waitrequest),         //                         .waitrequest
		.uav_readdatavalid      (nne_from_fpga_s1_agent_m0_readdatavalid),       //                         .readdatavalid
		.uav_byteenable         (nne_from_fpga_s1_agent_m0_byteenable),          //                         .byteenable
		.uav_readdata           (nne_from_fpga_s1_agent_m0_readdata),            //                         .readdata
		.uav_writedata          (nne_from_fpga_s1_agent_m0_writedata),           //                         .writedata
		.uav_lock               (nne_from_fpga_s1_agent_m0_lock),                //                         .lock
		.uav_debugaccess        (nne_from_fpga_s1_agent_m0_debugaccess),         //                         .debugaccess
		.av_address             (nne_from_fpga_s1_address),                      //      avalon_anti_slave_0.address
		.av_readdata            (nne_from_fpga_s1_readdata),                     //                         .readdata
		.av_write               (),                                              //              (terminated)
		.av_read                (),                                              //              (terminated)
		.av_writedata           (),                                              //              (terminated)
		.av_begintransfer       (),                                              //              (terminated)
		.av_beginbursttransfer  (),                                              //              (terminated)
		.av_burstcount          (),                                              //              (terminated)
		.av_byteenable          (),                                              //              (terminated)
		.av_readdatavalid       (1'b0),                                          //              (terminated)
		.av_waitrequest         (1'b0),                                          //              (terminated)
		.av_writebyteenable     (),                                              //              (terminated)
		.av_lock                (),                                              //              (terminated)
		.av_chipselect          (),                                              //              (terminated)
		.av_clken               (),                                              //              (terminated)
		.uav_clken              (1'b0),                                          //              (terminated)
		.av_debugaccess         (),                                              //              (terminated)
		.av_outputenable        (),                                              //              (terminated)
		.uav_response           (),                                              //              (terminated)
		.av_response            (2'b00),                                         //              (terminated)
		.uav_writeresponsevalid (),                                              //              (terminated)
		.av_writeresponsevalid  (1'b0)                                           //              (terminated)
	);

	altera_merlin_slave_translator #(
		.AV_ADDRESS_W                   (2),
		.AV_DATA_W                      (32),
		.UAV_DATA_W                     (32),
		.AV_BURSTCOUNT_W                (1),
		.AV_BYTEENABLE_W                (1),
		.UAV_BYTEENABLE_W               (4),
		.UAV_ADDRESS_W                  (21),
		.UAV_BURSTCOUNT_W               (3),
		.AV_READLATENCY                 (0),
		.USE_READDATAVALID              (0),
		.USE_WAITREQUEST                (0),
		.USE_UAV_CLKEN                  (0),
		.USE_READRESPONSE               (0),
		.USE_WRITERESPONSE              (0),
		.AV_SYMBOLS_PER_WORD            (4),
		.AV_ADDRESS_SYMBOLS             (0),
		.AV_BURSTCOUNT_SYMBOLS          (0),
		.AV_CONSTANT_BURST_BEHAVIOR     (0),
		.UAV_CONSTANT_BURST_BEHAVIOR    (0),
		.AV_REQUIRE_UNALIGNED_ADDRESSES (0),
		.CHIPSELECT_THROUGH_READLATENCY (0),
		.AV_READ_WAIT_CYCLES            (1),
		.AV_WRITE_WAIT_CYCLES           (0),
		.AV_SETUP_WAIT_CYCLES           (0),
		.AV_DATA_HOLD_CYCLES            (0)
	) nsw_from_fpga_s1_translator (
		.clk                    (System_PLL_sys_clk_clk),                        //                      clk.clk
		.reset                  (n0_from_hps_reset_reset_bridge_in_reset_reset), //                    reset.reset
		.uav_address            (nsw_from_fpga_s1_agent_m0_address),             // avalon_universal_slave_0.address
		.uav_burstcount         (nsw_from_fpga_s1_agent_m0_burstcount),          //                         .burstcount
		.uav_read               (nsw_from_fpga_s1_agent_m0_read),                //                         .read
		.uav_write              (nsw_from_fpga_s1_agent_m0_write),               //                         .write
		.uav_waitrequest        (nsw_from_fpga_s1_agent_m0_waitrequest),         //                         .waitrequest
		.uav_readdatavalid      (nsw_from_fpga_s1_agent_m0_readdatavalid),       //                         .readdatavalid
		.uav_byteenable         (nsw_from_fpga_s1_agent_m0_byteenable),          //                         .byteenable
		.uav_readdata           (nsw_from_fpga_s1_agent_m0_readdata),            //                         .readdata
		.uav_writedata          (nsw_from_fpga_s1_agent_m0_writedata),           //                         .writedata
		.uav_lock               (nsw_from_fpga_s1_agent_m0_lock),                //                         .lock
		.uav_debugaccess        (nsw_from_fpga_s1_agent_m0_debugaccess),         //                         .debugaccess
		.av_address             (nsw_from_fpga_s1_address),                      //      avalon_anti_slave_0.address
		.av_readdata            (nsw_from_fpga_s1_readdata),                     //                         .readdata
		.av_write               (),                                              //              (terminated)
		.av_read                (),                                              //              (terminated)
		.av_writedata           (),                                              //              (terminated)
		.av_begintransfer       (),                                              //              (terminated)
		.av_beginbursttransfer  (),                                              //              (terminated)
		.av_burstcount          (),                                              //              (terminated)
		.av_byteenable          (),                                              //              (terminated)
		.av_readdatavalid       (1'b0),                                          //              (terminated)
		.av_waitrequest         (1'b0),                                          //              (terminated)
		.av_writebyteenable     (),                                              //              (terminated)
		.av_lock                (),                                              //              (terminated)
		.av_chipselect          (),                                              //              (terminated)
		.av_clken               (),                                              //              (terminated)
		.uav_clken              (1'b0),                                          //              (terminated)
		.av_debugaccess         (),                                              //              (terminated)
		.av_outputenable        (),                                              //              (terminated)
		.uav_response           (),                                              //              (terminated)
		.av_response            (2'b00),                                         //              (terminated)
		.uav_writeresponsevalid (),                                              //              (terminated)
		.av_writeresponsevalid  (1'b0)                                           //              (terminated)
	);

	altera_merlin_slave_translator #(
		.AV_ADDRESS_W                   (2),
		.AV_DATA_W                      (32),
		.UAV_DATA_W                     (32),
		.AV_BURSTCOUNT_W                (1),
		.AV_BYTEENABLE_W                (1),
		.UAV_BYTEENABLE_W               (4),
		.UAV_ADDRESS_W                  (21),
		.UAV_BURSTCOUNT_W               (3),
		.AV_READLATENCY                 (0),
		.USE_READDATAVALID              (0),
		.USE_WAITREQUEST                (0),
		.USE_UAV_CLKEN                  (0),
		.USE_READRESPONSE               (0),
		.USE_WRITERESPONSE              (0),
		.AV_SYMBOLS_PER_WORD            (4),
		.AV_ADDRESS_SYMBOLS             (0),
		.AV_BURSTCOUNT_SYMBOLS          (0),
		.AV_CONSTANT_BURST_BEHAVIOR     (0),
		.UAV_CONSTANT_BURST_BEHAVIOR    (0),
		.AV_REQUIRE_UNALIGNED_ADDRESSES (0),
		.CHIPSELECT_THROUGH_READLATENCY (0),
		.AV_READ_WAIT_CYCLES            (1),
		.AV_WRITE_WAIT_CYCLES           (0),
		.AV_SETUP_WAIT_CYCLES           (0),
		.AV_DATA_HOLD_CYCLES            (0)
	) nse_from_fpga_s1_translator (
		.clk                    (System_PLL_sys_clk_clk),                        //                      clk.clk
		.reset                  (n0_from_hps_reset_reset_bridge_in_reset_reset), //                    reset.reset
		.uav_address            (nse_from_fpga_s1_agent_m0_address),             // avalon_universal_slave_0.address
		.uav_burstcount         (nse_from_fpga_s1_agent_m0_burstcount),          //                         .burstcount
		.uav_read               (nse_from_fpga_s1_agent_m0_read),                //                         .read
		.uav_write              (nse_from_fpga_s1_agent_m0_write),               //                         .write
		.uav_waitrequest        (nse_from_fpga_s1_agent_m0_waitrequest),         //                         .waitrequest
		.uav_readdatavalid      (nse_from_fpga_s1_agent_m0_readdatavalid),       //                         .readdatavalid
		.uav_byteenable         (nse_from_fpga_s1_agent_m0_byteenable),          //                         .byteenable
		.uav_readdata           (nse_from_fpga_s1_agent_m0_readdata),            //                         .readdata
		.uav_writedata          (nse_from_fpga_s1_agent_m0_writedata),           //                         .writedata
		.uav_lock               (nse_from_fpga_s1_agent_m0_lock),                //                         .lock
		.uav_debugaccess        (nse_from_fpga_s1_agent_m0_debugaccess),         //                         .debugaccess
		.av_address             (nse_from_fpga_s1_address),                      //      avalon_anti_slave_0.address
		.av_readdata            (nse_from_fpga_s1_readdata),                     //                         .readdata
		.av_write               (),                                              //              (terminated)
		.av_read                (),                                              //              (terminated)
		.av_writedata           (),                                              //              (terminated)
		.av_begintransfer       (),                                              //              (terminated)
		.av_beginbursttransfer  (),                                              //              (terminated)
		.av_burstcount          (),                                              //              (terminated)
		.av_byteenable          (),                                              //              (terminated)
		.av_readdatavalid       (1'b0),                                          //              (terminated)
		.av_waitrequest         (1'b0),                                          //              (terminated)
		.av_writebyteenable     (),                                              //              (terminated)
		.av_lock                (),                                              //              (terminated)
		.av_chipselect          (),                                              //              (terminated)
		.av_clken               (),                                              //              (terminated)
		.uav_clken              (1'b0),                                          //              (terminated)
		.av_debugaccess         (),                                              //              (terminated)
		.av_outputenable        (),                                              //              (terminated)
		.uav_response           (),                                              //              (terminated)
		.av_response            (2'b00),                                         //              (terminated)
		.uav_writeresponsevalid (),                                              //              (terminated)
		.av_writeresponsevalid  (1'b0)                                           //              (terminated)
	);

	altera_merlin_slave_translator #(
		.AV_ADDRESS_W                   (2),
		.AV_DATA_W                      (32),
		.UAV_DATA_W                     (32),
		.AV_BURSTCOUNT_W                (1),
		.AV_BYTEENABLE_W                (1),
		.UAV_BYTEENABLE_W               (4),
		.UAV_ADDRESS_W                  (21),
		.UAV_BURSTCOUNT_W               (3),
		.AV_READLATENCY                 (0),
		.USE_READDATAVALID              (0),
		.USE_WAITREQUEST                (0),
		.USE_UAV_CLKEN                  (0),
		.USE_READRESPONSE               (0),
		.USE_WRITERESPONSE              (0),
		.AV_SYMBOLS_PER_WORD            (4),
		.AV_ADDRESS_SYMBOLS             (0),
		.AV_BURSTCOUNT_SYMBOLS          (0),
		.AV_CONSTANT_BURST_BEHAVIOR     (0),
		.UAV_CONSTANT_BURST_BEHAVIOR    (0),
		.AV_REQUIRE_UNALIGNED_ADDRESSES (0),
		.CHIPSELECT_THROUGH_READLATENCY (0),
		.AV_READ_WAIT_CYCLES            (1),
		.AV_WRITE_WAIT_CYCLES           (0),
		.AV_SETUP_WAIT_CYCLES           (0),
		.AV_DATA_HOLD_CYCLES            (0)
	) one9th_s1_translator (
		.clk                    (System_PLL_sys_clk_clk),                        //                      clk.clk
		.reset                  (n0_from_hps_reset_reset_bridge_in_reset_reset), //                    reset.reset
		.uav_address            (one9th_s1_agent_m0_address),                    // avalon_universal_slave_0.address
		.uav_burstcount         (one9th_s1_agent_m0_burstcount),                 //                         .burstcount
		.uav_read               (one9th_s1_agent_m0_read),                       //                         .read
		.uav_write              (one9th_s1_agent_m0_write),                      //                         .write
		.uav_waitrequest        (one9th_s1_agent_m0_waitrequest),                //                         .waitrequest
		.uav_readdatavalid      (one9th_s1_agent_m0_readdatavalid),              //                         .readdatavalid
		.uav_byteenable         (one9th_s1_agent_m0_byteenable),                 //                         .byteenable
		.uav_readdata           (one9th_s1_agent_m0_readdata),                   //                         .readdata
		.uav_writedata          (one9th_s1_agent_m0_writedata),                  //                         .writedata
		.uav_lock               (one9th_s1_agent_m0_lock),                       //                         .lock
		.uav_debugaccess        (one9th_s1_agent_m0_debugaccess),                //                         .debugaccess
		.av_address             (one9th_s1_address),                             //      avalon_anti_slave_0.address
		.av_write               (one9th_s1_write),                               //                         .write
		.av_readdata            (one9th_s1_readdata),                            //                         .readdata
		.av_writedata           (one9th_s1_writedata),                           //                         .writedata
		.av_chipselect          (one9th_s1_chipselect),                          //                         .chipselect
		.av_read                (),                                              //              (terminated)
		.av_begintransfer       (),                                              //              (terminated)
		.av_beginbursttransfer  (),                                              //              (terminated)
		.av_burstcount          (),                                              //              (terminated)
		.av_byteenable          (),                                              //              (terminated)
		.av_readdatavalid       (1'b0),                                          //              (terminated)
		.av_waitrequest         (1'b0),                                          //              (terminated)
		.av_writebyteenable     (),                                              //              (terminated)
		.av_lock                (),                                              //              (terminated)
		.av_clken               (),                                              //              (terminated)
		.uav_clken              (1'b0),                                          //              (terminated)
		.av_debugaccess         (),                                              //              (terminated)
		.av_outputenable        (),                                              //              (terminated)
		.uav_response           (),                                              //              (terminated)
		.av_response            (2'b00),                                         //              (terminated)
		.uav_writeresponsevalid (),                                              //              (terminated)
		.av_writeresponsevalid  (1'b0)                                           //              (terminated)
	);

	altera_merlin_slave_translator #(
		.AV_ADDRESS_W                   (2),
		.AV_DATA_W                      (32),
		.UAV_DATA_W                     (32),
		.AV_BURSTCOUNT_W                (1),
		.AV_BYTEENABLE_W                (1),
		.UAV_BYTEENABLE_W               (4),
		.UAV_ADDRESS_W                  (21),
		.UAV_BURSTCOUNT_W               (3),
		.AV_READLATENCY                 (0),
		.USE_READDATAVALID              (0),
		.USE_WAITREQUEST                (0),
		.USE_UAV_CLKEN                  (0),
		.USE_READRESPONSE               (0),
		.USE_WRITERESPONSE              (0),
		.AV_SYMBOLS_PER_WORD            (4),
		.AV_ADDRESS_SYMBOLS             (0),
		.AV_BURSTCOUNT_SYMBOLS          (0),
		.AV_CONSTANT_BURST_BEHAVIOR     (0),
		.UAV_CONSTANT_BURST_BEHAVIOR    (0),
		.AV_REQUIRE_UNALIGNED_ADDRESSES (0),
		.CHIPSELECT_THROUGH_READLATENCY (0),
		.AV_READ_WAIT_CYCLES            (1),
		.AV_WRITE_WAIT_CYCLES           (0),
		.AV_SETUP_WAIT_CYCLES           (0),
		.AV_DATA_HOLD_CYCLES            (0)
	) one36th_s1_translator (
		.clk                    (System_PLL_sys_clk_clk),                        //                      clk.clk
		.reset                  (n0_from_hps_reset_reset_bridge_in_reset_reset), //                    reset.reset
		.uav_address            (one36th_s1_agent_m0_address),                   // avalon_universal_slave_0.address
		.uav_burstcount         (one36th_s1_agent_m0_burstcount),                //                         .burstcount
		.uav_read               (one36th_s1_agent_m0_read),                      //                         .read
		.uav_write              (one36th_s1_agent_m0_write),                     //                         .write
		.uav_waitrequest        (one36th_s1_agent_m0_waitrequest),               //                         .waitrequest
		.uav_readdatavalid      (one36th_s1_agent_m0_readdatavalid),             //                         .readdatavalid
		.uav_byteenable         (one36th_s1_agent_m0_byteenable),                //                         .byteenable
		.uav_readdata           (one36th_s1_agent_m0_readdata),                  //                         .readdata
		.uav_writedata          (one36th_s1_agent_m0_writedata),                 //                         .writedata
		.uav_lock               (one36th_s1_agent_m0_lock),                      //                         .lock
		.uav_debugaccess        (one36th_s1_agent_m0_debugaccess),               //                         .debugaccess
		.av_address             (one36th_s1_address),                            //      avalon_anti_slave_0.address
		.av_write               (one36th_s1_write),                              //                         .write
		.av_readdata            (one36th_s1_readdata),                           //                         .readdata
		.av_writedata           (one36th_s1_writedata),                          //                         .writedata
		.av_chipselect          (one36th_s1_chipselect),                         //                         .chipselect
		.av_read                (),                                              //              (terminated)
		.av_begintransfer       (),                                              //              (terminated)
		.av_beginbursttransfer  (),                                              //              (terminated)
		.av_burstcount          (),                                              //              (terminated)
		.av_byteenable          (),                                              //              (terminated)
		.av_readdatavalid       (1'b0),                                          //              (terminated)
		.av_waitrequest         (1'b0),                                          //              (terminated)
		.av_writebyteenable     (),                                              //              (terminated)
		.av_lock                (),                                              //              (terminated)
		.av_clken               (),                                              //              (terminated)
		.uav_clken              (1'b0),                                          //              (terminated)
		.av_debugaccess         (),                                              //              (terminated)
		.av_outputenable        (),                                              //              (terminated)
		.uav_response           (),                                              //              (terminated)
		.av_response            (2'b00),                                         //              (terminated)
		.uav_writeresponsevalid (),                                              //              (terminated)
		.av_writeresponsevalid  (1'b0)                                           //              (terminated)
	);

	altera_merlin_slave_translator #(
		.AV_ADDRESS_W                   (2),
		.AV_DATA_W                      (32),
		.UAV_DATA_W                     (32),
		.AV_BURSTCOUNT_W                (1),
		.AV_BYTEENABLE_W                (1),
		.UAV_BYTEENABLE_W               (4),
		.UAV_ADDRESS_W                  (21),
		.UAV_BURSTCOUNT_W               (3),
		.AV_READLATENCY                 (0),
		.USE_READDATAVALID              (0),
		.USE_WAITREQUEST                (0),
		.USE_UAV_CLKEN                  (0),
		.USE_READRESPONSE               (0),
		.USE_WRITERESPONSE              (0),
		.AV_SYMBOLS_PER_WORD            (4),
		.AV_ADDRESS_SYMBOLS             (0),
		.AV_BURSTCOUNT_SYMBOLS          (0),
		.AV_CONSTANT_BURST_BEHAVIOR     (0),
		.UAV_CONSTANT_BURST_BEHAVIOR    (0),
		.AV_REQUIRE_UNALIGNED_ADDRESSES (0),
		.CHIPSELECT_THROUGH_READLATENCY (0),
		.AV_READ_WAIT_CYCLES            (1),
		.AV_WRITE_WAIT_CYCLES           (0),
		.AV_SETUP_WAIT_CYCLES           (0),
		.AV_DATA_HOLD_CYCLES            (0)
	) omega_s1_translator (
		.clk                    (System_PLL_sys_clk_clk),                        //                      clk.clk
		.reset                  (n0_from_hps_reset_reset_bridge_in_reset_reset), //                    reset.reset
		.uav_address            (omega_s1_agent_m0_address),                     // avalon_universal_slave_0.address
		.uav_burstcount         (omega_s1_agent_m0_burstcount),                  //                         .burstcount
		.uav_read               (omega_s1_agent_m0_read),                        //                         .read
		.uav_write              (omega_s1_agent_m0_write),                       //                         .write
		.uav_waitrequest        (omega_s1_agent_m0_waitrequest),                 //                         .waitrequest
		.uav_readdatavalid      (omega_s1_agent_m0_readdatavalid),               //                         .readdatavalid
		.uav_byteenable         (omega_s1_agent_m0_byteenable),                  //                         .byteenable
		.uav_readdata           (omega_s1_agent_m0_readdata),                    //                         .readdata
		.uav_writedata          (omega_s1_agent_m0_writedata),                   //                         .writedata
		.uav_lock               (omega_s1_agent_m0_lock),                        //                         .lock
		.uav_debugaccess        (omega_s1_agent_m0_debugaccess),                 //                         .debugaccess
		.av_address             (omega_s1_address),                              //      avalon_anti_slave_0.address
		.av_write               (omega_s1_write),                                //                         .write
		.av_readdata            (omega_s1_readdata),                             //                         .readdata
		.av_writedata           (omega_s1_writedata),                            //                         .writedata
		.av_chipselect          (omega_s1_chipselect),                           //                         .chipselect
		.av_read                (),                                              //              (terminated)
		.av_begintransfer       (),                                              //              (terminated)
		.av_beginbursttransfer  (),                                              //              (terminated)
		.av_burstcount          (),                                              //              (terminated)
		.av_byteenable          (),                                              //              (terminated)
		.av_readdatavalid       (1'b0),                                          //              (terminated)
		.av_waitrequest         (1'b0),                                          //              (terminated)
		.av_writebyteenable     (),                                              //              (terminated)
		.av_lock                (),                                              //              (terminated)
		.av_clken               (),                                              //              (terminated)
		.uav_clken              (1'b0),                                          //              (terminated)
		.av_debugaccess         (),                                              //              (terminated)
		.av_outputenable        (),                                              //              (terminated)
		.uav_response           (),                                              //              (terminated)
		.av_response            (2'b00),                                         //              (terminated)
		.uav_writeresponsevalid (),                                              //              (terminated)
		.av_writeresponsevalid  (1'b0)                                           //              (terminated)
	);

	altera_merlin_slave_translator #(
		.AV_ADDRESS_W                   (2),
		.AV_DATA_W                      (32),
		.UAV_DATA_W                     (32),
		.AV_BURSTCOUNT_W                (1),
		.AV_BYTEENABLE_W                (1),
		.UAV_BYTEENABLE_W               (4),
		.UAV_ADDRESS_W                  (21),
		.UAV_BURSTCOUNT_W               (3),
		.AV_READLATENCY                 (0),
		.USE_READDATAVALID              (0),
		.USE_WAITREQUEST                (0),
		.USE_UAV_CLKEN                  (0),
		.USE_READRESPONSE               (0),
		.USE_WRITERESPONSE              (0),
		.AV_SYMBOLS_PER_WORD            (4),
		.AV_ADDRESS_SYMBOLS             (0),
		.AV_BURSTCOUNT_SYMBOLS          (0),
		.AV_CONSTANT_BURST_BEHAVIOR     (0),
		.UAV_CONSTANT_BURST_BEHAVIOR    (0),
		.AV_REQUIRE_UNALIGNED_ADDRESSES (0),
		.CHIPSELECT_THROUGH_READLATENCY (0),
		.AV_READ_WAIT_CYCLES            (1),
		.AV_WRITE_WAIT_CYCLES           (0),
		.AV_SETUP_WAIT_CYCLES           (0),
		.AV_DATA_HOLD_CYCLES            (0)
	) ux_s1_translator (
		.clk                    (System_PLL_sys_clk_clk),                        //                      clk.clk
		.reset                  (n0_from_hps_reset_reset_bridge_in_reset_reset), //                    reset.reset
		.uav_address            (ux_s1_agent_m0_address),                        // avalon_universal_slave_0.address
		.uav_burstcount         (ux_s1_agent_m0_burstcount),                     //                         .burstcount
		.uav_read               (ux_s1_agent_m0_read),                           //                         .read
		.uav_write              (ux_s1_agent_m0_write),                          //                         .write
		.uav_waitrequest        (ux_s1_agent_m0_waitrequest),                    //                         .waitrequest
		.uav_readdatavalid      (ux_s1_agent_m0_readdatavalid),                  //                         .readdatavalid
		.uav_byteenable         (ux_s1_agent_m0_byteenable),                     //                         .byteenable
		.uav_readdata           (ux_s1_agent_m0_readdata),                       //                         .readdata
		.uav_writedata          (ux_s1_agent_m0_writedata),                      //                         .writedata
		.uav_lock               (ux_s1_agent_m0_lock),                           //                         .lock
		.uav_debugaccess        (ux_s1_agent_m0_debugaccess),                    //                         .debugaccess
		.av_address             (ux_s1_address),                                 //      avalon_anti_slave_0.address
		.av_readdata            (ux_s1_readdata),                                //                         .readdata
		.av_write               (),                                              //              (terminated)
		.av_read                (),                                              //              (terminated)
		.av_writedata           (),                                              //              (terminated)
		.av_begintransfer       (),                                              //              (terminated)
		.av_beginbursttransfer  (),                                              //              (terminated)
		.av_burstcount          (),                                              //              (terminated)
		.av_byteenable          (),                                              //              (terminated)
		.av_readdatavalid       (1'b0),                                          //              (terminated)
		.av_waitrequest         (1'b0),                                          //              (terminated)
		.av_writebyteenable     (),                                              //              (terminated)
		.av_lock                (),                                              //              (terminated)
		.av_chipselect          (),                                              //              (terminated)
		.av_clken               (),                                              //              (terminated)
		.uav_clken              (1'b0),                                          //              (terminated)
		.av_debugaccess         (),                                              //              (terminated)
		.av_outputenable        (),                                              //              (terminated)
		.uav_response           (),                                              //              (terminated)
		.av_response            (2'b00),                                         //              (terminated)
		.uav_writeresponsevalid (),                                              //              (terminated)
		.av_writeresponsevalid  (1'b0)                                           //              (terminated)
	);

	altera_merlin_slave_translator #(
		.AV_ADDRESS_W                   (2),
		.AV_DATA_W                      (32),
		.UAV_DATA_W                     (32),
		.AV_BURSTCOUNT_W                (1),
		.AV_BYTEENABLE_W                (1),
		.UAV_BYTEENABLE_W               (4),
		.UAV_ADDRESS_W                  (21),
		.UAV_BURSTCOUNT_W               (3),
		.AV_READLATENCY                 (0),
		.USE_READDATAVALID              (0),
		.USE_WAITREQUEST                (0),
		.USE_UAV_CLKEN                  (0),
		.USE_READRESPONSE               (0),
		.USE_WRITERESPONSE              (0),
		.AV_SYMBOLS_PER_WORD            (4),
		.AV_ADDRESS_SYMBOLS             (0),
		.AV_BURSTCOUNT_SYMBOLS          (0),
		.AV_CONSTANT_BURST_BEHAVIOR     (0),
		.UAV_CONSTANT_BURST_BEHAVIOR    (0),
		.AV_REQUIRE_UNALIGNED_ADDRESSES (0),
		.CHIPSELECT_THROUGH_READLATENCY (0),
		.AV_READ_WAIT_CYCLES            (1),
		.AV_WRITE_WAIT_CYCLES           (0),
		.AV_SETUP_WAIT_CYCLES           (0),
		.AV_DATA_HOLD_CYCLES            (0)
	) uy_s1_translator (
		.clk                    (System_PLL_sys_clk_clk),                        //                      clk.clk
		.reset                  (n0_from_hps_reset_reset_bridge_in_reset_reset), //                    reset.reset
		.uav_address            (uy_s1_agent_m0_address),                        // avalon_universal_slave_0.address
		.uav_burstcount         (uy_s1_agent_m0_burstcount),                     //                         .burstcount
		.uav_read               (uy_s1_agent_m0_read),                           //                         .read
		.uav_write              (uy_s1_agent_m0_write),                          //                         .write
		.uav_waitrequest        (uy_s1_agent_m0_waitrequest),                    //                         .waitrequest
		.uav_readdatavalid      (uy_s1_agent_m0_readdatavalid),                  //                         .readdatavalid
		.uav_byteenable         (uy_s1_agent_m0_byteenable),                     //                         .byteenable
		.uav_readdata           (uy_s1_agent_m0_readdata),                       //                         .readdata
		.uav_writedata          (uy_s1_agent_m0_writedata),                      //                         .writedata
		.uav_lock               (uy_s1_agent_m0_lock),                           //                         .lock
		.uav_debugaccess        (uy_s1_agent_m0_debugaccess),                    //                         .debugaccess
		.av_address             (uy_s1_address),                                 //      avalon_anti_slave_0.address
		.av_readdata            (uy_s1_readdata),                                //                         .readdata
		.av_write               (),                                              //              (terminated)
		.av_read                (),                                              //              (terminated)
		.av_writedata           (),                                              //              (terminated)
		.av_begintransfer       (),                                              //              (terminated)
		.av_beginbursttransfer  (),                                              //              (terminated)
		.av_burstcount          (),                                              //              (terminated)
		.av_byteenable          (),                                              //              (terminated)
		.av_readdatavalid       (1'b0),                                          //              (terminated)
		.av_waitrequest         (1'b0),                                          //              (terminated)
		.av_writebyteenable     (),                                              //              (terminated)
		.av_lock                (),                                              //              (terminated)
		.av_chipselect          (),                                              //              (terminated)
		.av_clken               (),                                              //              (terminated)
		.uav_clken              (1'b0),                                          //              (terminated)
		.av_debugaccess         (),                                              //              (terminated)
		.av_outputenable        (),                                              //              (terminated)
		.uav_response           (),                                              //              (terminated)
		.av_response            (2'b00),                                         //              (terminated)
		.uav_writeresponsevalid (),                                              //              (terminated)
		.av_writeresponsevalid  (1'b0)                                           //              (terminated)
	);

	altera_merlin_slave_translator #(
		.AV_ADDRESS_W                   (2),
		.AV_DATA_W                      (32),
		.UAV_DATA_W                     (32),
		.AV_BURSTCOUNT_W                (1),
		.AV_BYTEENABLE_W                (1),
		.UAV_BYTEENABLE_W               (4),
		.UAV_ADDRESS_W                  (21),
		.UAV_BURSTCOUNT_W               (3),
		.AV_READLATENCY                 (0),
		.USE_READDATAVALID              (0),
		.USE_WAITREQUEST                (0),
		.USE_UAV_CLKEN                  (0),
		.USE_READRESPONSE               (0),
		.USE_WRITERESPONSE              (0),
		.AV_SYMBOLS_PER_WORD            (4),
		.AV_ADDRESS_SYMBOLS             (0),
		.AV_BURSTCOUNT_SYMBOLS          (0),
		.AV_CONSTANT_BURST_BEHAVIOR     (0),
		.UAV_CONSTANT_BURST_BEHAVIOR    (0),
		.AV_REQUIRE_UNALIGNED_ADDRESSES (0),
		.CHIPSELECT_THROUGH_READLATENCY (0),
		.AV_READ_WAIT_CYCLES            (1),
		.AV_WRITE_WAIT_CYCLES           (0),
		.AV_SETUP_WAIT_CYCLES           (0),
		.AV_DATA_HOLD_CYCLES            (0)
	) pipes_s1_translator (
		.clk                    (System_PLL_sys_clk_clk),                        //                      clk.clk
		.reset                  (n0_from_hps_reset_reset_bridge_in_reset_reset), //                    reset.reset
		.uav_address            (pipes_s1_agent_m0_address),                     // avalon_universal_slave_0.address
		.uav_burstcount         (pipes_s1_agent_m0_burstcount),                  //                         .burstcount
		.uav_read               (pipes_s1_agent_m0_read),                        //                         .read
		.uav_write              (pipes_s1_agent_m0_write),                       //                         .write
		.uav_waitrequest        (pipes_s1_agent_m0_waitrequest),                 //                         .waitrequest
		.uav_readdatavalid      (pipes_s1_agent_m0_readdatavalid),               //                         .readdatavalid
		.uav_byteenable         (pipes_s1_agent_m0_byteenable),                  //                         .byteenable
		.uav_readdata           (pipes_s1_agent_m0_readdata),                    //                         .readdata
		.uav_writedata          (pipes_s1_agent_m0_writedata),                   //                         .writedata
		.uav_lock               (pipes_s1_agent_m0_lock),                        //                         .lock
		.uav_debugaccess        (pipes_s1_agent_m0_debugaccess),                 //                         .debugaccess
		.av_address             (pipes_s1_address),                              //      avalon_anti_slave_0.address
		.av_readdata            (pipes_s1_readdata),                             //                         .readdata
		.av_write               (),                                              //              (terminated)
		.av_read                (),                                              //              (terminated)
		.av_writedata           (),                                              //              (terminated)
		.av_begintransfer       (),                                              //              (terminated)
		.av_beginbursttransfer  (),                                              //              (terminated)
		.av_burstcount          (),                                              //              (terminated)
		.av_byteenable          (),                                              //              (terminated)
		.av_readdatavalid       (1'b0),                                          //              (terminated)
		.av_waitrequest         (1'b0),                                          //              (terminated)
		.av_writebyteenable     (),                                              //              (terminated)
		.av_lock                (),                                              //              (terminated)
		.av_chipselect          (),                                              //              (terminated)
		.av_clken               (),                                              //              (terminated)
		.uav_clken              (1'b0),                                          //              (terminated)
		.av_debugaccess         (),                                              //              (terminated)
		.av_outputenable        (),                                              //              (terminated)
		.uav_response           (),                                              //              (terminated)
		.av_response            (2'b00),                                         //              (terminated)
		.uav_writeresponsevalid (),                                              //              (terminated)
		.av_writeresponsevalid  (1'b0)                                           //              (terminated)
	);

	altera_merlin_slave_translator #(
		.AV_ADDRESS_W                   (2),
		.AV_DATA_W                      (32),
		.UAV_DATA_W                     (32),
		.AV_BURSTCOUNT_W                (1),
		.AV_BYTEENABLE_W                (4),
		.UAV_BYTEENABLE_W               (4),
		.UAV_ADDRESS_W                  (21),
		.UAV_BURSTCOUNT_W               (3),
		.AV_READLATENCY                 (0),
		.USE_READDATAVALID              (0),
		.USE_WAITREQUEST                (1),
		.USE_UAV_CLKEN                  (0),
		.USE_READRESPONSE               (0),
		.USE_WRITERESPONSE              (0),
		.AV_SYMBOLS_PER_WORD            (4),
		.AV_ADDRESS_SYMBOLS             (0),
		.AV_BURSTCOUNT_SYMBOLS          (0),
		.AV_CONSTANT_BURST_BEHAVIOR     (0),
		.UAV_CONSTANT_BURST_BEHAVIOR    (0),
		.AV_REQUIRE_UNALIGNED_ADDRESSES (0),
		.CHIPSELECT_THROUGH_READLATENCY (0),
		.AV_READ_WAIT_CYCLES            (0),
		.AV_WRITE_WAIT_CYCLES           (0),
		.AV_SETUP_WAIT_CYCLES           (0),
		.AV_DATA_HOLD_CYCLES            (0)
	) pixel_dma_addr_translation_slave_translator (
		.clk                    (System_PLL_sys_clk_clk),                                  //                      clk.clk
		.reset                  (AV_Config_reset_reset_bridge_in_reset_reset),             //                    reset.reset
		.uav_address            (pixel_dma_addr_translation_slave_agent_m0_address),       // avalon_universal_slave_0.address
		.uav_burstcount         (pixel_dma_addr_translation_slave_agent_m0_burstcount),    //                         .burstcount
		.uav_read               (pixel_dma_addr_translation_slave_agent_m0_read),          //                         .read
		.uav_write              (pixel_dma_addr_translation_slave_agent_m0_write),         //                         .write
		.uav_waitrequest        (pixel_dma_addr_translation_slave_agent_m0_waitrequest),   //                         .waitrequest
		.uav_readdatavalid      (pixel_dma_addr_translation_slave_agent_m0_readdatavalid), //                         .readdatavalid
		.uav_byteenable         (pixel_dma_addr_translation_slave_agent_m0_byteenable),    //                         .byteenable
		.uav_readdata           (pixel_dma_addr_translation_slave_agent_m0_readdata),      //                         .readdata
		.uav_writedata          (pixel_dma_addr_translation_slave_agent_m0_writedata),     //                         .writedata
		.uav_lock               (pixel_dma_addr_translation_slave_agent_m0_lock),          //                         .lock
		.uav_debugaccess        (pixel_dma_addr_translation_slave_agent_m0_debugaccess),   //                         .debugaccess
		.av_address             (Pixel_DMA_Addr_Translation_slave_address),                //      avalon_anti_slave_0.address
		.av_write               (Pixel_DMA_Addr_Translation_slave_write),                  //                         .write
		.av_read                (Pixel_DMA_Addr_Translation_slave_read),                   //                         .read
		.av_readdata            (Pixel_DMA_Addr_Translation_slave_readdata),               //                         .readdata
		.av_writedata           (Pixel_DMA_Addr_Translation_slave_writedata),              //                         .writedata
		.av_byteenable          (Pixel_DMA_Addr_Translation_slave_byteenable),             //                         .byteenable
		.av_waitrequest         (Pixel_DMA_Addr_Translation_slave_waitrequest),            //                         .waitrequest
		.av_begintransfer       (),                                                        //              (terminated)
		.av_beginbursttransfer  (),                                                        //              (terminated)
		.av_burstcount          (),                                                        //              (terminated)
		.av_readdatavalid       (1'b0),                                                    //              (terminated)
		.av_writebyteenable     (),                                                        //              (terminated)
		.av_lock                (),                                                        //              (terminated)
		.av_chipselect          (),                                                        //              (terminated)
		.av_clken               (),                                                        //              (terminated)
		.uav_clken              (1'b0),                                                    //              (terminated)
		.av_debugaccess         (),                                                        //              (terminated)
		.av_outputenable        (),                                                        //              (terminated)
		.uav_response           (),                                                        //              (terminated)
		.av_response            (2'b00),                                                   //              (terminated)
		.uav_writeresponsevalid (),                                                        //              (terminated)
		.av_writeresponsevalid  (1'b0)                                                     //              (terminated)
	);

	altera_merlin_axi_master_ni #(
		.ID_WIDTH                  (12),
		.ADDR_WIDTH                (21),
		.RDATA_WIDTH               (32),
		.WDATA_WIDTH               (32),
		.ADDR_USER_WIDTH           (1),
		.DATA_USER_WIDTH           (1),
		.AXI_BURST_LENGTH_WIDTH    (4),
		.AXI_LOCK_WIDTH            (2),
		.AXI_VERSION               ("AXI3"),
		.WRITE_ISSUING_CAPABILITY  (8),
		.READ_ISSUING_CAPABILITY   (8),
		.PKT_BEGIN_BURST           (84),
		.PKT_CACHE_H               (114),
		.PKT_CACHE_L               (111),
		.PKT_ADDR_SIDEBAND_H       (82),
		.PKT_ADDR_SIDEBAND_L       (82),
		.PKT_PROTECTION_H          (110),
		.PKT_PROTECTION_L          (108),
		.PKT_BURST_SIZE_H          (79),
		.PKT_BURST_SIZE_L          (77),
		.PKT_BURST_TYPE_H          (81),
		.PKT_BURST_TYPE_L          (80),
		.PKT_RESPONSE_STATUS_L     (115),
		.PKT_RESPONSE_STATUS_H     (116),
		.PKT_BURSTWRAP_H           (76),
		.PKT_BURSTWRAP_L           (70),
		.PKT_BYTE_CNT_H            (69),
		.PKT_BYTE_CNT_L            (63),
		.PKT_ADDR_H                (56),
		.PKT_ADDR_L                (36),
		.PKT_TRANS_EXCLUSIVE       (62),
		.PKT_TRANS_LOCK            (61),
		.PKT_TRANS_COMPRESSED_READ (57),
		.PKT_TRANS_POSTED          (58),
		.PKT_TRANS_WRITE           (59),
		.PKT_TRANS_READ            (60),
		.PKT_DATA_H                (31),
		.PKT_DATA_L                (0),
		.PKT_BYTEEN_H              (35),
		.PKT_BYTEEN_L              (32),
		.PKT_SRC_ID_H              (90),
		.PKT_SRC_ID_L              (86),
		.PKT_DEST_ID_H             (95),
		.PKT_DEST_ID_L             (91),
		.PKT_THREAD_ID_H           (107),
		.PKT_THREAD_ID_L           (96),
		.PKT_QOS_L                 (85),
		.PKT_QOS_H                 (85),
		.PKT_ORI_BURST_SIZE_L      (117),
		.PKT_ORI_BURST_SIZE_H      (119),
		.PKT_DATA_SIDEBAND_H       (83),
		.PKT_DATA_SIDEBAND_L       (83),
		.ST_DATA_W                 (120),
		.ST_CHANNEL_W              (27),
		.ID                        (0)
	) arm_a9_hps_h2f_lw_axi_master_agent (
		.aclk                   (System_PLL_sys_clk_clk),                                                    //              clk.clk
		.aresetn                (~ARM_A9_HPS_h2f_lw_axi_master_agent_clk_reset_reset_bridge_in_reset_reset), //        clk_reset.reset_n
		.write_cp_valid         (arm_a9_hps_h2f_lw_axi_master_agent_write_cp_valid),                         //         write_cp.valid
		.write_cp_data          (arm_a9_hps_h2f_lw_axi_master_agent_write_cp_data),                          //                 .data
		.write_cp_startofpacket (arm_a9_hps_h2f_lw_axi_master_agent_write_cp_startofpacket),                 //                 .startofpacket
		.write_cp_endofpacket   (arm_a9_hps_h2f_lw_axi_master_agent_write_cp_endofpacket),                   //                 .endofpacket
		.write_cp_ready         (arm_a9_hps_h2f_lw_axi_master_agent_write_cp_ready),                         //                 .ready
		.write_rp_valid         (arm_a9_hps_h2f_lw_axi_master_wr_limiter_rsp_src_valid),                     //         write_rp.valid
		.write_rp_data          (arm_a9_hps_h2f_lw_axi_master_wr_limiter_rsp_src_data),                      //                 .data
		.write_rp_channel       (arm_a9_hps_h2f_lw_axi_master_wr_limiter_rsp_src_channel),                   //                 .channel
		.write_rp_startofpacket (arm_a9_hps_h2f_lw_axi_master_wr_limiter_rsp_src_startofpacket),             //                 .startofpacket
		.write_rp_endofpacket   (arm_a9_hps_h2f_lw_axi_master_wr_limiter_rsp_src_endofpacket),               //                 .endofpacket
		.write_rp_ready         (arm_a9_hps_h2f_lw_axi_master_wr_limiter_rsp_src_ready),                     //                 .ready
		.read_cp_valid          (arm_a9_hps_h2f_lw_axi_master_agent_read_cp_valid),                          //          read_cp.valid
		.read_cp_data           (arm_a9_hps_h2f_lw_axi_master_agent_read_cp_data),                           //                 .data
		.read_cp_startofpacket  (arm_a9_hps_h2f_lw_axi_master_agent_read_cp_startofpacket),                  //                 .startofpacket
		.read_cp_endofpacket    (arm_a9_hps_h2f_lw_axi_master_agent_read_cp_endofpacket),                    //                 .endofpacket
		.read_cp_ready          (arm_a9_hps_h2f_lw_axi_master_agent_read_cp_ready),                          //                 .ready
		.read_rp_valid          (arm_a9_hps_h2f_lw_axi_master_rd_limiter_rsp_src_valid),                     //          read_rp.valid
		.read_rp_data           (arm_a9_hps_h2f_lw_axi_master_rd_limiter_rsp_src_data),                      //                 .data
		.read_rp_channel        (arm_a9_hps_h2f_lw_axi_master_rd_limiter_rsp_src_channel),                   //                 .channel
		.read_rp_startofpacket  (arm_a9_hps_h2f_lw_axi_master_rd_limiter_rsp_src_startofpacket),             //                 .startofpacket
		.read_rp_endofpacket    (arm_a9_hps_h2f_lw_axi_master_rd_limiter_rsp_src_endofpacket),               //                 .endofpacket
		.read_rp_ready          (arm_a9_hps_h2f_lw_axi_master_rd_limiter_rsp_src_ready),                     //                 .ready
		.awid                   (ARM_A9_HPS_h2f_lw_axi_master_awid),                                         // altera_axi_slave.awid
		.awaddr                 (ARM_A9_HPS_h2f_lw_axi_master_awaddr),                                       //                 .awaddr
		.awlen                  (ARM_A9_HPS_h2f_lw_axi_master_awlen),                                        //                 .awlen
		.awsize                 (ARM_A9_HPS_h2f_lw_axi_master_awsize),                                       //                 .awsize
		.awburst                (ARM_A9_HPS_h2f_lw_axi_master_awburst),                                      //                 .awburst
		.awlock                 (ARM_A9_HPS_h2f_lw_axi_master_awlock),                                       //                 .awlock
		.awcache                (ARM_A9_HPS_h2f_lw_axi_master_awcache),                                      //                 .awcache
		.awprot                 (ARM_A9_HPS_h2f_lw_axi_master_awprot),                                       //                 .awprot
		.awvalid                (ARM_A9_HPS_h2f_lw_axi_master_awvalid),                                      //                 .awvalid
		.awready                (ARM_A9_HPS_h2f_lw_axi_master_awready),                                      //                 .awready
		.wid                    (ARM_A9_HPS_h2f_lw_axi_master_wid),                                          //                 .wid
		.wdata                  (ARM_A9_HPS_h2f_lw_axi_master_wdata),                                        //                 .wdata
		.wstrb                  (ARM_A9_HPS_h2f_lw_axi_master_wstrb),                                        //                 .wstrb
		.wlast                  (ARM_A9_HPS_h2f_lw_axi_master_wlast),                                        //                 .wlast
		.wvalid                 (ARM_A9_HPS_h2f_lw_axi_master_wvalid),                                       //                 .wvalid
		.wready                 (ARM_A9_HPS_h2f_lw_axi_master_wready),                                       //                 .wready
		.bid                    (ARM_A9_HPS_h2f_lw_axi_master_bid),                                          //                 .bid
		.bresp                  (ARM_A9_HPS_h2f_lw_axi_master_bresp),                                        //                 .bresp
		.bvalid                 (ARM_A9_HPS_h2f_lw_axi_master_bvalid),                                       //                 .bvalid
		.bready                 (ARM_A9_HPS_h2f_lw_axi_master_bready),                                       //                 .bready
		.arid                   (ARM_A9_HPS_h2f_lw_axi_master_arid),                                         //                 .arid
		.araddr                 (ARM_A9_HPS_h2f_lw_axi_master_araddr),                                       //                 .araddr
		.arlen                  (ARM_A9_HPS_h2f_lw_axi_master_arlen),                                        //                 .arlen
		.arsize                 (ARM_A9_HPS_h2f_lw_axi_master_arsize),                                       //                 .arsize
		.arburst                (ARM_A9_HPS_h2f_lw_axi_master_arburst),                                      //                 .arburst
		.arlock                 (ARM_A9_HPS_h2f_lw_axi_master_arlock),                                       //                 .arlock
		.arcache                (ARM_A9_HPS_h2f_lw_axi_master_arcache),                                      //                 .arcache
		.arprot                 (ARM_A9_HPS_h2f_lw_axi_master_arprot),                                       //                 .arprot
		.arvalid                (ARM_A9_HPS_h2f_lw_axi_master_arvalid),                                      //                 .arvalid
		.arready                (ARM_A9_HPS_h2f_lw_axi_master_arready),                                      //                 .arready
		.rid                    (ARM_A9_HPS_h2f_lw_axi_master_rid),                                          //                 .rid
		.rdata                  (ARM_A9_HPS_h2f_lw_axi_master_rdata),                                        //                 .rdata
		.rresp                  (ARM_A9_HPS_h2f_lw_axi_master_rresp),                                        //                 .rresp
		.rlast                  (ARM_A9_HPS_h2f_lw_axi_master_rlast),                                        //                 .rlast
		.rvalid                 (ARM_A9_HPS_h2f_lw_axi_master_rvalid),                                       //                 .rvalid
		.rready                 (ARM_A9_HPS_h2f_lw_axi_master_rready),                                       //                 .rready
		.awuser                 (1'b0),                                                                      //      (terminated)
		.aruser                 (1'b0),                                                                      //      (terminated)
		.awqos                  (4'b0000),                                                                   //      (terminated)
		.arqos                  (4'b0000),                                                                   //      (terminated)
		.awregion               (4'b0000),                                                                   //      (terminated)
		.arregion               (4'b0000),                                                                   //      (terminated)
		.wuser                  (1'b0),                                                                      //      (terminated)
		.ruser                  (),                                                                          //      (terminated)
		.buser                  ()                                                                           //      (terminated)
	);

	altera_merlin_slave_agent #(
		.PKT_ORI_BURST_SIZE_H      (119),
		.PKT_ORI_BURST_SIZE_L      (117),
		.PKT_RESPONSE_STATUS_H     (116),
		.PKT_RESPONSE_STATUS_L     (115),
		.PKT_BURST_SIZE_H          (79),
		.PKT_BURST_SIZE_L          (77),
		.PKT_TRANS_LOCK            (61),
		.PKT_BEGIN_BURST           (84),
		.PKT_PROTECTION_H          (110),
		.PKT_PROTECTION_L          (108),
		.PKT_BURSTWRAP_H           (76),
		.PKT_BURSTWRAP_L           (70),
		.PKT_BYTE_CNT_H            (69),
		.PKT_BYTE_CNT_L            (63),
		.PKT_ADDR_H                (56),
		.PKT_ADDR_L                (36),
		.PKT_TRANS_COMPRESSED_READ (57),
		.PKT_TRANS_POSTED          (58),
		.PKT_TRANS_WRITE           (59),
		.PKT_TRANS_READ            (60),
		.PKT_DATA_H                (31),
		.PKT_DATA_L                (0),
		.PKT_BYTEEN_H              (35),
		.PKT_BYTEEN_L              (32),
		.PKT_SRC_ID_H              (90),
		.PKT_SRC_ID_L              (86),
		.PKT_DEST_ID_H             (95),
		.PKT_DEST_ID_L             (91),
		.PKT_SYMBOL_W              (8),
		.ST_CHANNEL_W              (27),
		.ST_DATA_W                 (120),
		.AVS_BURSTCOUNT_W          (3),
		.SUPPRESS_0_BYTEEN_CMD     (1),
		.PREVENT_FIFO_OVERFLOW     (1),
		.USE_READRESPONSE          (0),
		.USE_WRITERESPONSE         (0),
		.ECC_ENABLE                (0)
	) av_config_avalon_av_config_slave_agent (
		.clk                     (System_PLL_sys_clk_clk),                                               //             clk.clk
		.reset                   (AV_Config_reset_reset_bridge_in_reset_reset),                          //       clk_reset.reset
		.m0_address              (av_config_avalon_av_config_slave_agent_m0_address),                    //              m0.address
		.m0_burstcount           (av_config_avalon_av_config_slave_agent_m0_burstcount),                 //                .burstcount
		.m0_byteenable           (av_config_avalon_av_config_slave_agent_m0_byteenable),                 //                .byteenable
		.m0_debugaccess          (av_config_avalon_av_config_slave_agent_m0_debugaccess),                //                .debugaccess
		.m0_lock                 (av_config_avalon_av_config_slave_agent_m0_lock),                       //                .lock
		.m0_readdata             (av_config_avalon_av_config_slave_agent_m0_readdata),                   //                .readdata
		.m0_readdatavalid        (av_config_avalon_av_config_slave_agent_m0_readdatavalid),              //                .readdatavalid
		.m0_read                 (av_config_avalon_av_config_slave_agent_m0_read),                       //                .read
		.m0_waitrequest          (av_config_avalon_av_config_slave_agent_m0_waitrequest),                //                .waitrequest
		.m0_writedata            (av_config_avalon_av_config_slave_agent_m0_writedata),                  //                .writedata
		.m0_write                (av_config_avalon_av_config_slave_agent_m0_write),                      //                .write
		.rp_endofpacket          (av_config_avalon_av_config_slave_agent_rp_endofpacket),                //              rp.endofpacket
		.rp_ready                (av_config_avalon_av_config_slave_agent_rp_ready),                      //                .ready
		.rp_valid                (av_config_avalon_av_config_slave_agent_rp_valid),                      //                .valid
		.rp_data                 (av_config_avalon_av_config_slave_agent_rp_data),                       //                .data
		.rp_startofpacket        (av_config_avalon_av_config_slave_agent_rp_startofpacket),              //                .startofpacket
		.cp_ready                (av_config_avalon_av_config_slave_burst_adapter_source0_ready),         //              cp.ready
		.cp_valid                (av_config_avalon_av_config_slave_burst_adapter_source0_valid),         //                .valid
		.cp_data                 (av_config_avalon_av_config_slave_burst_adapter_source0_data),          //                .data
		.cp_startofpacket        (av_config_avalon_av_config_slave_burst_adapter_source0_startofpacket), //                .startofpacket
		.cp_endofpacket          (av_config_avalon_av_config_slave_burst_adapter_source0_endofpacket),   //                .endofpacket
		.cp_channel              (av_config_avalon_av_config_slave_burst_adapter_source0_channel),       //                .channel
		.rf_sink_ready           (av_config_avalon_av_config_slave_agent_rsp_fifo_out_ready),            //         rf_sink.ready
		.rf_sink_valid           (av_config_avalon_av_config_slave_agent_rsp_fifo_out_valid),            //                .valid
		.rf_sink_startofpacket   (av_config_avalon_av_config_slave_agent_rsp_fifo_out_startofpacket),    //                .startofpacket
		.rf_sink_endofpacket     (av_config_avalon_av_config_slave_agent_rsp_fifo_out_endofpacket),      //                .endofpacket
		.rf_sink_data            (av_config_avalon_av_config_slave_agent_rsp_fifo_out_data),             //                .data
		.rf_source_ready         (av_config_avalon_av_config_slave_agent_rf_source_ready),               //       rf_source.ready
		.rf_source_valid         (av_config_avalon_av_config_slave_agent_rf_source_valid),               //                .valid
		.rf_source_startofpacket (av_config_avalon_av_config_slave_agent_rf_source_startofpacket),       //                .startofpacket
		.rf_source_endofpacket   (av_config_avalon_av_config_slave_agent_rf_source_endofpacket),         //                .endofpacket
		.rf_source_data          (av_config_avalon_av_config_slave_agent_rf_source_data),                //                .data
		.rdata_fifo_sink_ready   (avalon_st_adapter_out_0_ready),                                        // rdata_fifo_sink.ready
		.rdata_fifo_sink_valid   (avalon_st_adapter_out_0_valid),                                        //                .valid
		.rdata_fifo_sink_data    (avalon_st_adapter_out_0_data),                                         //                .data
		.rdata_fifo_sink_error   (avalon_st_adapter_out_0_error),                                        //                .error
		.rdata_fifo_src_ready    (av_config_avalon_av_config_slave_agent_rdata_fifo_src_ready),          //  rdata_fifo_src.ready
		.rdata_fifo_src_valid    (av_config_avalon_av_config_slave_agent_rdata_fifo_src_valid),          //                .valid
		.rdata_fifo_src_data     (av_config_avalon_av_config_slave_agent_rdata_fifo_src_data),           //                .data
		.m0_response             (2'b00),                                                                //     (terminated)
		.m0_writeresponsevalid   (1'b0)                                                                  //     (terminated)
	);

	altera_avalon_sc_fifo #(
		.SYMBOLS_PER_BEAT    (1),
		.BITS_PER_SYMBOL     (121),
		.FIFO_DEPTH          (2),
		.CHANNEL_WIDTH       (0),
		.ERROR_WIDTH         (0),
		.USE_PACKETS         (1),
		.USE_FILL_LEVEL      (0),
		.EMPTY_LATENCY       (1),
		.USE_MEMORY_BLOCKS   (0),
		.USE_STORE_FORWARD   (0),
		.USE_ALMOST_FULL_IF  (0),
		.USE_ALMOST_EMPTY_IF (0)
	) av_config_avalon_av_config_slave_agent_rsp_fifo (
		.clk               (System_PLL_sys_clk_clk),                                            //       clk.clk
		.reset             (AV_Config_reset_reset_bridge_in_reset_reset),                       // clk_reset.reset
		.in_data           (av_config_avalon_av_config_slave_agent_rf_source_data),             //        in.data
		.in_valid          (av_config_avalon_av_config_slave_agent_rf_source_valid),            //          .valid
		.in_ready          (av_config_avalon_av_config_slave_agent_rf_source_ready),            //          .ready
		.in_startofpacket  (av_config_avalon_av_config_slave_agent_rf_source_startofpacket),    //          .startofpacket
		.in_endofpacket    (av_config_avalon_av_config_slave_agent_rf_source_endofpacket),      //          .endofpacket
		.out_data          (av_config_avalon_av_config_slave_agent_rsp_fifo_out_data),          //       out.data
		.out_valid         (av_config_avalon_av_config_slave_agent_rsp_fifo_out_valid),         //          .valid
		.out_ready         (av_config_avalon_av_config_slave_agent_rsp_fifo_out_ready),         //          .ready
		.out_startofpacket (av_config_avalon_av_config_slave_agent_rsp_fifo_out_startofpacket), //          .startofpacket
		.out_endofpacket   (av_config_avalon_av_config_slave_agent_rsp_fifo_out_endofpacket),   //          .endofpacket
		.csr_address       (2'b00),                                                             // (terminated)
		.csr_read          (1'b0),                                                              // (terminated)
		.csr_write         (1'b0),                                                              // (terminated)
		.csr_readdata      (),                                                                  // (terminated)
		.csr_writedata     (32'b00000000000000000000000000000000),                              // (terminated)
		.almost_full_data  (),                                                                  // (terminated)
		.almost_empty_data (),                                                                  // (terminated)
		.in_empty          (1'b0),                                                              // (terminated)
		.out_empty         (),                                                                  // (terminated)
		.in_error          (1'b0),                                                              // (terminated)
		.out_error         (),                                                                  // (terminated)
		.in_channel        (1'b0),                                                              // (terminated)
		.out_channel       ()                                                                   // (terminated)
	);

	altera_avalon_sc_fifo #(
		.SYMBOLS_PER_BEAT    (1),
		.BITS_PER_SYMBOL     (34),
		.FIFO_DEPTH          (2),
		.CHANNEL_WIDTH       (0),
		.ERROR_WIDTH         (0),
		.USE_PACKETS         (0),
		.USE_FILL_LEVEL      (0),
		.EMPTY_LATENCY       (0),
		.USE_MEMORY_BLOCKS   (0),
		.USE_STORE_FORWARD   (0),
		.USE_ALMOST_FULL_IF  (0),
		.USE_ALMOST_EMPTY_IF (0)
	) av_config_avalon_av_config_slave_agent_rdata_fifo (
		.clk               (System_PLL_sys_clk_clk),                                      //       clk.clk
		.reset             (AV_Config_reset_reset_bridge_in_reset_reset),                 // clk_reset.reset
		.in_data           (av_config_avalon_av_config_slave_agent_rdata_fifo_src_data),  //        in.data
		.in_valid          (av_config_avalon_av_config_slave_agent_rdata_fifo_src_valid), //          .valid
		.in_ready          (av_config_avalon_av_config_slave_agent_rdata_fifo_src_ready), //          .ready
		.out_data          (av_config_avalon_av_config_slave_agent_rdata_fifo_out_data),  //       out.data
		.out_valid         (av_config_avalon_av_config_slave_agent_rdata_fifo_out_valid), //          .valid
		.out_ready         (av_config_avalon_av_config_slave_agent_rdata_fifo_out_ready), //          .ready
		.csr_address       (2'b00),                                                       // (terminated)
		.csr_read          (1'b0),                                                        // (terminated)
		.csr_write         (1'b0),                                                        // (terminated)
		.csr_readdata      (),                                                            // (terminated)
		.csr_writedata     (32'b00000000000000000000000000000000),                        // (terminated)
		.almost_full_data  (),                                                            // (terminated)
		.almost_empty_data (),                                                            // (terminated)
		.in_startofpacket  (1'b0),                                                        // (terminated)
		.in_endofpacket    (1'b0),                                                        // (terminated)
		.out_startofpacket (),                                                            // (terminated)
		.out_endofpacket   (),                                                            // (terminated)
		.in_empty          (1'b0),                                                        // (terminated)
		.out_empty         (),                                                            // (terminated)
		.in_error          (1'b0),                                                        // (terminated)
		.out_error         (),                                                            // (terminated)
		.in_channel        (1'b0),                                                        // (terminated)
		.out_channel       ()                                                             // (terminated)
	);

	altera_merlin_slave_agent #(
		.PKT_ORI_BURST_SIZE_H      (119),
		.PKT_ORI_BURST_SIZE_L      (117),
		.PKT_RESPONSE_STATUS_H     (116),
		.PKT_RESPONSE_STATUS_L     (115),
		.PKT_BURST_SIZE_H          (79),
		.PKT_BURST_SIZE_L          (77),
		.PKT_TRANS_LOCK            (61),
		.PKT_BEGIN_BURST           (84),
		.PKT_PROTECTION_H          (110),
		.PKT_PROTECTION_L          (108),
		.PKT_BURSTWRAP_H           (76),
		.PKT_BURSTWRAP_L           (70),
		.PKT_BYTE_CNT_H            (69),
		.PKT_BYTE_CNT_L            (63),
		.PKT_ADDR_H                (56),
		.PKT_ADDR_L                (36),
		.PKT_TRANS_COMPRESSED_READ (57),
		.PKT_TRANS_POSTED          (58),
		.PKT_TRANS_WRITE           (59),
		.PKT_TRANS_READ            (60),
		.PKT_DATA_H                (31),
		.PKT_DATA_L                (0),
		.PKT_BYTEEN_H              (35),
		.PKT_BYTEEN_L              (32),
		.PKT_SRC_ID_H              (90),
		.PKT_SRC_ID_L              (86),
		.PKT_DEST_ID_H             (95),
		.PKT_DEST_ID_L             (91),
		.PKT_SYMBOL_W              (8),
		.ST_CHANNEL_W              (27),
		.ST_DATA_W                 (120),
		.AVS_BURSTCOUNT_W          (3),
		.SUPPRESS_0_BYTEEN_CMD     (1),
		.PREVENT_FIFO_OVERFLOW     (1),
		.USE_READRESPONSE          (0),
		.USE_WRITERESPONSE         (0),
		.ECC_ENABLE                (0)
	) vga_subsystem_char_buffer_control_slave_agent (
		.clk                     (System_PLL_sys_clk_clk),                                                      //             clk.clk
		.reset                   (AV_Config_reset_reset_bridge_in_reset_reset),                                 //       clk_reset.reset
		.m0_address              (vga_subsystem_char_buffer_control_slave_agent_m0_address),                    //              m0.address
		.m0_burstcount           (vga_subsystem_char_buffer_control_slave_agent_m0_burstcount),                 //                .burstcount
		.m0_byteenable           (vga_subsystem_char_buffer_control_slave_agent_m0_byteenable),                 //                .byteenable
		.m0_debugaccess          (vga_subsystem_char_buffer_control_slave_agent_m0_debugaccess),                //                .debugaccess
		.m0_lock                 (vga_subsystem_char_buffer_control_slave_agent_m0_lock),                       //                .lock
		.m0_readdata             (vga_subsystem_char_buffer_control_slave_agent_m0_readdata),                   //                .readdata
		.m0_readdatavalid        (vga_subsystem_char_buffer_control_slave_agent_m0_readdatavalid),              //                .readdatavalid
		.m0_read                 (vga_subsystem_char_buffer_control_slave_agent_m0_read),                       //                .read
		.m0_waitrequest          (vga_subsystem_char_buffer_control_slave_agent_m0_waitrequest),                //                .waitrequest
		.m0_writedata            (vga_subsystem_char_buffer_control_slave_agent_m0_writedata),                  //                .writedata
		.m0_write                (vga_subsystem_char_buffer_control_slave_agent_m0_write),                      //                .write
		.rp_endofpacket          (vga_subsystem_char_buffer_control_slave_agent_rp_endofpacket),                //              rp.endofpacket
		.rp_ready                (vga_subsystem_char_buffer_control_slave_agent_rp_ready),                      //                .ready
		.rp_valid                (vga_subsystem_char_buffer_control_slave_agent_rp_valid),                      //                .valid
		.rp_data                 (vga_subsystem_char_buffer_control_slave_agent_rp_data),                       //                .data
		.rp_startofpacket        (vga_subsystem_char_buffer_control_slave_agent_rp_startofpacket),              //                .startofpacket
		.cp_ready                (vga_subsystem_char_buffer_control_slave_burst_adapter_source0_ready),         //              cp.ready
		.cp_valid                (vga_subsystem_char_buffer_control_slave_burst_adapter_source0_valid),         //                .valid
		.cp_data                 (vga_subsystem_char_buffer_control_slave_burst_adapter_source0_data),          //                .data
		.cp_startofpacket        (vga_subsystem_char_buffer_control_slave_burst_adapter_source0_startofpacket), //                .startofpacket
		.cp_endofpacket          (vga_subsystem_char_buffer_control_slave_burst_adapter_source0_endofpacket),   //                .endofpacket
		.cp_channel              (vga_subsystem_char_buffer_control_slave_burst_adapter_source0_channel),       //                .channel
		.rf_sink_ready           (vga_subsystem_char_buffer_control_slave_agent_rsp_fifo_out_ready),            //         rf_sink.ready
		.rf_sink_valid           (vga_subsystem_char_buffer_control_slave_agent_rsp_fifo_out_valid),            //                .valid
		.rf_sink_startofpacket   (vga_subsystem_char_buffer_control_slave_agent_rsp_fifo_out_startofpacket),    //                .startofpacket
		.rf_sink_endofpacket     (vga_subsystem_char_buffer_control_slave_agent_rsp_fifo_out_endofpacket),      //                .endofpacket
		.rf_sink_data            (vga_subsystem_char_buffer_control_slave_agent_rsp_fifo_out_data),             //                .data
		.rf_source_ready         (vga_subsystem_char_buffer_control_slave_agent_rf_source_ready),               //       rf_source.ready
		.rf_source_valid         (vga_subsystem_char_buffer_control_slave_agent_rf_source_valid),               //                .valid
		.rf_source_startofpacket (vga_subsystem_char_buffer_control_slave_agent_rf_source_startofpacket),       //                .startofpacket
		.rf_source_endofpacket   (vga_subsystem_char_buffer_control_slave_agent_rf_source_endofpacket),         //                .endofpacket
		.rf_source_data          (vga_subsystem_char_buffer_control_slave_agent_rf_source_data),                //                .data
		.rdata_fifo_sink_ready   (avalon_st_adapter_001_out_0_ready),                                           // rdata_fifo_sink.ready
		.rdata_fifo_sink_valid   (avalon_st_adapter_001_out_0_valid),                                           //                .valid
		.rdata_fifo_sink_data    (avalon_st_adapter_001_out_0_data),                                            //                .data
		.rdata_fifo_sink_error   (avalon_st_adapter_001_out_0_error),                                           //                .error
		.rdata_fifo_src_ready    (vga_subsystem_char_buffer_control_slave_agent_rdata_fifo_src_ready),          //  rdata_fifo_src.ready
		.rdata_fifo_src_valid    (vga_subsystem_char_buffer_control_slave_agent_rdata_fifo_src_valid),          //                .valid
		.rdata_fifo_src_data     (vga_subsystem_char_buffer_control_slave_agent_rdata_fifo_src_data),           //                .data
		.m0_response             (2'b00),                                                                       //     (terminated)
		.m0_writeresponsevalid   (1'b0)                                                                         //     (terminated)
	);

	altera_avalon_sc_fifo #(
		.SYMBOLS_PER_BEAT    (1),
		.BITS_PER_SYMBOL     (121),
		.FIFO_DEPTH          (2),
		.CHANNEL_WIDTH       (0),
		.ERROR_WIDTH         (0),
		.USE_PACKETS         (1),
		.USE_FILL_LEVEL      (0),
		.EMPTY_LATENCY       (1),
		.USE_MEMORY_BLOCKS   (0),
		.USE_STORE_FORWARD   (0),
		.USE_ALMOST_FULL_IF  (0),
		.USE_ALMOST_EMPTY_IF (0)
	) vga_subsystem_char_buffer_control_slave_agent_rsp_fifo (
		.clk               (System_PLL_sys_clk_clk),                                                   //       clk.clk
		.reset             (AV_Config_reset_reset_bridge_in_reset_reset),                              // clk_reset.reset
		.in_data           (vga_subsystem_char_buffer_control_slave_agent_rf_source_data),             //        in.data
		.in_valid          (vga_subsystem_char_buffer_control_slave_agent_rf_source_valid),            //          .valid
		.in_ready          (vga_subsystem_char_buffer_control_slave_agent_rf_source_ready),            //          .ready
		.in_startofpacket  (vga_subsystem_char_buffer_control_slave_agent_rf_source_startofpacket),    //          .startofpacket
		.in_endofpacket    (vga_subsystem_char_buffer_control_slave_agent_rf_source_endofpacket),      //          .endofpacket
		.out_data          (vga_subsystem_char_buffer_control_slave_agent_rsp_fifo_out_data),          //       out.data
		.out_valid         (vga_subsystem_char_buffer_control_slave_agent_rsp_fifo_out_valid),         //          .valid
		.out_ready         (vga_subsystem_char_buffer_control_slave_agent_rsp_fifo_out_ready),         //          .ready
		.out_startofpacket (vga_subsystem_char_buffer_control_slave_agent_rsp_fifo_out_startofpacket), //          .startofpacket
		.out_endofpacket   (vga_subsystem_char_buffer_control_slave_agent_rsp_fifo_out_endofpacket),   //          .endofpacket
		.csr_address       (2'b00),                                                                    // (terminated)
		.csr_read          (1'b0),                                                                     // (terminated)
		.csr_write         (1'b0),                                                                     // (terminated)
		.csr_readdata      (),                                                                         // (terminated)
		.csr_writedata     (32'b00000000000000000000000000000000),                                     // (terminated)
		.almost_full_data  (),                                                                         // (terminated)
		.almost_empty_data (),                                                                         // (terminated)
		.in_empty          (1'b0),                                                                     // (terminated)
		.out_empty         (),                                                                         // (terminated)
		.in_error          (1'b0),                                                                     // (terminated)
		.out_error         (),                                                                         // (terminated)
		.in_channel        (1'b0),                                                                     // (terminated)
		.out_channel       ()                                                                          // (terminated)
	);

	altera_avalon_sc_fifo #(
		.SYMBOLS_PER_BEAT    (1),
		.BITS_PER_SYMBOL     (34),
		.FIFO_DEPTH          (2),
		.CHANNEL_WIDTH       (0),
		.ERROR_WIDTH         (0),
		.USE_PACKETS         (0),
		.USE_FILL_LEVEL      (0),
		.EMPTY_LATENCY       (0),
		.USE_MEMORY_BLOCKS   (0),
		.USE_STORE_FORWARD   (0),
		.USE_ALMOST_FULL_IF  (0),
		.USE_ALMOST_EMPTY_IF (0)
	) vga_subsystem_char_buffer_control_slave_agent_rdata_fifo (
		.clk               (System_PLL_sys_clk_clk),                                             //       clk.clk
		.reset             (AV_Config_reset_reset_bridge_in_reset_reset),                        // clk_reset.reset
		.in_data           (vga_subsystem_char_buffer_control_slave_agent_rdata_fifo_src_data),  //        in.data
		.in_valid          (vga_subsystem_char_buffer_control_slave_agent_rdata_fifo_src_valid), //          .valid
		.in_ready          (vga_subsystem_char_buffer_control_slave_agent_rdata_fifo_src_ready), //          .ready
		.out_data          (vga_subsystem_char_buffer_control_slave_agent_rdata_fifo_out_data),  //       out.data
		.out_valid         (vga_subsystem_char_buffer_control_slave_agent_rdata_fifo_out_valid), //          .valid
		.out_ready         (vga_subsystem_char_buffer_control_slave_agent_rdata_fifo_out_ready), //          .ready
		.csr_address       (2'b00),                                                              // (terminated)
		.csr_read          (1'b0),                                                               // (terminated)
		.csr_write         (1'b0),                                                               // (terminated)
		.csr_readdata      (),                                                                   // (terminated)
		.csr_writedata     (32'b00000000000000000000000000000000),                               // (terminated)
		.almost_full_data  (),                                                                   // (terminated)
		.almost_empty_data (),                                                                   // (terminated)
		.in_startofpacket  (1'b0),                                                               // (terminated)
		.in_endofpacket    (1'b0),                                                               // (terminated)
		.out_startofpacket (),                                                                   // (terminated)
		.out_endofpacket   (),                                                                   // (terminated)
		.in_empty          (1'b0),                                                               // (terminated)
		.out_empty         (),                                                                   // (terminated)
		.in_error          (1'b0),                                                               // (terminated)
		.out_error         (),                                                                   // (terminated)
		.in_channel        (1'b0),                                                               // (terminated)
		.out_channel       ()                                                                    // (terminated)
	);

	altera_merlin_slave_agent #(
		.PKT_ORI_BURST_SIZE_H      (119),
		.PKT_ORI_BURST_SIZE_L      (117),
		.PKT_RESPONSE_STATUS_H     (116),
		.PKT_RESPONSE_STATUS_L     (115),
		.PKT_BURST_SIZE_H          (79),
		.PKT_BURST_SIZE_L          (77),
		.PKT_TRANS_LOCK            (61),
		.PKT_BEGIN_BURST           (84),
		.PKT_PROTECTION_H          (110),
		.PKT_PROTECTION_L          (108),
		.PKT_BURSTWRAP_H           (76),
		.PKT_BURSTWRAP_L           (70),
		.PKT_BYTE_CNT_H            (69),
		.PKT_BYTE_CNT_L            (63),
		.PKT_ADDR_H                (56),
		.PKT_ADDR_L                (36),
		.PKT_TRANS_COMPRESSED_READ (57),
		.PKT_TRANS_POSTED          (58),
		.PKT_TRANS_WRITE           (59),
		.PKT_TRANS_READ            (60),
		.PKT_DATA_H                (31),
		.PKT_DATA_L                (0),
		.PKT_BYTEEN_H              (35),
		.PKT_BYTEEN_L              (32),
		.PKT_SRC_ID_H              (90),
		.PKT_SRC_ID_L              (86),
		.PKT_DEST_ID_H             (95),
		.PKT_DEST_ID_L             (91),
		.PKT_SYMBOL_W              (8),
		.ST_CHANNEL_W              (27),
		.ST_DATA_W                 (120),
		.AVS_BURSTCOUNT_W          (3),
		.SUPPRESS_0_BYTEEN_CMD     (1),
		.PREVENT_FIFO_OVERFLOW     (1),
		.USE_READRESPONSE          (0),
		.USE_WRITERESPONSE         (0),
		.ECC_ENABLE                (0)
	) n0_from_hps_s1_agent (
		.clk                     (System_PLL_sys_clk_clk),                             //             clk.clk
		.reset                   (n0_from_hps_reset_reset_bridge_in_reset_reset),      //       clk_reset.reset
		.m0_address              (n0_from_hps_s1_agent_m0_address),                    //              m0.address
		.m0_burstcount           (n0_from_hps_s1_agent_m0_burstcount),                 //                .burstcount
		.m0_byteenable           (n0_from_hps_s1_agent_m0_byteenable),                 //                .byteenable
		.m0_debugaccess          (n0_from_hps_s1_agent_m0_debugaccess),                //                .debugaccess
		.m0_lock                 (n0_from_hps_s1_agent_m0_lock),                       //                .lock
		.m0_readdata             (n0_from_hps_s1_agent_m0_readdata),                   //                .readdata
		.m0_readdatavalid        (n0_from_hps_s1_agent_m0_readdatavalid),              //                .readdatavalid
		.m0_read                 (n0_from_hps_s1_agent_m0_read),                       //                .read
		.m0_waitrequest          (n0_from_hps_s1_agent_m0_waitrequest),                //                .waitrequest
		.m0_writedata            (n0_from_hps_s1_agent_m0_writedata),                  //                .writedata
		.m0_write                (n0_from_hps_s1_agent_m0_write),                      //                .write
		.rp_endofpacket          (n0_from_hps_s1_agent_rp_endofpacket),                //              rp.endofpacket
		.rp_ready                (n0_from_hps_s1_agent_rp_ready),                      //                .ready
		.rp_valid                (n0_from_hps_s1_agent_rp_valid),                      //                .valid
		.rp_data                 (n0_from_hps_s1_agent_rp_data),                       //                .data
		.rp_startofpacket        (n0_from_hps_s1_agent_rp_startofpacket),              //                .startofpacket
		.cp_ready                (n0_from_hps_s1_burst_adapter_source0_ready),         //              cp.ready
		.cp_valid                (n0_from_hps_s1_burst_adapter_source0_valid),         //                .valid
		.cp_data                 (n0_from_hps_s1_burst_adapter_source0_data),          //                .data
		.cp_startofpacket        (n0_from_hps_s1_burst_adapter_source0_startofpacket), //                .startofpacket
		.cp_endofpacket          (n0_from_hps_s1_burst_adapter_source0_endofpacket),   //                .endofpacket
		.cp_channel              (n0_from_hps_s1_burst_adapter_source0_channel),       //                .channel
		.rf_sink_ready           (n0_from_hps_s1_agent_rsp_fifo_out_ready),            //         rf_sink.ready
		.rf_sink_valid           (n0_from_hps_s1_agent_rsp_fifo_out_valid),            //                .valid
		.rf_sink_startofpacket   (n0_from_hps_s1_agent_rsp_fifo_out_startofpacket),    //                .startofpacket
		.rf_sink_endofpacket     (n0_from_hps_s1_agent_rsp_fifo_out_endofpacket),      //                .endofpacket
		.rf_sink_data            (n0_from_hps_s1_agent_rsp_fifo_out_data),             //                .data
		.rf_source_ready         (n0_from_hps_s1_agent_rf_source_ready),               //       rf_source.ready
		.rf_source_valid         (n0_from_hps_s1_agent_rf_source_valid),               //                .valid
		.rf_source_startofpacket (n0_from_hps_s1_agent_rf_source_startofpacket),       //                .startofpacket
		.rf_source_endofpacket   (n0_from_hps_s1_agent_rf_source_endofpacket),         //                .endofpacket
		.rf_source_data          (n0_from_hps_s1_agent_rf_source_data),                //                .data
		.rdata_fifo_sink_ready   (avalon_st_adapter_002_out_0_ready),                  // rdata_fifo_sink.ready
		.rdata_fifo_sink_valid   (avalon_st_adapter_002_out_0_valid),                  //                .valid
		.rdata_fifo_sink_data    (avalon_st_adapter_002_out_0_data),                   //                .data
		.rdata_fifo_sink_error   (avalon_st_adapter_002_out_0_error),                  //                .error
		.rdata_fifo_src_ready    (n0_from_hps_s1_agent_rdata_fifo_src_ready),          //  rdata_fifo_src.ready
		.rdata_fifo_src_valid    (n0_from_hps_s1_agent_rdata_fifo_src_valid),          //                .valid
		.rdata_fifo_src_data     (n0_from_hps_s1_agent_rdata_fifo_src_data),           //                .data
		.m0_response             (2'b00),                                              //     (terminated)
		.m0_writeresponsevalid   (1'b0)                                                //     (terminated)
	);

	altera_avalon_sc_fifo #(
		.SYMBOLS_PER_BEAT    (1),
		.BITS_PER_SYMBOL     (121),
		.FIFO_DEPTH          (2),
		.CHANNEL_WIDTH       (0),
		.ERROR_WIDTH         (0),
		.USE_PACKETS         (1),
		.USE_FILL_LEVEL      (0),
		.EMPTY_LATENCY       (1),
		.USE_MEMORY_BLOCKS   (0),
		.USE_STORE_FORWARD   (0),
		.USE_ALMOST_FULL_IF  (0),
		.USE_ALMOST_EMPTY_IF (0)
	) n0_from_hps_s1_agent_rsp_fifo (
		.clk               (System_PLL_sys_clk_clk),                          //       clk.clk
		.reset             (n0_from_hps_reset_reset_bridge_in_reset_reset),   // clk_reset.reset
		.in_data           (n0_from_hps_s1_agent_rf_source_data),             //        in.data
		.in_valid          (n0_from_hps_s1_agent_rf_source_valid),            //          .valid
		.in_ready          (n0_from_hps_s1_agent_rf_source_ready),            //          .ready
		.in_startofpacket  (n0_from_hps_s1_agent_rf_source_startofpacket),    //          .startofpacket
		.in_endofpacket    (n0_from_hps_s1_agent_rf_source_endofpacket),      //          .endofpacket
		.out_data          (n0_from_hps_s1_agent_rsp_fifo_out_data),          //       out.data
		.out_valid         (n0_from_hps_s1_agent_rsp_fifo_out_valid),         //          .valid
		.out_ready         (n0_from_hps_s1_agent_rsp_fifo_out_ready),         //          .ready
		.out_startofpacket (n0_from_hps_s1_agent_rsp_fifo_out_startofpacket), //          .startofpacket
		.out_endofpacket   (n0_from_hps_s1_agent_rsp_fifo_out_endofpacket),   //          .endofpacket
		.csr_address       (2'b00),                                           // (terminated)
		.csr_read          (1'b0),                                            // (terminated)
		.csr_write         (1'b0),                                            // (terminated)
		.csr_readdata      (),                                                // (terminated)
		.csr_writedata     (32'b00000000000000000000000000000000),            // (terminated)
		.almost_full_data  (),                                                // (terminated)
		.almost_empty_data (),                                                // (terminated)
		.in_empty          (1'b0),                                            // (terminated)
		.out_empty         (),                                                // (terminated)
		.in_error          (1'b0),                                            // (terminated)
		.out_error         (),                                                // (terminated)
		.in_channel        (1'b0),                                            // (terminated)
		.out_channel       ()                                                 // (terminated)
	);

	altera_avalon_sc_fifo #(
		.SYMBOLS_PER_BEAT    (1),
		.BITS_PER_SYMBOL     (34),
		.FIFO_DEPTH          (2),
		.CHANNEL_WIDTH       (0),
		.ERROR_WIDTH         (0),
		.USE_PACKETS         (0),
		.USE_FILL_LEVEL      (0),
		.EMPTY_LATENCY       (0),
		.USE_MEMORY_BLOCKS   (0),
		.USE_STORE_FORWARD   (0),
		.USE_ALMOST_FULL_IF  (0),
		.USE_ALMOST_EMPTY_IF (0)
	) n0_from_hps_s1_agent_rdata_fifo (
		.clk               (System_PLL_sys_clk_clk),                        //       clk.clk
		.reset             (n0_from_hps_reset_reset_bridge_in_reset_reset), // clk_reset.reset
		.in_data           (n0_from_hps_s1_agent_rdata_fifo_src_data),      //        in.data
		.in_valid          (n0_from_hps_s1_agent_rdata_fifo_src_valid),     //          .valid
		.in_ready          (n0_from_hps_s1_agent_rdata_fifo_src_ready),     //          .ready
		.out_data          (n0_from_hps_s1_agent_rdata_fifo_out_data),      //       out.data
		.out_valid         (n0_from_hps_s1_agent_rdata_fifo_out_valid),     //          .valid
		.out_ready         (n0_from_hps_s1_agent_rdata_fifo_out_ready),     //          .ready
		.csr_address       (2'b00),                                         // (terminated)
		.csr_read          (1'b0),                                          // (terminated)
		.csr_write         (1'b0),                                          // (terminated)
		.csr_readdata      (),                                              // (terminated)
		.csr_writedata     (32'b00000000000000000000000000000000),          // (terminated)
		.almost_full_data  (),                                              // (terminated)
		.almost_empty_data (),                                              // (terminated)
		.in_startofpacket  (1'b0),                                          // (terminated)
		.in_endofpacket    (1'b0),                                          // (terminated)
		.out_startofpacket (),                                              // (terminated)
		.out_endofpacket   (),                                              // (terminated)
		.in_empty          (1'b0),                                          // (terminated)
		.out_empty         (),                                              // (terminated)
		.in_error          (1'b0),                                          // (terminated)
		.out_error         (),                                              // (terminated)
		.in_channel        (1'b0),                                          // (terminated)
		.out_channel       ()                                               // (terminated)
	);

	altera_merlin_slave_agent #(
		.PKT_ORI_BURST_SIZE_H      (119),
		.PKT_ORI_BURST_SIZE_L      (117),
		.PKT_RESPONSE_STATUS_H     (116),
		.PKT_RESPONSE_STATUS_L     (115),
		.PKT_BURST_SIZE_H          (79),
		.PKT_BURST_SIZE_L          (77),
		.PKT_TRANS_LOCK            (61),
		.PKT_BEGIN_BURST           (84),
		.PKT_PROTECTION_H          (110),
		.PKT_PROTECTION_L          (108),
		.PKT_BURSTWRAP_H           (76),
		.PKT_BURSTWRAP_L           (70),
		.PKT_BYTE_CNT_H            (69),
		.PKT_BYTE_CNT_L            (63),
		.PKT_ADDR_H                (56),
		.PKT_ADDR_L                (36),
		.PKT_TRANS_COMPRESSED_READ (57),
		.PKT_TRANS_POSTED          (58),
		.PKT_TRANS_WRITE           (59),
		.PKT_TRANS_READ            (60),
		.PKT_DATA_H                (31),
		.PKT_DATA_L                (0),
		.PKT_BYTEEN_H              (35),
		.PKT_BYTEEN_L              (32),
		.PKT_SRC_ID_H              (90),
		.PKT_SRC_ID_L              (86),
		.PKT_DEST_ID_H             (95),
		.PKT_DEST_ID_L             (91),
		.PKT_SYMBOL_W              (8),
		.ST_CHANNEL_W              (27),
		.ST_DATA_W                 (120),
		.AVS_BURSTCOUNT_W          (3),
		.SUPPRESS_0_BYTEEN_CMD     (1),
		.PREVENT_FIFO_OVERFLOW     (1),
		.USE_READRESPONSE          (0),
		.USE_WRITERESPONSE         (0),
		.ECC_ENABLE                (0)
	) nn_from_hps_s1_agent (
		.clk                     (System_PLL_sys_clk_clk),                             //             clk.clk
		.reset                   (n0_from_hps_reset_reset_bridge_in_reset_reset),      //       clk_reset.reset
		.m0_address              (nn_from_hps_s1_agent_m0_address),                    //              m0.address
		.m0_burstcount           (nn_from_hps_s1_agent_m0_burstcount),                 //                .burstcount
		.m0_byteenable           (nn_from_hps_s1_agent_m0_byteenable),                 //                .byteenable
		.m0_debugaccess          (nn_from_hps_s1_agent_m0_debugaccess),                //                .debugaccess
		.m0_lock                 (nn_from_hps_s1_agent_m0_lock),                       //                .lock
		.m0_readdata             (nn_from_hps_s1_agent_m0_readdata),                   //                .readdata
		.m0_readdatavalid        (nn_from_hps_s1_agent_m0_readdatavalid),              //                .readdatavalid
		.m0_read                 (nn_from_hps_s1_agent_m0_read),                       //                .read
		.m0_waitrequest          (nn_from_hps_s1_agent_m0_waitrequest),                //                .waitrequest
		.m0_writedata            (nn_from_hps_s1_agent_m0_writedata),                  //                .writedata
		.m0_write                (nn_from_hps_s1_agent_m0_write),                      //                .write
		.rp_endofpacket          (nn_from_hps_s1_agent_rp_endofpacket),                //              rp.endofpacket
		.rp_ready                (nn_from_hps_s1_agent_rp_ready),                      //                .ready
		.rp_valid                (nn_from_hps_s1_agent_rp_valid),                      //                .valid
		.rp_data                 (nn_from_hps_s1_agent_rp_data),                       //                .data
		.rp_startofpacket        (nn_from_hps_s1_agent_rp_startofpacket),              //                .startofpacket
		.cp_ready                (nn_from_hps_s1_burst_adapter_source0_ready),         //              cp.ready
		.cp_valid                (nn_from_hps_s1_burst_adapter_source0_valid),         //                .valid
		.cp_data                 (nn_from_hps_s1_burst_adapter_source0_data),          //                .data
		.cp_startofpacket        (nn_from_hps_s1_burst_adapter_source0_startofpacket), //                .startofpacket
		.cp_endofpacket          (nn_from_hps_s1_burst_adapter_source0_endofpacket),   //                .endofpacket
		.cp_channel              (nn_from_hps_s1_burst_adapter_source0_channel),       //                .channel
		.rf_sink_ready           (nn_from_hps_s1_agent_rsp_fifo_out_ready),            //         rf_sink.ready
		.rf_sink_valid           (nn_from_hps_s1_agent_rsp_fifo_out_valid),            //                .valid
		.rf_sink_startofpacket   (nn_from_hps_s1_agent_rsp_fifo_out_startofpacket),    //                .startofpacket
		.rf_sink_endofpacket     (nn_from_hps_s1_agent_rsp_fifo_out_endofpacket),      //                .endofpacket
		.rf_sink_data            (nn_from_hps_s1_agent_rsp_fifo_out_data),             //                .data
		.rf_source_ready         (nn_from_hps_s1_agent_rf_source_ready),               //       rf_source.ready
		.rf_source_valid         (nn_from_hps_s1_agent_rf_source_valid),               //                .valid
		.rf_source_startofpacket (nn_from_hps_s1_agent_rf_source_startofpacket),       //                .startofpacket
		.rf_source_endofpacket   (nn_from_hps_s1_agent_rf_source_endofpacket),         //                .endofpacket
		.rf_source_data          (nn_from_hps_s1_agent_rf_source_data),                //                .data
		.rdata_fifo_sink_ready   (avalon_st_adapter_003_out_0_ready),                  // rdata_fifo_sink.ready
		.rdata_fifo_sink_valid   (avalon_st_adapter_003_out_0_valid),                  //                .valid
		.rdata_fifo_sink_data    (avalon_st_adapter_003_out_0_data),                   //                .data
		.rdata_fifo_sink_error   (avalon_st_adapter_003_out_0_error),                  //                .error
		.rdata_fifo_src_ready    (nn_from_hps_s1_agent_rdata_fifo_src_ready),          //  rdata_fifo_src.ready
		.rdata_fifo_src_valid    (nn_from_hps_s1_agent_rdata_fifo_src_valid),          //                .valid
		.rdata_fifo_src_data     (nn_from_hps_s1_agent_rdata_fifo_src_data),           //                .data
		.m0_response             (2'b00),                                              //     (terminated)
		.m0_writeresponsevalid   (1'b0)                                                //     (terminated)
	);

	altera_avalon_sc_fifo #(
		.SYMBOLS_PER_BEAT    (1),
		.BITS_PER_SYMBOL     (121),
		.FIFO_DEPTH          (2),
		.CHANNEL_WIDTH       (0),
		.ERROR_WIDTH         (0),
		.USE_PACKETS         (1),
		.USE_FILL_LEVEL      (0),
		.EMPTY_LATENCY       (1),
		.USE_MEMORY_BLOCKS   (0),
		.USE_STORE_FORWARD   (0),
		.USE_ALMOST_FULL_IF  (0),
		.USE_ALMOST_EMPTY_IF (0)
	) nn_from_hps_s1_agent_rsp_fifo (
		.clk               (System_PLL_sys_clk_clk),                          //       clk.clk
		.reset             (n0_from_hps_reset_reset_bridge_in_reset_reset),   // clk_reset.reset
		.in_data           (nn_from_hps_s1_agent_rf_source_data),             //        in.data
		.in_valid          (nn_from_hps_s1_agent_rf_source_valid),            //          .valid
		.in_ready          (nn_from_hps_s1_agent_rf_source_ready),            //          .ready
		.in_startofpacket  (nn_from_hps_s1_agent_rf_source_startofpacket),    //          .startofpacket
		.in_endofpacket    (nn_from_hps_s1_agent_rf_source_endofpacket),      //          .endofpacket
		.out_data          (nn_from_hps_s1_agent_rsp_fifo_out_data),          //       out.data
		.out_valid         (nn_from_hps_s1_agent_rsp_fifo_out_valid),         //          .valid
		.out_ready         (nn_from_hps_s1_agent_rsp_fifo_out_ready),         //          .ready
		.out_startofpacket (nn_from_hps_s1_agent_rsp_fifo_out_startofpacket), //          .startofpacket
		.out_endofpacket   (nn_from_hps_s1_agent_rsp_fifo_out_endofpacket),   //          .endofpacket
		.csr_address       (2'b00),                                           // (terminated)
		.csr_read          (1'b0),                                            // (terminated)
		.csr_write         (1'b0),                                            // (terminated)
		.csr_readdata      (),                                                // (terminated)
		.csr_writedata     (32'b00000000000000000000000000000000),            // (terminated)
		.almost_full_data  (),                                                // (terminated)
		.almost_empty_data (),                                                // (terminated)
		.in_empty          (1'b0),                                            // (terminated)
		.out_empty         (),                                                // (terminated)
		.in_error          (1'b0),                                            // (terminated)
		.out_error         (),                                                // (terminated)
		.in_channel        (1'b0),                                            // (terminated)
		.out_channel       ()                                                 // (terminated)
	);

	altera_avalon_sc_fifo #(
		.SYMBOLS_PER_BEAT    (1),
		.BITS_PER_SYMBOL     (34),
		.FIFO_DEPTH          (2),
		.CHANNEL_WIDTH       (0),
		.ERROR_WIDTH         (0),
		.USE_PACKETS         (0),
		.USE_FILL_LEVEL      (0),
		.EMPTY_LATENCY       (0),
		.USE_MEMORY_BLOCKS   (0),
		.USE_STORE_FORWARD   (0),
		.USE_ALMOST_FULL_IF  (0),
		.USE_ALMOST_EMPTY_IF (0)
	) nn_from_hps_s1_agent_rdata_fifo (
		.clk               (System_PLL_sys_clk_clk),                        //       clk.clk
		.reset             (n0_from_hps_reset_reset_bridge_in_reset_reset), // clk_reset.reset
		.in_data           (nn_from_hps_s1_agent_rdata_fifo_src_data),      //        in.data
		.in_valid          (nn_from_hps_s1_agent_rdata_fifo_src_valid),     //          .valid
		.in_ready          (nn_from_hps_s1_agent_rdata_fifo_src_ready),     //          .ready
		.out_data          (nn_from_hps_s1_agent_rdata_fifo_out_data),      //       out.data
		.out_valid         (nn_from_hps_s1_agent_rdata_fifo_out_valid),     //          .valid
		.out_ready         (nn_from_hps_s1_agent_rdata_fifo_out_ready),     //          .ready
		.csr_address       (2'b00),                                         // (terminated)
		.csr_read          (1'b0),                                          // (terminated)
		.csr_write         (1'b0),                                          // (terminated)
		.csr_readdata      (),                                              // (terminated)
		.csr_writedata     (32'b00000000000000000000000000000000),          // (terminated)
		.almost_full_data  (),                                              // (terminated)
		.almost_empty_data (),                                              // (terminated)
		.in_startofpacket  (1'b0),                                          // (terminated)
		.in_endofpacket    (1'b0),                                          // (terminated)
		.out_startofpacket (),                                              // (terminated)
		.out_endofpacket   (),                                              // (terminated)
		.in_empty          (1'b0),                                          // (terminated)
		.out_empty         (),                                              // (terminated)
		.in_error          (1'b0),                                          // (terminated)
		.out_error         (),                                              // (terminated)
		.in_channel        (1'b0),                                          // (terminated)
		.out_channel       ()                                               // (terminated)
	);

	altera_merlin_slave_agent #(
		.PKT_ORI_BURST_SIZE_H      (119),
		.PKT_ORI_BURST_SIZE_L      (117),
		.PKT_RESPONSE_STATUS_H     (116),
		.PKT_RESPONSE_STATUS_L     (115),
		.PKT_BURST_SIZE_H          (79),
		.PKT_BURST_SIZE_L          (77),
		.PKT_TRANS_LOCK            (61),
		.PKT_BEGIN_BURST           (84),
		.PKT_PROTECTION_H          (110),
		.PKT_PROTECTION_L          (108),
		.PKT_BURSTWRAP_H           (76),
		.PKT_BURSTWRAP_L           (70),
		.PKT_BYTE_CNT_H            (69),
		.PKT_BYTE_CNT_L            (63),
		.PKT_ADDR_H                (56),
		.PKT_ADDR_L                (36),
		.PKT_TRANS_COMPRESSED_READ (57),
		.PKT_TRANS_POSTED          (58),
		.PKT_TRANS_WRITE           (59),
		.PKT_TRANS_READ            (60),
		.PKT_DATA_H                (31),
		.PKT_DATA_L                (0),
		.PKT_BYTEEN_H              (35),
		.PKT_BYTEEN_L              (32),
		.PKT_SRC_ID_H              (90),
		.PKT_SRC_ID_L              (86),
		.PKT_DEST_ID_H             (95),
		.PKT_DEST_ID_L             (91),
		.PKT_SYMBOL_W              (8),
		.ST_CHANNEL_W              (27),
		.ST_DATA_W                 (120),
		.AVS_BURSTCOUNT_W          (3),
		.SUPPRESS_0_BYTEEN_CMD     (1),
		.PREVENT_FIFO_OVERFLOW     (1),
		.USE_READRESPONSE          (0),
		.USE_WRITERESPONSE         (0),
		.ECC_ENABLE                (0)
	) ns_from_hps_s1_agent (
		.clk                     (System_PLL_sys_clk_clk),                             //             clk.clk
		.reset                   (n0_from_hps_reset_reset_bridge_in_reset_reset),      //       clk_reset.reset
		.m0_address              (ns_from_hps_s1_agent_m0_address),                    //              m0.address
		.m0_burstcount           (ns_from_hps_s1_agent_m0_burstcount),                 //                .burstcount
		.m0_byteenable           (ns_from_hps_s1_agent_m0_byteenable),                 //                .byteenable
		.m0_debugaccess          (ns_from_hps_s1_agent_m0_debugaccess),                //                .debugaccess
		.m0_lock                 (ns_from_hps_s1_agent_m0_lock),                       //                .lock
		.m0_readdata             (ns_from_hps_s1_agent_m0_readdata),                   //                .readdata
		.m0_readdatavalid        (ns_from_hps_s1_agent_m0_readdatavalid),              //                .readdatavalid
		.m0_read                 (ns_from_hps_s1_agent_m0_read),                       //                .read
		.m0_waitrequest          (ns_from_hps_s1_agent_m0_waitrequest),                //                .waitrequest
		.m0_writedata            (ns_from_hps_s1_agent_m0_writedata),                  //                .writedata
		.m0_write                (ns_from_hps_s1_agent_m0_write),                      //                .write
		.rp_endofpacket          (ns_from_hps_s1_agent_rp_endofpacket),                //              rp.endofpacket
		.rp_ready                (ns_from_hps_s1_agent_rp_ready),                      //                .ready
		.rp_valid                (ns_from_hps_s1_agent_rp_valid),                      //                .valid
		.rp_data                 (ns_from_hps_s1_agent_rp_data),                       //                .data
		.rp_startofpacket        (ns_from_hps_s1_agent_rp_startofpacket),              //                .startofpacket
		.cp_ready                (ns_from_hps_s1_burst_adapter_source0_ready),         //              cp.ready
		.cp_valid                (ns_from_hps_s1_burst_adapter_source0_valid),         //                .valid
		.cp_data                 (ns_from_hps_s1_burst_adapter_source0_data),          //                .data
		.cp_startofpacket        (ns_from_hps_s1_burst_adapter_source0_startofpacket), //                .startofpacket
		.cp_endofpacket          (ns_from_hps_s1_burst_adapter_source0_endofpacket),   //                .endofpacket
		.cp_channel              (ns_from_hps_s1_burst_adapter_source0_channel),       //                .channel
		.rf_sink_ready           (ns_from_hps_s1_agent_rsp_fifo_out_ready),            //         rf_sink.ready
		.rf_sink_valid           (ns_from_hps_s1_agent_rsp_fifo_out_valid),            //                .valid
		.rf_sink_startofpacket   (ns_from_hps_s1_agent_rsp_fifo_out_startofpacket),    //                .startofpacket
		.rf_sink_endofpacket     (ns_from_hps_s1_agent_rsp_fifo_out_endofpacket),      //                .endofpacket
		.rf_sink_data            (ns_from_hps_s1_agent_rsp_fifo_out_data),             //                .data
		.rf_source_ready         (ns_from_hps_s1_agent_rf_source_ready),               //       rf_source.ready
		.rf_source_valid         (ns_from_hps_s1_agent_rf_source_valid),               //                .valid
		.rf_source_startofpacket (ns_from_hps_s1_agent_rf_source_startofpacket),       //                .startofpacket
		.rf_source_endofpacket   (ns_from_hps_s1_agent_rf_source_endofpacket),         //                .endofpacket
		.rf_source_data          (ns_from_hps_s1_agent_rf_source_data),                //                .data
		.rdata_fifo_sink_ready   (avalon_st_adapter_004_out_0_ready),                  // rdata_fifo_sink.ready
		.rdata_fifo_sink_valid   (avalon_st_adapter_004_out_0_valid),                  //                .valid
		.rdata_fifo_sink_data    (avalon_st_adapter_004_out_0_data),                   //                .data
		.rdata_fifo_sink_error   (avalon_st_adapter_004_out_0_error),                  //                .error
		.rdata_fifo_src_ready    (ns_from_hps_s1_agent_rdata_fifo_src_ready),          //  rdata_fifo_src.ready
		.rdata_fifo_src_valid    (ns_from_hps_s1_agent_rdata_fifo_src_valid),          //                .valid
		.rdata_fifo_src_data     (ns_from_hps_s1_agent_rdata_fifo_src_data),           //                .data
		.m0_response             (2'b00),                                              //     (terminated)
		.m0_writeresponsevalid   (1'b0)                                                //     (terminated)
	);

	altera_avalon_sc_fifo #(
		.SYMBOLS_PER_BEAT    (1),
		.BITS_PER_SYMBOL     (121),
		.FIFO_DEPTH          (2),
		.CHANNEL_WIDTH       (0),
		.ERROR_WIDTH         (0),
		.USE_PACKETS         (1),
		.USE_FILL_LEVEL      (0),
		.EMPTY_LATENCY       (1),
		.USE_MEMORY_BLOCKS   (0),
		.USE_STORE_FORWARD   (0),
		.USE_ALMOST_FULL_IF  (0),
		.USE_ALMOST_EMPTY_IF (0)
	) ns_from_hps_s1_agent_rsp_fifo (
		.clk               (System_PLL_sys_clk_clk),                          //       clk.clk
		.reset             (n0_from_hps_reset_reset_bridge_in_reset_reset),   // clk_reset.reset
		.in_data           (ns_from_hps_s1_agent_rf_source_data),             //        in.data
		.in_valid          (ns_from_hps_s1_agent_rf_source_valid),            //          .valid
		.in_ready          (ns_from_hps_s1_agent_rf_source_ready),            //          .ready
		.in_startofpacket  (ns_from_hps_s1_agent_rf_source_startofpacket),    //          .startofpacket
		.in_endofpacket    (ns_from_hps_s1_agent_rf_source_endofpacket),      //          .endofpacket
		.out_data          (ns_from_hps_s1_agent_rsp_fifo_out_data),          //       out.data
		.out_valid         (ns_from_hps_s1_agent_rsp_fifo_out_valid),         //          .valid
		.out_ready         (ns_from_hps_s1_agent_rsp_fifo_out_ready),         //          .ready
		.out_startofpacket (ns_from_hps_s1_agent_rsp_fifo_out_startofpacket), //          .startofpacket
		.out_endofpacket   (ns_from_hps_s1_agent_rsp_fifo_out_endofpacket),   //          .endofpacket
		.csr_address       (2'b00),                                           // (terminated)
		.csr_read          (1'b0),                                            // (terminated)
		.csr_write         (1'b0),                                            // (terminated)
		.csr_readdata      (),                                                // (terminated)
		.csr_writedata     (32'b00000000000000000000000000000000),            // (terminated)
		.almost_full_data  (),                                                // (terminated)
		.almost_empty_data (),                                                // (terminated)
		.in_empty          (1'b0),                                            // (terminated)
		.out_empty         (),                                                // (terminated)
		.in_error          (1'b0),                                            // (terminated)
		.out_error         (),                                                // (terminated)
		.in_channel        (1'b0),                                            // (terminated)
		.out_channel       ()                                                 // (terminated)
	);

	altera_avalon_sc_fifo #(
		.SYMBOLS_PER_BEAT    (1),
		.BITS_PER_SYMBOL     (34),
		.FIFO_DEPTH          (2),
		.CHANNEL_WIDTH       (0),
		.ERROR_WIDTH         (0),
		.USE_PACKETS         (0),
		.USE_FILL_LEVEL      (0),
		.EMPTY_LATENCY       (0),
		.USE_MEMORY_BLOCKS   (0),
		.USE_STORE_FORWARD   (0),
		.USE_ALMOST_FULL_IF  (0),
		.USE_ALMOST_EMPTY_IF (0)
	) ns_from_hps_s1_agent_rdata_fifo (
		.clk               (System_PLL_sys_clk_clk),                        //       clk.clk
		.reset             (n0_from_hps_reset_reset_bridge_in_reset_reset), // clk_reset.reset
		.in_data           (ns_from_hps_s1_agent_rdata_fifo_src_data),      //        in.data
		.in_valid          (ns_from_hps_s1_agent_rdata_fifo_src_valid),     //          .valid
		.in_ready          (ns_from_hps_s1_agent_rdata_fifo_src_ready),     //          .ready
		.out_data          (ns_from_hps_s1_agent_rdata_fifo_out_data),      //       out.data
		.out_valid         (ns_from_hps_s1_agent_rdata_fifo_out_valid),     //          .valid
		.out_ready         (ns_from_hps_s1_agent_rdata_fifo_out_ready),     //          .ready
		.csr_address       (2'b00),                                         // (terminated)
		.csr_read          (1'b0),                                          // (terminated)
		.csr_write         (1'b0),                                          // (terminated)
		.csr_readdata      (),                                              // (terminated)
		.csr_writedata     (32'b00000000000000000000000000000000),          // (terminated)
		.almost_full_data  (),                                              // (terminated)
		.almost_empty_data (),                                              // (terminated)
		.in_startofpacket  (1'b0),                                          // (terminated)
		.in_endofpacket    (1'b0),                                          // (terminated)
		.out_startofpacket (),                                              // (terminated)
		.out_endofpacket   (),                                              // (terminated)
		.in_empty          (1'b0),                                          // (terminated)
		.out_empty         (),                                              // (terminated)
		.in_error          (1'b0),                                          // (terminated)
		.out_error         (),                                              // (terminated)
		.in_channel        (1'b0),                                          // (terminated)
		.out_channel       ()                                               // (terminated)
	);

	altera_merlin_slave_agent #(
		.PKT_ORI_BURST_SIZE_H      (119),
		.PKT_ORI_BURST_SIZE_L      (117),
		.PKT_RESPONSE_STATUS_H     (116),
		.PKT_RESPONSE_STATUS_L     (115),
		.PKT_BURST_SIZE_H          (79),
		.PKT_BURST_SIZE_L          (77),
		.PKT_TRANS_LOCK            (61),
		.PKT_BEGIN_BURST           (84),
		.PKT_PROTECTION_H          (110),
		.PKT_PROTECTION_L          (108),
		.PKT_BURSTWRAP_H           (76),
		.PKT_BURSTWRAP_L           (70),
		.PKT_BYTE_CNT_H            (69),
		.PKT_BYTE_CNT_L            (63),
		.PKT_ADDR_H                (56),
		.PKT_ADDR_L                (36),
		.PKT_TRANS_COMPRESSED_READ (57),
		.PKT_TRANS_POSTED          (58),
		.PKT_TRANS_WRITE           (59),
		.PKT_TRANS_READ            (60),
		.PKT_DATA_H                (31),
		.PKT_DATA_L                (0),
		.PKT_BYTEEN_H              (35),
		.PKT_BYTEEN_L              (32),
		.PKT_SRC_ID_H              (90),
		.PKT_SRC_ID_L              (86),
		.PKT_DEST_ID_H             (95),
		.PKT_DEST_ID_L             (91),
		.PKT_SYMBOL_W              (8),
		.ST_CHANNEL_W              (27),
		.ST_DATA_W                 (120),
		.AVS_BURSTCOUNT_W          (3),
		.SUPPRESS_0_BYTEEN_CMD     (1),
		.PREVENT_FIFO_OVERFLOW     (1),
		.USE_READRESPONSE          (0),
		.USE_WRITERESPONSE         (0),
		.ECC_ENABLE                (0)
	) nw_from_hps_s1_agent (
		.clk                     (System_PLL_sys_clk_clk),                             //             clk.clk
		.reset                   (n0_from_hps_reset_reset_bridge_in_reset_reset),      //       clk_reset.reset
		.m0_address              (nw_from_hps_s1_agent_m0_address),                    //              m0.address
		.m0_burstcount           (nw_from_hps_s1_agent_m0_burstcount),                 //                .burstcount
		.m0_byteenable           (nw_from_hps_s1_agent_m0_byteenable),                 //                .byteenable
		.m0_debugaccess          (nw_from_hps_s1_agent_m0_debugaccess),                //                .debugaccess
		.m0_lock                 (nw_from_hps_s1_agent_m0_lock),                       //                .lock
		.m0_readdata             (nw_from_hps_s1_agent_m0_readdata),                   //                .readdata
		.m0_readdatavalid        (nw_from_hps_s1_agent_m0_readdatavalid),              //                .readdatavalid
		.m0_read                 (nw_from_hps_s1_agent_m0_read),                       //                .read
		.m0_waitrequest          (nw_from_hps_s1_agent_m0_waitrequest),                //                .waitrequest
		.m0_writedata            (nw_from_hps_s1_agent_m0_writedata),                  //                .writedata
		.m0_write                (nw_from_hps_s1_agent_m0_write),                      //                .write
		.rp_endofpacket          (nw_from_hps_s1_agent_rp_endofpacket),                //              rp.endofpacket
		.rp_ready                (nw_from_hps_s1_agent_rp_ready),                      //                .ready
		.rp_valid                (nw_from_hps_s1_agent_rp_valid),                      //                .valid
		.rp_data                 (nw_from_hps_s1_agent_rp_data),                       //                .data
		.rp_startofpacket        (nw_from_hps_s1_agent_rp_startofpacket),              //                .startofpacket
		.cp_ready                (nw_from_hps_s1_burst_adapter_source0_ready),         //              cp.ready
		.cp_valid                (nw_from_hps_s1_burst_adapter_source0_valid),         //                .valid
		.cp_data                 (nw_from_hps_s1_burst_adapter_source0_data),          //                .data
		.cp_startofpacket        (nw_from_hps_s1_burst_adapter_source0_startofpacket), //                .startofpacket
		.cp_endofpacket          (nw_from_hps_s1_burst_adapter_source0_endofpacket),   //                .endofpacket
		.cp_channel              (nw_from_hps_s1_burst_adapter_source0_channel),       //                .channel
		.rf_sink_ready           (nw_from_hps_s1_agent_rsp_fifo_out_ready),            //         rf_sink.ready
		.rf_sink_valid           (nw_from_hps_s1_agent_rsp_fifo_out_valid),            //                .valid
		.rf_sink_startofpacket   (nw_from_hps_s1_agent_rsp_fifo_out_startofpacket),    //                .startofpacket
		.rf_sink_endofpacket     (nw_from_hps_s1_agent_rsp_fifo_out_endofpacket),      //                .endofpacket
		.rf_sink_data            (nw_from_hps_s1_agent_rsp_fifo_out_data),             //                .data
		.rf_source_ready         (nw_from_hps_s1_agent_rf_source_ready),               //       rf_source.ready
		.rf_source_valid         (nw_from_hps_s1_agent_rf_source_valid),               //                .valid
		.rf_source_startofpacket (nw_from_hps_s1_agent_rf_source_startofpacket),       //                .startofpacket
		.rf_source_endofpacket   (nw_from_hps_s1_agent_rf_source_endofpacket),         //                .endofpacket
		.rf_source_data          (nw_from_hps_s1_agent_rf_source_data),                //                .data
		.rdata_fifo_sink_ready   (avalon_st_adapter_005_out_0_ready),                  // rdata_fifo_sink.ready
		.rdata_fifo_sink_valid   (avalon_st_adapter_005_out_0_valid),                  //                .valid
		.rdata_fifo_sink_data    (avalon_st_adapter_005_out_0_data),                   //                .data
		.rdata_fifo_sink_error   (avalon_st_adapter_005_out_0_error),                  //                .error
		.rdata_fifo_src_ready    (nw_from_hps_s1_agent_rdata_fifo_src_ready),          //  rdata_fifo_src.ready
		.rdata_fifo_src_valid    (nw_from_hps_s1_agent_rdata_fifo_src_valid),          //                .valid
		.rdata_fifo_src_data     (nw_from_hps_s1_agent_rdata_fifo_src_data),           //                .data
		.m0_response             (2'b00),                                              //     (terminated)
		.m0_writeresponsevalid   (1'b0)                                                //     (terminated)
	);

	altera_avalon_sc_fifo #(
		.SYMBOLS_PER_BEAT    (1),
		.BITS_PER_SYMBOL     (121),
		.FIFO_DEPTH          (2),
		.CHANNEL_WIDTH       (0),
		.ERROR_WIDTH         (0),
		.USE_PACKETS         (1),
		.USE_FILL_LEVEL      (0),
		.EMPTY_LATENCY       (1),
		.USE_MEMORY_BLOCKS   (0),
		.USE_STORE_FORWARD   (0),
		.USE_ALMOST_FULL_IF  (0),
		.USE_ALMOST_EMPTY_IF (0)
	) nw_from_hps_s1_agent_rsp_fifo (
		.clk               (System_PLL_sys_clk_clk),                          //       clk.clk
		.reset             (n0_from_hps_reset_reset_bridge_in_reset_reset),   // clk_reset.reset
		.in_data           (nw_from_hps_s1_agent_rf_source_data),             //        in.data
		.in_valid          (nw_from_hps_s1_agent_rf_source_valid),            //          .valid
		.in_ready          (nw_from_hps_s1_agent_rf_source_ready),            //          .ready
		.in_startofpacket  (nw_from_hps_s1_agent_rf_source_startofpacket),    //          .startofpacket
		.in_endofpacket    (nw_from_hps_s1_agent_rf_source_endofpacket),      //          .endofpacket
		.out_data          (nw_from_hps_s1_agent_rsp_fifo_out_data),          //       out.data
		.out_valid         (nw_from_hps_s1_agent_rsp_fifo_out_valid),         //          .valid
		.out_ready         (nw_from_hps_s1_agent_rsp_fifo_out_ready),         //          .ready
		.out_startofpacket (nw_from_hps_s1_agent_rsp_fifo_out_startofpacket), //          .startofpacket
		.out_endofpacket   (nw_from_hps_s1_agent_rsp_fifo_out_endofpacket),   //          .endofpacket
		.csr_address       (2'b00),                                           // (terminated)
		.csr_read          (1'b0),                                            // (terminated)
		.csr_write         (1'b0),                                            // (terminated)
		.csr_readdata      (),                                                // (terminated)
		.csr_writedata     (32'b00000000000000000000000000000000),            // (terminated)
		.almost_full_data  (),                                                // (terminated)
		.almost_empty_data (),                                                // (terminated)
		.in_empty          (1'b0),                                            // (terminated)
		.out_empty         (),                                                // (terminated)
		.in_error          (1'b0),                                            // (terminated)
		.out_error         (),                                                // (terminated)
		.in_channel        (1'b0),                                            // (terminated)
		.out_channel       ()                                                 // (terminated)
	);

	altera_avalon_sc_fifo #(
		.SYMBOLS_PER_BEAT    (1),
		.BITS_PER_SYMBOL     (34),
		.FIFO_DEPTH          (2),
		.CHANNEL_WIDTH       (0),
		.ERROR_WIDTH         (0),
		.USE_PACKETS         (0),
		.USE_FILL_LEVEL      (0),
		.EMPTY_LATENCY       (0),
		.USE_MEMORY_BLOCKS   (0),
		.USE_STORE_FORWARD   (0),
		.USE_ALMOST_FULL_IF  (0),
		.USE_ALMOST_EMPTY_IF (0)
	) nw_from_hps_s1_agent_rdata_fifo (
		.clk               (System_PLL_sys_clk_clk),                        //       clk.clk
		.reset             (n0_from_hps_reset_reset_bridge_in_reset_reset), // clk_reset.reset
		.in_data           (nw_from_hps_s1_agent_rdata_fifo_src_data),      //        in.data
		.in_valid          (nw_from_hps_s1_agent_rdata_fifo_src_valid),     //          .valid
		.in_ready          (nw_from_hps_s1_agent_rdata_fifo_src_ready),     //          .ready
		.out_data          (nw_from_hps_s1_agent_rdata_fifo_out_data),      //       out.data
		.out_valid         (nw_from_hps_s1_agent_rdata_fifo_out_valid),     //          .valid
		.out_ready         (nw_from_hps_s1_agent_rdata_fifo_out_ready),     //          .ready
		.csr_address       (2'b00),                                         // (terminated)
		.csr_read          (1'b0),                                          // (terminated)
		.csr_write         (1'b0),                                          // (terminated)
		.csr_readdata      (),                                              // (terminated)
		.csr_writedata     (32'b00000000000000000000000000000000),          // (terminated)
		.almost_full_data  (),                                              // (terminated)
		.almost_empty_data (),                                              // (terminated)
		.in_startofpacket  (1'b0),                                          // (terminated)
		.in_endofpacket    (1'b0),                                          // (terminated)
		.out_startofpacket (),                                              // (terminated)
		.out_endofpacket   (),                                              // (terminated)
		.in_empty          (1'b0),                                          // (terminated)
		.out_empty         (),                                              // (terminated)
		.in_error          (1'b0),                                          // (terminated)
		.out_error         (),                                              // (terminated)
		.in_channel        (1'b0),                                          // (terminated)
		.out_channel       ()                                               // (terminated)
	);

	altera_merlin_slave_agent #(
		.PKT_ORI_BURST_SIZE_H      (119),
		.PKT_ORI_BURST_SIZE_L      (117),
		.PKT_RESPONSE_STATUS_H     (116),
		.PKT_RESPONSE_STATUS_L     (115),
		.PKT_BURST_SIZE_H          (79),
		.PKT_BURST_SIZE_L          (77),
		.PKT_TRANS_LOCK            (61),
		.PKT_BEGIN_BURST           (84),
		.PKT_PROTECTION_H          (110),
		.PKT_PROTECTION_L          (108),
		.PKT_BURSTWRAP_H           (76),
		.PKT_BURSTWRAP_L           (70),
		.PKT_BYTE_CNT_H            (69),
		.PKT_BYTE_CNT_L            (63),
		.PKT_ADDR_H                (56),
		.PKT_ADDR_L                (36),
		.PKT_TRANS_COMPRESSED_READ (57),
		.PKT_TRANS_POSTED          (58),
		.PKT_TRANS_WRITE           (59),
		.PKT_TRANS_READ            (60),
		.PKT_DATA_H                (31),
		.PKT_DATA_L                (0),
		.PKT_BYTEEN_H              (35),
		.PKT_BYTEEN_L              (32),
		.PKT_SRC_ID_H              (90),
		.PKT_SRC_ID_L              (86),
		.PKT_DEST_ID_H             (95),
		.PKT_DEST_ID_L             (91),
		.PKT_SYMBOL_W              (8),
		.ST_CHANNEL_W              (27),
		.ST_DATA_W                 (120),
		.AVS_BURSTCOUNT_W          (3),
		.SUPPRESS_0_BYTEEN_CMD     (1),
		.PREVENT_FIFO_OVERFLOW     (1),
		.USE_READRESPONSE          (0),
		.USE_WRITERESPONSE         (0),
		.ECC_ENABLE                (0)
	) ne_from_hps_s1_agent (
		.clk                     (System_PLL_sys_clk_clk),                             //             clk.clk
		.reset                   (n0_from_hps_reset_reset_bridge_in_reset_reset),      //       clk_reset.reset
		.m0_address              (ne_from_hps_s1_agent_m0_address),                    //              m0.address
		.m0_burstcount           (ne_from_hps_s1_agent_m0_burstcount),                 //                .burstcount
		.m0_byteenable           (ne_from_hps_s1_agent_m0_byteenable),                 //                .byteenable
		.m0_debugaccess          (ne_from_hps_s1_agent_m0_debugaccess),                //                .debugaccess
		.m0_lock                 (ne_from_hps_s1_agent_m0_lock),                       //                .lock
		.m0_readdata             (ne_from_hps_s1_agent_m0_readdata),                   //                .readdata
		.m0_readdatavalid        (ne_from_hps_s1_agent_m0_readdatavalid),              //                .readdatavalid
		.m0_read                 (ne_from_hps_s1_agent_m0_read),                       //                .read
		.m0_waitrequest          (ne_from_hps_s1_agent_m0_waitrequest),                //                .waitrequest
		.m0_writedata            (ne_from_hps_s1_agent_m0_writedata),                  //                .writedata
		.m0_write                (ne_from_hps_s1_agent_m0_write),                      //                .write
		.rp_endofpacket          (ne_from_hps_s1_agent_rp_endofpacket),                //              rp.endofpacket
		.rp_ready                (ne_from_hps_s1_agent_rp_ready),                      //                .ready
		.rp_valid                (ne_from_hps_s1_agent_rp_valid),                      //                .valid
		.rp_data                 (ne_from_hps_s1_agent_rp_data),                       //                .data
		.rp_startofpacket        (ne_from_hps_s1_agent_rp_startofpacket),              //                .startofpacket
		.cp_ready                (ne_from_hps_s1_burst_adapter_source0_ready),         //              cp.ready
		.cp_valid                (ne_from_hps_s1_burst_adapter_source0_valid),         //                .valid
		.cp_data                 (ne_from_hps_s1_burst_adapter_source0_data),          //                .data
		.cp_startofpacket        (ne_from_hps_s1_burst_adapter_source0_startofpacket), //                .startofpacket
		.cp_endofpacket          (ne_from_hps_s1_burst_adapter_source0_endofpacket),   //                .endofpacket
		.cp_channel              (ne_from_hps_s1_burst_adapter_source0_channel),       //                .channel
		.rf_sink_ready           (ne_from_hps_s1_agent_rsp_fifo_out_ready),            //         rf_sink.ready
		.rf_sink_valid           (ne_from_hps_s1_agent_rsp_fifo_out_valid),            //                .valid
		.rf_sink_startofpacket   (ne_from_hps_s1_agent_rsp_fifo_out_startofpacket),    //                .startofpacket
		.rf_sink_endofpacket     (ne_from_hps_s1_agent_rsp_fifo_out_endofpacket),      //                .endofpacket
		.rf_sink_data            (ne_from_hps_s1_agent_rsp_fifo_out_data),             //                .data
		.rf_source_ready         (ne_from_hps_s1_agent_rf_source_ready),               //       rf_source.ready
		.rf_source_valid         (ne_from_hps_s1_agent_rf_source_valid),               //                .valid
		.rf_source_startofpacket (ne_from_hps_s1_agent_rf_source_startofpacket),       //                .startofpacket
		.rf_source_endofpacket   (ne_from_hps_s1_agent_rf_source_endofpacket),         //                .endofpacket
		.rf_source_data          (ne_from_hps_s1_agent_rf_source_data),                //                .data
		.rdata_fifo_sink_ready   (avalon_st_adapter_006_out_0_ready),                  // rdata_fifo_sink.ready
		.rdata_fifo_sink_valid   (avalon_st_adapter_006_out_0_valid),                  //                .valid
		.rdata_fifo_sink_data    (avalon_st_adapter_006_out_0_data),                   //                .data
		.rdata_fifo_sink_error   (avalon_st_adapter_006_out_0_error),                  //                .error
		.rdata_fifo_src_ready    (ne_from_hps_s1_agent_rdata_fifo_src_ready),          //  rdata_fifo_src.ready
		.rdata_fifo_src_valid    (ne_from_hps_s1_agent_rdata_fifo_src_valid),          //                .valid
		.rdata_fifo_src_data     (ne_from_hps_s1_agent_rdata_fifo_src_data),           //                .data
		.m0_response             (2'b00),                                              //     (terminated)
		.m0_writeresponsevalid   (1'b0)                                                //     (terminated)
	);

	altera_avalon_sc_fifo #(
		.SYMBOLS_PER_BEAT    (1),
		.BITS_PER_SYMBOL     (121),
		.FIFO_DEPTH          (2),
		.CHANNEL_WIDTH       (0),
		.ERROR_WIDTH         (0),
		.USE_PACKETS         (1),
		.USE_FILL_LEVEL      (0),
		.EMPTY_LATENCY       (1),
		.USE_MEMORY_BLOCKS   (0),
		.USE_STORE_FORWARD   (0),
		.USE_ALMOST_FULL_IF  (0),
		.USE_ALMOST_EMPTY_IF (0)
	) ne_from_hps_s1_agent_rsp_fifo (
		.clk               (System_PLL_sys_clk_clk),                          //       clk.clk
		.reset             (n0_from_hps_reset_reset_bridge_in_reset_reset),   // clk_reset.reset
		.in_data           (ne_from_hps_s1_agent_rf_source_data),             //        in.data
		.in_valid          (ne_from_hps_s1_agent_rf_source_valid),            //          .valid
		.in_ready          (ne_from_hps_s1_agent_rf_source_ready),            //          .ready
		.in_startofpacket  (ne_from_hps_s1_agent_rf_source_startofpacket),    //          .startofpacket
		.in_endofpacket    (ne_from_hps_s1_agent_rf_source_endofpacket),      //          .endofpacket
		.out_data          (ne_from_hps_s1_agent_rsp_fifo_out_data),          //       out.data
		.out_valid         (ne_from_hps_s1_agent_rsp_fifo_out_valid),         //          .valid
		.out_ready         (ne_from_hps_s1_agent_rsp_fifo_out_ready),         //          .ready
		.out_startofpacket (ne_from_hps_s1_agent_rsp_fifo_out_startofpacket), //          .startofpacket
		.out_endofpacket   (ne_from_hps_s1_agent_rsp_fifo_out_endofpacket),   //          .endofpacket
		.csr_address       (2'b00),                                           // (terminated)
		.csr_read          (1'b0),                                            // (terminated)
		.csr_write         (1'b0),                                            // (terminated)
		.csr_readdata      (),                                                // (terminated)
		.csr_writedata     (32'b00000000000000000000000000000000),            // (terminated)
		.almost_full_data  (),                                                // (terminated)
		.almost_empty_data (),                                                // (terminated)
		.in_empty          (1'b0),                                            // (terminated)
		.out_empty         (),                                                // (terminated)
		.in_error          (1'b0),                                            // (terminated)
		.out_error         (),                                                // (terminated)
		.in_channel        (1'b0),                                            // (terminated)
		.out_channel       ()                                                 // (terminated)
	);

	altera_avalon_sc_fifo #(
		.SYMBOLS_PER_BEAT    (1),
		.BITS_PER_SYMBOL     (34),
		.FIFO_DEPTH          (2),
		.CHANNEL_WIDTH       (0),
		.ERROR_WIDTH         (0),
		.USE_PACKETS         (0),
		.USE_FILL_LEVEL      (0),
		.EMPTY_LATENCY       (0),
		.USE_MEMORY_BLOCKS   (0),
		.USE_STORE_FORWARD   (0),
		.USE_ALMOST_FULL_IF  (0),
		.USE_ALMOST_EMPTY_IF (0)
	) ne_from_hps_s1_agent_rdata_fifo (
		.clk               (System_PLL_sys_clk_clk),                        //       clk.clk
		.reset             (n0_from_hps_reset_reset_bridge_in_reset_reset), // clk_reset.reset
		.in_data           (ne_from_hps_s1_agent_rdata_fifo_src_data),      //        in.data
		.in_valid          (ne_from_hps_s1_agent_rdata_fifo_src_valid),     //          .valid
		.in_ready          (ne_from_hps_s1_agent_rdata_fifo_src_ready),     //          .ready
		.out_data          (ne_from_hps_s1_agent_rdata_fifo_out_data),      //       out.data
		.out_valid         (ne_from_hps_s1_agent_rdata_fifo_out_valid),     //          .valid
		.out_ready         (ne_from_hps_s1_agent_rdata_fifo_out_ready),     //          .ready
		.csr_address       (2'b00),                                         // (terminated)
		.csr_read          (1'b0),                                          // (terminated)
		.csr_write         (1'b0),                                          // (terminated)
		.csr_readdata      (),                                              // (terminated)
		.csr_writedata     (32'b00000000000000000000000000000000),          // (terminated)
		.almost_full_data  (),                                              // (terminated)
		.almost_empty_data (),                                              // (terminated)
		.in_startofpacket  (1'b0),                                          // (terminated)
		.in_endofpacket    (1'b0),                                          // (terminated)
		.out_startofpacket (),                                              // (terminated)
		.out_endofpacket   (),                                              // (terminated)
		.in_empty          (1'b0),                                          // (terminated)
		.out_empty         (),                                              // (terminated)
		.in_error          (1'b0),                                          // (terminated)
		.out_error         (),                                              // (terminated)
		.in_channel        (1'b0),                                          // (terminated)
		.out_channel       ()                                               // (terminated)
	);

	altera_merlin_slave_agent #(
		.PKT_ORI_BURST_SIZE_H      (119),
		.PKT_ORI_BURST_SIZE_L      (117),
		.PKT_RESPONSE_STATUS_H     (116),
		.PKT_RESPONSE_STATUS_L     (115),
		.PKT_BURST_SIZE_H          (79),
		.PKT_BURST_SIZE_L          (77),
		.PKT_TRANS_LOCK            (61),
		.PKT_BEGIN_BURST           (84),
		.PKT_PROTECTION_H          (110),
		.PKT_PROTECTION_L          (108),
		.PKT_BURSTWRAP_H           (76),
		.PKT_BURSTWRAP_L           (70),
		.PKT_BYTE_CNT_H            (69),
		.PKT_BYTE_CNT_L            (63),
		.PKT_ADDR_H                (56),
		.PKT_ADDR_L                (36),
		.PKT_TRANS_COMPRESSED_READ (57),
		.PKT_TRANS_POSTED          (58),
		.PKT_TRANS_WRITE           (59),
		.PKT_TRANS_READ            (60),
		.PKT_DATA_H                (31),
		.PKT_DATA_L                (0),
		.PKT_BYTEEN_H              (35),
		.PKT_BYTEEN_L              (32),
		.PKT_SRC_ID_H              (90),
		.PKT_SRC_ID_L              (86),
		.PKT_DEST_ID_H             (95),
		.PKT_DEST_ID_L             (91),
		.PKT_SYMBOL_W              (8),
		.ST_CHANNEL_W              (27),
		.ST_DATA_W                 (120),
		.AVS_BURSTCOUNT_W          (3),
		.SUPPRESS_0_BYTEEN_CMD     (1),
		.PREVENT_FIFO_OVERFLOW     (1),
		.USE_READRESPONSE          (0),
		.USE_WRITERESPONSE         (0),
		.ECC_ENABLE                (0)
	) nnw_from_hps_s1_agent (
		.clk                     (System_PLL_sys_clk_clk),                              //             clk.clk
		.reset                   (n0_from_hps_reset_reset_bridge_in_reset_reset),       //       clk_reset.reset
		.m0_address              (nnw_from_hps_s1_agent_m0_address),                    //              m0.address
		.m0_burstcount           (nnw_from_hps_s1_agent_m0_burstcount),                 //                .burstcount
		.m0_byteenable           (nnw_from_hps_s1_agent_m0_byteenable),                 //                .byteenable
		.m0_debugaccess          (nnw_from_hps_s1_agent_m0_debugaccess),                //                .debugaccess
		.m0_lock                 (nnw_from_hps_s1_agent_m0_lock),                       //                .lock
		.m0_readdata             (nnw_from_hps_s1_agent_m0_readdata),                   //                .readdata
		.m0_readdatavalid        (nnw_from_hps_s1_agent_m0_readdatavalid),              //                .readdatavalid
		.m0_read                 (nnw_from_hps_s1_agent_m0_read),                       //                .read
		.m0_waitrequest          (nnw_from_hps_s1_agent_m0_waitrequest),                //                .waitrequest
		.m0_writedata            (nnw_from_hps_s1_agent_m0_writedata),                  //                .writedata
		.m0_write                (nnw_from_hps_s1_agent_m0_write),                      //                .write
		.rp_endofpacket          (nnw_from_hps_s1_agent_rp_endofpacket),                //              rp.endofpacket
		.rp_ready                (nnw_from_hps_s1_agent_rp_ready),                      //                .ready
		.rp_valid                (nnw_from_hps_s1_agent_rp_valid),                      //                .valid
		.rp_data                 (nnw_from_hps_s1_agent_rp_data),                       //                .data
		.rp_startofpacket        (nnw_from_hps_s1_agent_rp_startofpacket),              //                .startofpacket
		.cp_ready                (nnw_from_hps_s1_burst_adapter_source0_ready),         //              cp.ready
		.cp_valid                (nnw_from_hps_s1_burst_adapter_source0_valid),         //                .valid
		.cp_data                 (nnw_from_hps_s1_burst_adapter_source0_data),          //                .data
		.cp_startofpacket        (nnw_from_hps_s1_burst_adapter_source0_startofpacket), //                .startofpacket
		.cp_endofpacket          (nnw_from_hps_s1_burst_adapter_source0_endofpacket),   //                .endofpacket
		.cp_channel              (nnw_from_hps_s1_burst_adapter_source0_channel),       //                .channel
		.rf_sink_ready           (nnw_from_hps_s1_agent_rsp_fifo_out_ready),            //         rf_sink.ready
		.rf_sink_valid           (nnw_from_hps_s1_agent_rsp_fifo_out_valid),            //                .valid
		.rf_sink_startofpacket   (nnw_from_hps_s1_agent_rsp_fifo_out_startofpacket),    //                .startofpacket
		.rf_sink_endofpacket     (nnw_from_hps_s1_agent_rsp_fifo_out_endofpacket),      //                .endofpacket
		.rf_sink_data            (nnw_from_hps_s1_agent_rsp_fifo_out_data),             //                .data
		.rf_source_ready         (nnw_from_hps_s1_agent_rf_source_ready),               //       rf_source.ready
		.rf_source_valid         (nnw_from_hps_s1_agent_rf_source_valid),               //                .valid
		.rf_source_startofpacket (nnw_from_hps_s1_agent_rf_source_startofpacket),       //                .startofpacket
		.rf_source_endofpacket   (nnw_from_hps_s1_agent_rf_source_endofpacket),         //                .endofpacket
		.rf_source_data          (nnw_from_hps_s1_agent_rf_source_data),                //                .data
		.rdata_fifo_sink_ready   (avalon_st_adapter_007_out_0_ready),                   // rdata_fifo_sink.ready
		.rdata_fifo_sink_valid   (avalon_st_adapter_007_out_0_valid),                   //                .valid
		.rdata_fifo_sink_data    (avalon_st_adapter_007_out_0_data),                    //                .data
		.rdata_fifo_sink_error   (avalon_st_adapter_007_out_0_error),                   //                .error
		.rdata_fifo_src_ready    (nnw_from_hps_s1_agent_rdata_fifo_src_ready),          //  rdata_fifo_src.ready
		.rdata_fifo_src_valid    (nnw_from_hps_s1_agent_rdata_fifo_src_valid),          //                .valid
		.rdata_fifo_src_data     (nnw_from_hps_s1_agent_rdata_fifo_src_data),           //                .data
		.m0_response             (2'b00),                                               //     (terminated)
		.m0_writeresponsevalid   (1'b0)                                                 //     (terminated)
	);

	altera_avalon_sc_fifo #(
		.SYMBOLS_PER_BEAT    (1),
		.BITS_PER_SYMBOL     (121),
		.FIFO_DEPTH          (2),
		.CHANNEL_WIDTH       (0),
		.ERROR_WIDTH         (0),
		.USE_PACKETS         (1),
		.USE_FILL_LEVEL      (0),
		.EMPTY_LATENCY       (1),
		.USE_MEMORY_BLOCKS   (0),
		.USE_STORE_FORWARD   (0),
		.USE_ALMOST_FULL_IF  (0),
		.USE_ALMOST_EMPTY_IF (0)
	) nnw_from_hps_s1_agent_rsp_fifo (
		.clk               (System_PLL_sys_clk_clk),                           //       clk.clk
		.reset             (n0_from_hps_reset_reset_bridge_in_reset_reset),    // clk_reset.reset
		.in_data           (nnw_from_hps_s1_agent_rf_source_data),             //        in.data
		.in_valid          (nnw_from_hps_s1_agent_rf_source_valid),            //          .valid
		.in_ready          (nnw_from_hps_s1_agent_rf_source_ready),            //          .ready
		.in_startofpacket  (nnw_from_hps_s1_agent_rf_source_startofpacket),    //          .startofpacket
		.in_endofpacket    (nnw_from_hps_s1_agent_rf_source_endofpacket),      //          .endofpacket
		.out_data          (nnw_from_hps_s1_agent_rsp_fifo_out_data),          //       out.data
		.out_valid         (nnw_from_hps_s1_agent_rsp_fifo_out_valid),         //          .valid
		.out_ready         (nnw_from_hps_s1_agent_rsp_fifo_out_ready),         //          .ready
		.out_startofpacket (nnw_from_hps_s1_agent_rsp_fifo_out_startofpacket), //          .startofpacket
		.out_endofpacket   (nnw_from_hps_s1_agent_rsp_fifo_out_endofpacket),   //          .endofpacket
		.csr_address       (2'b00),                                            // (terminated)
		.csr_read          (1'b0),                                             // (terminated)
		.csr_write         (1'b0),                                             // (terminated)
		.csr_readdata      (),                                                 // (terminated)
		.csr_writedata     (32'b00000000000000000000000000000000),             // (terminated)
		.almost_full_data  (),                                                 // (terminated)
		.almost_empty_data (),                                                 // (terminated)
		.in_empty          (1'b0),                                             // (terminated)
		.out_empty         (),                                                 // (terminated)
		.in_error          (1'b0),                                             // (terminated)
		.out_error         (),                                                 // (terminated)
		.in_channel        (1'b0),                                             // (terminated)
		.out_channel       ()                                                  // (terminated)
	);

	altera_avalon_sc_fifo #(
		.SYMBOLS_PER_BEAT    (1),
		.BITS_PER_SYMBOL     (34),
		.FIFO_DEPTH          (2),
		.CHANNEL_WIDTH       (0),
		.ERROR_WIDTH         (0),
		.USE_PACKETS         (0),
		.USE_FILL_LEVEL      (0),
		.EMPTY_LATENCY       (0),
		.USE_MEMORY_BLOCKS   (0),
		.USE_STORE_FORWARD   (0),
		.USE_ALMOST_FULL_IF  (0),
		.USE_ALMOST_EMPTY_IF (0)
	) nnw_from_hps_s1_agent_rdata_fifo (
		.clk               (System_PLL_sys_clk_clk),                        //       clk.clk
		.reset             (n0_from_hps_reset_reset_bridge_in_reset_reset), // clk_reset.reset
		.in_data           (nnw_from_hps_s1_agent_rdata_fifo_src_data),     //        in.data
		.in_valid          (nnw_from_hps_s1_agent_rdata_fifo_src_valid),    //          .valid
		.in_ready          (nnw_from_hps_s1_agent_rdata_fifo_src_ready),    //          .ready
		.out_data          (nnw_from_hps_s1_agent_rdata_fifo_out_data),     //       out.data
		.out_valid         (nnw_from_hps_s1_agent_rdata_fifo_out_valid),    //          .valid
		.out_ready         (nnw_from_hps_s1_agent_rdata_fifo_out_ready),    //          .ready
		.csr_address       (2'b00),                                         // (terminated)
		.csr_read          (1'b0),                                          // (terminated)
		.csr_write         (1'b0),                                          // (terminated)
		.csr_readdata      (),                                              // (terminated)
		.csr_writedata     (32'b00000000000000000000000000000000),          // (terminated)
		.almost_full_data  (),                                              // (terminated)
		.almost_empty_data (),                                              // (terminated)
		.in_startofpacket  (1'b0),                                          // (terminated)
		.in_endofpacket    (1'b0),                                          // (terminated)
		.out_startofpacket (),                                              // (terminated)
		.out_endofpacket   (),                                              // (terminated)
		.in_empty          (1'b0),                                          // (terminated)
		.out_empty         (),                                              // (terminated)
		.in_error          (1'b0),                                          // (terminated)
		.out_error         (),                                              // (terminated)
		.in_channel        (1'b0),                                          // (terminated)
		.out_channel       ()                                               // (terminated)
	);

	altera_merlin_slave_agent #(
		.PKT_ORI_BURST_SIZE_H      (119),
		.PKT_ORI_BURST_SIZE_L      (117),
		.PKT_RESPONSE_STATUS_H     (116),
		.PKT_RESPONSE_STATUS_L     (115),
		.PKT_BURST_SIZE_H          (79),
		.PKT_BURST_SIZE_L          (77),
		.PKT_TRANS_LOCK            (61),
		.PKT_BEGIN_BURST           (84),
		.PKT_PROTECTION_H          (110),
		.PKT_PROTECTION_L          (108),
		.PKT_BURSTWRAP_H           (76),
		.PKT_BURSTWRAP_L           (70),
		.PKT_BYTE_CNT_H            (69),
		.PKT_BYTE_CNT_L            (63),
		.PKT_ADDR_H                (56),
		.PKT_ADDR_L                (36),
		.PKT_TRANS_COMPRESSED_READ (57),
		.PKT_TRANS_POSTED          (58),
		.PKT_TRANS_WRITE           (59),
		.PKT_TRANS_READ            (60),
		.PKT_DATA_H                (31),
		.PKT_DATA_L                (0),
		.PKT_BYTEEN_H              (35),
		.PKT_BYTEEN_L              (32),
		.PKT_SRC_ID_H              (90),
		.PKT_SRC_ID_L              (86),
		.PKT_DEST_ID_H             (95),
		.PKT_DEST_ID_L             (91),
		.PKT_SYMBOL_W              (8),
		.ST_CHANNEL_W              (27),
		.ST_DATA_W                 (120),
		.AVS_BURSTCOUNT_W          (3),
		.SUPPRESS_0_BYTEEN_CMD     (1),
		.PREVENT_FIFO_OVERFLOW     (1),
		.USE_READRESPONSE          (0),
		.USE_WRITERESPONSE         (0),
		.ECC_ENABLE                (0)
	) nne_from_hps_s1_agent (
		.clk                     (System_PLL_sys_clk_clk),                              //             clk.clk
		.reset                   (n0_from_hps_reset_reset_bridge_in_reset_reset),       //       clk_reset.reset
		.m0_address              (nne_from_hps_s1_agent_m0_address),                    //              m0.address
		.m0_burstcount           (nne_from_hps_s1_agent_m0_burstcount),                 //                .burstcount
		.m0_byteenable           (nne_from_hps_s1_agent_m0_byteenable),                 //                .byteenable
		.m0_debugaccess          (nne_from_hps_s1_agent_m0_debugaccess),                //                .debugaccess
		.m0_lock                 (nne_from_hps_s1_agent_m0_lock),                       //                .lock
		.m0_readdata             (nne_from_hps_s1_agent_m0_readdata),                   //                .readdata
		.m0_readdatavalid        (nne_from_hps_s1_agent_m0_readdatavalid),              //                .readdatavalid
		.m0_read                 (nne_from_hps_s1_agent_m0_read),                       //                .read
		.m0_waitrequest          (nne_from_hps_s1_agent_m0_waitrequest),                //                .waitrequest
		.m0_writedata            (nne_from_hps_s1_agent_m0_writedata),                  //                .writedata
		.m0_write                (nne_from_hps_s1_agent_m0_write),                      //                .write
		.rp_endofpacket          (nne_from_hps_s1_agent_rp_endofpacket),                //              rp.endofpacket
		.rp_ready                (nne_from_hps_s1_agent_rp_ready),                      //                .ready
		.rp_valid                (nne_from_hps_s1_agent_rp_valid),                      //                .valid
		.rp_data                 (nne_from_hps_s1_agent_rp_data),                       //                .data
		.rp_startofpacket        (nne_from_hps_s1_agent_rp_startofpacket),              //                .startofpacket
		.cp_ready                (nne_from_hps_s1_burst_adapter_source0_ready),         //              cp.ready
		.cp_valid                (nne_from_hps_s1_burst_adapter_source0_valid),         //                .valid
		.cp_data                 (nne_from_hps_s1_burst_adapter_source0_data),          //                .data
		.cp_startofpacket        (nne_from_hps_s1_burst_adapter_source0_startofpacket), //                .startofpacket
		.cp_endofpacket          (nne_from_hps_s1_burst_adapter_source0_endofpacket),   //                .endofpacket
		.cp_channel              (nne_from_hps_s1_burst_adapter_source0_channel),       //                .channel
		.rf_sink_ready           (nne_from_hps_s1_agent_rsp_fifo_out_ready),            //         rf_sink.ready
		.rf_sink_valid           (nne_from_hps_s1_agent_rsp_fifo_out_valid),            //                .valid
		.rf_sink_startofpacket   (nne_from_hps_s1_agent_rsp_fifo_out_startofpacket),    //                .startofpacket
		.rf_sink_endofpacket     (nne_from_hps_s1_agent_rsp_fifo_out_endofpacket),      //                .endofpacket
		.rf_sink_data            (nne_from_hps_s1_agent_rsp_fifo_out_data),             //                .data
		.rf_source_ready         (nne_from_hps_s1_agent_rf_source_ready),               //       rf_source.ready
		.rf_source_valid         (nne_from_hps_s1_agent_rf_source_valid),               //                .valid
		.rf_source_startofpacket (nne_from_hps_s1_agent_rf_source_startofpacket),       //                .startofpacket
		.rf_source_endofpacket   (nne_from_hps_s1_agent_rf_source_endofpacket),         //                .endofpacket
		.rf_source_data          (nne_from_hps_s1_agent_rf_source_data),                //                .data
		.rdata_fifo_sink_ready   (avalon_st_adapter_008_out_0_ready),                   // rdata_fifo_sink.ready
		.rdata_fifo_sink_valid   (avalon_st_adapter_008_out_0_valid),                   //                .valid
		.rdata_fifo_sink_data    (avalon_st_adapter_008_out_0_data),                    //                .data
		.rdata_fifo_sink_error   (avalon_st_adapter_008_out_0_error),                   //                .error
		.rdata_fifo_src_ready    (nne_from_hps_s1_agent_rdata_fifo_src_ready),          //  rdata_fifo_src.ready
		.rdata_fifo_src_valid    (nne_from_hps_s1_agent_rdata_fifo_src_valid),          //                .valid
		.rdata_fifo_src_data     (nne_from_hps_s1_agent_rdata_fifo_src_data),           //                .data
		.m0_response             (2'b00),                                               //     (terminated)
		.m0_writeresponsevalid   (1'b0)                                                 //     (terminated)
	);

	altera_avalon_sc_fifo #(
		.SYMBOLS_PER_BEAT    (1),
		.BITS_PER_SYMBOL     (121),
		.FIFO_DEPTH          (2),
		.CHANNEL_WIDTH       (0),
		.ERROR_WIDTH         (0),
		.USE_PACKETS         (1),
		.USE_FILL_LEVEL      (0),
		.EMPTY_LATENCY       (1),
		.USE_MEMORY_BLOCKS   (0),
		.USE_STORE_FORWARD   (0),
		.USE_ALMOST_FULL_IF  (0),
		.USE_ALMOST_EMPTY_IF (0)
	) nne_from_hps_s1_agent_rsp_fifo (
		.clk               (System_PLL_sys_clk_clk),                           //       clk.clk
		.reset             (n0_from_hps_reset_reset_bridge_in_reset_reset),    // clk_reset.reset
		.in_data           (nne_from_hps_s1_agent_rf_source_data),             //        in.data
		.in_valid          (nne_from_hps_s1_agent_rf_source_valid),            //          .valid
		.in_ready          (nne_from_hps_s1_agent_rf_source_ready),            //          .ready
		.in_startofpacket  (nne_from_hps_s1_agent_rf_source_startofpacket),    //          .startofpacket
		.in_endofpacket    (nne_from_hps_s1_agent_rf_source_endofpacket),      //          .endofpacket
		.out_data          (nne_from_hps_s1_agent_rsp_fifo_out_data),          //       out.data
		.out_valid         (nne_from_hps_s1_agent_rsp_fifo_out_valid),         //          .valid
		.out_ready         (nne_from_hps_s1_agent_rsp_fifo_out_ready),         //          .ready
		.out_startofpacket (nne_from_hps_s1_agent_rsp_fifo_out_startofpacket), //          .startofpacket
		.out_endofpacket   (nne_from_hps_s1_agent_rsp_fifo_out_endofpacket),   //          .endofpacket
		.csr_address       (2'b00),                                            // (terminated)
		.csr_read          (1'b0),                                             // (terminated)
		.csr_write         (1'b0),                                             // (terminated)
		.csr_readdata      (),                                                 // (terminated)
		.csr_writedata     (32'b00000000000000000000000000000000),             // (terminated)
		.almost_full_data  (),                                                 // (terminated)
		.almost_empty_data (),                                                 // (terminated)
		.in_empty          (1'b0),                                             // (terminated)
		.out_empty         (),                                                 // (terminated)
		.in_error          (1'b0),                                             // (terminated)
		.out_error         (),                                                 // (terminated)
		.in_channel        (1'b0),                                             // (terminated)
		.out_channel       ()                                                  // (terminated)
	);

	altera_avalon_sc_fifo #(
		.SYMBOLS_PER_BEAT    (1),
		.BITS_PER_SYMBOL     (34),
		.FIFO_DEPTH          (2),
		.CHANNEL_WIDTH       (0),
		.ERROR_WIDTH         (0),
		.USE_PACKETS         (0),
		.USE_FILL_LEVEL      (0),
		.EMPTY_LATENCY       (0),
		.USE_MEMORY_BLOCKS   (0),
		.USE_STORE_FORWARD   (0),
		.USE_ALMOST_FULL_IF  (0),
		.USE_ALMOST_EMPTY_IF (0)
	) nne_from_hps_s1_agent_rdata_fifo (
		.clk               (System_PLL_sys_clk_clk),                        //       clk.clk
		.reset             (n0_from_hps_reset_reset_bridge_in_reset_reset), // clk_reset.reset
		.in_data           (nne_from_hps_s1_agent_rdata_fifo_src_data),     //        in.data
		.in_valid          (nne_from_hps_s1_agent_rdata_fifo_src_valid),    //          .valid
		.in_ready          (nne_from_hps_s1_agent_rdata_fifo_src_ready),    //          .ready
		.out_data          (nne_from_hps_s1_agent_rdata_fifo_out_data),     //       out.data
		.out_valid         (nne_from_hps_s1_agent_rdata_fifo_out_valid),    //          .valid
		.out_ready         (nne_from_hps_s1_agent_rdata_fifo_out_ready),    //          .ready
		.csr_address       (2'b00),                                         // (terminated)
		.csr_read          (1'b0),                                          // (terminated)
		.csr_write         (1'b0),                                          // (terminated)
		.csr_readdata      (),                                              // (terminated)
		.csr_writedata     (32'b00000000000000000000000000000000),          // (terminated)
		.almost_full_data  (),                                              // (terminated)
		.almost_empty_data (),                                              // (terminated)
		.in_startofpacket  (1'b0),                                          // (terminated)
		.in_endofpacket    (1'b0),                                          // (terminated)
		.out_startofpacket (),                                              // (terminated)
		.out_endofpacket   (),                                              // (terminated)
		.in_empty          (1'b0),                                          // (terminated)
		.out_empty         (),                                              // (terminated)
		.in_error          (1'b0),                                          // (terminated)
		.out_error         (),                                              // (terminated)
		.in_channel        (1'b0),                                          // (terminated)
		.out_channel       ()                                               // (terminated)
	);

	altera_merlin_slave_agent #(
		.PKT_ORI_BURST_SIZE_H      (119),
		.PKT_ORI_BURST_SIZE_L      (117),
		.PKT_RESPONSE_STATUS_H     (116),
		.PKT_RESPONSE_STATUS_L     (115),
		.PKT_BURST_SIZE_H          (79),
		.PKT_BURST_SIZE_L          (77),
		.PKT_TRANS_LOCK            (61),
		.PKT_BEGIN_BURST           (84),
		.PKT_PROTECTION_H          (110),
		.PKT_PROTECTION_L          (108),
		.PKT_BURSTWRAP_H           (76),
		.PKT_BURSTWRAP_L           (70),
		.PKT_BYTE_CNT_H            (69),
		.PKT_BYTE_CNT_L            (63),
		.PKT_ADDR_H                (56),
		.PKT_ADDR_L                (36),
		.PKT_TRANS_COMPRESSED_READ (57),
		.PKT_TRANS_POSTED          (58),
		.PKT_TRANS_WRITE           (59),
		.PKT_TRANS_READ            (60),
		.PKT_DATA_H                (31),
		.PKT_DATA_L                (0),
		.PKT_BYTEEN_H              (35),
		.PKT_BYTEEN_L              (32),
		.PKT_SRC_ID_H              (90),
		.PKT_SRC_ID_L              (86),
		.PKT_DEST_ID_H             (95),
		.PKT_DEST_ID_L             (91),
		.PKT_SYMBOL_W              (8),
		.ST_CHANNEL_W              (27),
		.ST_DATA_W                 (120),
		.AVS_BURSTCOUNT_W          (3),
		.SUPPRESS_0_BYTEEN_CMD     (1),
		.PREVENT_FIFO_OVERFLOW     (1),
		.USE_READRESPONSE          (0),
		.USE_WRITERESPONSE         (0),
		.ECC_ENABLE                (0)
	) nsw_from_hps_s1_agent (
		.clk                     (System_PLL_sys_clk_clk),                              //             clk.clk
		.reset                   (n0_from_hps_reset_reset_bridge_in_reset_reset),       //       clk_reset.reset
		.m0_address              (nsw_from_hps_s1_agent_m0_address),                    //              m0.address
		.m0_burstcount           (nsw_from_hps_s1_agent_m0_burstcount),                 //                .burstcount
		.m0_byteenable           (nsw_from_hps_s1_agent_m0_byteenable),                 //                .byteenable
		.m0_debugaccess          (nsw_from_hps_s1_agent_m0_debugaccess),                //                .debugaccess
		.m0_lock                 (nsw_from_hps_s1_agent_m0_lock),                       //                .lock
		.m0_readdata             (nsw_from_hps_s1_agent_m0_readdata),                   //                .readdata
		.m0_readdatavalid        (nsw_from_hps_s1_agent_m0_readdatavalid),              //                .readdatavalid
		.m0_read                 (nsw_from_hps_s1_agent_m0_read),                       //                .read
		.m0_waitrequest          (nsw_from_hps_s1_agent_m0_waitrequest),                //                .waitrequest
		.m0_writedata            (nsw_from_hps_s1_agent_m0_writedata),                  //                .writedata
		.m0_write                (nsw_from_hps_s1_agent_m0_write),                      //                .write
		.rp_endofpacket          (nsw_from_hps_s1_agent_rp_endofpacket),                //              rp.endofpacket
		.rp_ready                (nsw_from_hps_s1_agent_rp_ready),                      //                .ready
		.rp_valid                (nsw_from_hps_s1_agent_rp_valid),                      //                .valid
		.rp_data                 (nsw_from_hps_s1_agent_rp_data),                       //                .data
		.rp_startofpacket        (nsw_from_hps_s1_agent_rp_startofpacket),              //                .startofpacket
		.cp_ready                (nsw_from_hps_s1_burst_adapter_source0_ready),         //              cp.ready
		.cp_valid                (nsw_from_hps_s1_burst_adapter_source0_valid),         //                .valid
		.cp_data                 (nsw_from_hps_s1_burst_adapter_source0_data),          //                .data
		.cp_startofpacket        (nsw_from_hps_s1_burst_adapter_source0_startofpacket), //                .startofpacket
		.cp_endofpacket          (nsw_from_hps_s1_burst_adapter_source0_endofpacket),   //                .endofpacket
		.cp_channel              (nsw_from_hps_s1_burst_adapter_source0_channel),       //                .channel
		.rf_sink_ready           (nsw_from_hps_s1_agent_rsp_fifo_out_ready),            //         rf_sink.ready
		.rf_sink_valid           (nsw_from_hps_s1_agent_rsp_fifo_out_valid),            //                .valid
		.rf_sink_startofpacket   (nsw_from_hps_s1_agent_rsp_fifo_out_startofpacket),    //                .startofpacket
		.rf_sink_endofpacket     (nsw_from_hps_s1_agent_rsp_fifo_out_endofpacket),      //                .endofpacket
		.rf_sink_data            (nsw_from_hps_s1_agent_rsp_fifo_out_data),             //                .data
		.rf_source_ready         (nsw_from_hps_s1_agent_rf_source_ready),               //       rf_source.ready
		.rf_source_valid         (nsw_from_hps_s1_agent_rf_source_valid),               //                .valid
		.rf_source_startofpacket (nsw_from_hps_s1_agent_rf_source_startofpacket),       //                .startofpacket
		.rf_source_endofpacket   (nsw_from_hps_s1_agent_rf_source_endofpacket),         //                .endofpacket
		.rf_source_data          (nsw_from_hps_s1_agent_rf_source_data),                //                .data
		.rdata_fifo_sink_ready   (avalon_st_adapter_009_out_0_ready),                   // rdata_fifo_sink.ready
		.rdata_fifo_sink_valid   (avalon_st_adapter_009_out_0_valid),                   //                .valid
		.rdata_fifo_sink_data    (avalon_st_adapter_009_out_0_data),                    //                .data
		.rdata_fifo_sink_error   (avalon_st_adapter_009_out_0_error),                   //                .error
		.rdata_fifo_src_ready    (nsw_from_hps_s1_agent_rdata_fifo_src_ready),          //  rdata_fifo_src.ready
		.rdata_fifo_src_valid    (nsw_from_hps_s1_agent_rdata_fifo_src_valid),          //                .valid
		.rdata_fifo_src_data     (nsw_from_hps_s1_agent_rdata_fifo_src_data),           //                .data
		.m0_response             (2'b00),                                               //     (terminated)
		.m0_writeresponsevalid   (1'b0)                                                 //     (terminated)
	);

	altera_avalon_sc_fifo #(
		.SYMBOLS_PER_BEAT    (1),
		.BITS_PER_SYMBOL     (121),
		.FIFO_DEPTH          (2),
		.CHANNEL_WIDTH       (0),
		.ERROR_WIDTH         (0),
		.USE_PACKETS         (1),
		.USE_FILL_LEVEL      (0),
		.EMPTY_LATENCY       (1),
		.USE_MEMORY_BLOCKS   (0),
		.USE_STORE_FORWARD   (0),
		.USE_ALMOST_FULL_IF  (0),
		.USE_ALMOST_EMPTY_IF (0)
	) nsw_from_hps_s1_agent_rsp_fifo (
		.clk               (System_PLL_sys_clk_clk),                           //       clk.clk
		.reset             (n0_from_hps_reset_reset_bridge_in_reset_reset),    // clk_reset.reset
		.in_data           (nsw_from_hps_s1_agent_rf_source_data),             //        in.data
		.in_valid          (nsw_from_hps_s1_agent_rf_source_valid),            //          .valid
		.in_ready          (nsw_from_hps_s1_agent_rf_source_ready),            //          .ready
		.in_startofpacket  (nsw_from_hps_s1_agent_rf_source_startofpacket),    //          .startofpacket
		.in_endofpacket    (nsw_from_hps_s1_agent_rf_source_endofpacket),      //          .endofpacket
		.out_data          (nsw_from_hps_s1_agent_rsp_fifo_out_data),          //       out.data
		.out_valid         (nsw_from_hps_s1_agent_rsp_fifo_out_valid),         //          .valid
		.out_ready         (nsw_from_hps_s1_agent_rsp_fifo_out_ready),         //          .ready
		.out_startofpacket (nsw_from_hps_s1_agent_rsp_fifo_out_startofpacket), //          .startofpacket
		.out_endofpacket   (nsw_from_hps_s1_agent_rsp_fifo_out_endofpacket),   //          .endofpacket
		.csr_address       (2'b00),                                            // (terminated)
		.csr_read          (1'b0),                                             // (terminated)
		.csr_write         (1'b0),                                             // (terminated)
		.csr_readdata      (),                                                 // (terminated)
		.csr_writedata     (32'b00000000000000000000000000000000),             // (terminated)
		.almost_full_data  (),                                                 // (terminated)
		.almost_empty_data (),                                                 // (terminated)
		.in_empty          (1'b0),                                             // (terminated)
		.out_empty         (),                                                 // (terminated)
		.in_error          (1'b0),                                             // (terminated)
		.out_error         (),                                                 // (terminated)
		.in_channel        (1'b0),                                             // (terminated)
		.out_channel       ()                                                  // (terminated)
	);

	altera_avalon_sc_fifo #(
		.SYMBOLS_PER_BEAT    (1),
		.BITS_PER_SYMBOL     (34),
		.FIFO_DEPTH          (2),
		.CHANNEL_WIDTH       (0),
		.ERROR_WIDTH         (0),
		.USE_PACKETS         (0),
		.USE_FILL_LEVEL      (0),
		.EMPTY_LATENCY       (0),
		.USE_MEMORY_BLOCKS   (0),
		.USE_STORE_FORWARD   (0),
		.USE_ALMOST_FULL_IF  (0),
		.USE_ALMOST_EMPTY_IF (0)
	) nsw_from_hps_s1_agent_rdata_fifo (
		.clk               (System_PLL_sys_clk_clk),                        //       clk.clk
		.reset             (n0_from_hps_reset_reset_bridge_in_reset_reset), // clk_reset.reset
		.in_data           (nsw_from_hps_s1_agent_rdata_fifo_src_data),     //        in.data
		.in_valid          (nsw_from_hps_s1_agent_rdata_fifo_src_valid),    //          .valid
		.in_ready          (nsw_from_hps_s1_agent_rdata_fifo_src_ready),    //          .ready
		.out_data          (nsw_from_hps_s1_agent_rdata_fifo_out_data),     //       out.data
		.out_valid         (nsw_from_hps_s1_agent_rdata_fifo_out_valid),    //          .valid
		.out_ready         (nsw_from_hps_s1_agent_rdata_fifo_out_ready),    //          .ready
		.csr_address       (2'b00),                                         // (terminated)
		.csr_read          (1'b0),                                          // (terminated)
		.csr_write         (1'b0),                                          // (terminated)
		.csr_readdata      (),                                              // (terminated)
		.csr_writedata     (32'b00000000000000000000000000000000),          // (terminated)
		.almost_full_data  (),                                              // (terminated)
		.almost_empty_data (),                                              // (terminated)
		.in_startofpacket  (1'b0),                                          // (terminated)
		.in_endofpacket    (1'b0),                                          // (terminated)
		.out_startofpacket (),                                              // (terminated)
		.out_endofpacket   (),                                              // (terminated)
		.in_empty          (1'b0),                                          // (terminated)
		.out_empty         (),                                              // (terminated)
		.in_error          (1'b0),                                          // (terminated)
		.out_error         (),                                              // (terminated)
		.in_channel        (1'b0),                                          // (terminated)
		.out_channel       ()                                               // (terminated)
	);

	altera_merlin_slave_agent #(
		.PKT_ORI_BURST_SIZE_H      (119),
		.PKT_ORI_BURST_SIZE_L      (117),
		.PKT_RESPONSE_STATUS_H     (116),
		.PKT_RESPONSE_STATUS_L     (115),
		.PKT_BURST_SIZE_H          (79),
		.PKT_BURST_SIZE_L          (77),
		.PKT_TRANS_LOCK            (61),
		.PKT_BEGIN_BURST           (84),
		.PKT_PROTECTION_H          (110),
		.PKT_PROTECTION_L          (108),
		.PKT_BURSTWRAP_H           (76),
		.PKT_BURSTWRAP_L           (70),
		.PKT_BYTE_CNT_H            (69),
		.PKT_BYTE_CNT_L            (63),
		.PKT_ADDR_H                (56),
		.PKT_ADDR_L                (36),
		.PKT_TRANS_COMPRESSED_READ (57),
		.PKT_TRANS_POSTED          (58),
		.PKT_TRANS_WRITE           (59),
		.PKT_TRANS_READ            (60),
		.PKT_DATA_H                (31),
		.PKT_DATA_L                (0),
		.PKT_BYTEEN_H              (35),
		.PKT_BYTEEN_L              (32),
		.PKT_SRC_ID_H              (90),
		.PKT_SRC_ID_L              (86),
		.PKT_DEST_ID_H             (95),
		.PKT_DEST_ID_L             (91),
		.PKT_SYMBOL_W              (8),
		.ST_CHANNEL_W              (27),
		.ST_DATA_W                 (120),
		.AVS_BURSTCOUNT_W          (3),
		.SUPPRESS_0_BYTEEN_CMD     (1),
		.PREVENT_FIFO_OVERFLOW     (1),
		.USE_READRESPONSE          (0),
		.USE_WRITERESPONSE         (0),
		.ECC_ENABLE                (0)
	) nse_from_hps_s1_agent (
		.clk                     (System_PLL_sys_clk_clk),                              //             clk.clk
		.reset                   (n0_from_hps_reset_reset_bridge_in_reset_reset),       //       clk_reset.reset
		.m0_address              (nse_from_hps_s1_agent_m0_address),                    //              m0.address
		.m0_burstcount           (nse_from_hps_s1_agent_m0_burstcount),                 //                .burstcount
		.m0_byteenable           (nse_from_hps_s1_agent_m0_byteenable),                 //                .byteenable
		.m0_debugaccess          (nse_from_hps_s1_agent_m0_debugaccess),                //                .debugaccess
		.m0_lock                 (nse_from_hps_s1_agent_m0_lock),                       //                .lock
		.m0_readdata             (nse_from_hps_s1_agent_m0_readdata),                   //                .readdata
		.m0_readdatavalid        (nse_from_hps_s1_agent_m0_readdatavalid),              //                .readdatavalid
		.m0_read                 (nse_from_hps_s1_agent_m0_read),                       //                .read
		.m0_waitrequest          (nse_from_hps_s1_agent_m0_waitrequest),                //                .waitrequest
		.m0_writedata            (nse_from_hps_s1_agent_m0_writedata),                  //                .writedata
		.m0_write                (nse_from_hps_s1_agent_m0_write),                      //                .write
		.rp_endofpacket          (nse_from_hps_s1_agent_rp_endofpacket),                //              rp.endofpacket
		.rp_ready                (nse_from_hps_s1_agent_rp_ready),                      //                .ready
		.rp_valid                (nse_from_hps_s1_agent_rp_valid),                      //                .valid
		.rp_data                 (nse_from_hps_s1_agent_rp_data),                       //                .data
		.rp_startofpacket        (nse_from_hps_s1_agent_rp_startofpacket),              //                .startofpacket
		.cp_ready                (nse_from_hps_s1_burst_adapter_source0_ready),         //              cp.ready
		.cp_valid                (nse_from_hps_s1_burst_adapter_source0_valid),         //                .valid
		.cp_data                 (nse_from_hps_s1_burst_adapter_source0_data),          //                .data
		.cp_startofpacket        (nse_from_hps_s1_burst_adapter_source0_startofpacket), //                .startofpacket
		.cp_endofpacket          (nse_from_hps_s1_burst_adapter_source0_endofpacket),   //                .endofpacket
		.cp_channel              (nse_from_hps_s1_burst_adapter_source0_channel),       //                .channel
		.rf_sink_ready           (nse_from_hps_s1_agent_rsp_fifo_out_ready),            //         rf_sink.ready
		.rf_sink_valid           (nse_from_hps_s1_agent_rsp_fifo_out_valid),            //                .valid
		.rf_sink_startofpacket   (nse_from_hps_s1_agent_rsp_fifo_out_startofpacket),    //                .startofpacket
		.rf_sink_endofpacket     (nse_from_hps_s1_agent_rsp_fifo_out_endofpacket),      //                .endofpacket
		.rf_sink_data            (nse_from_hps_s1_agent_rsp_fifo_out_data),             //                .data
		.rf_source_ready         (nse_from_hps_s1_agent_rf_source_ready),               //       rf_source.ready
		.rf_source_valid         (nse_from_hps_s1_agent_rf_source_valid),               //                .valid
		.rf_source_startofpacket (nse_from_hps_s1_agent_rf_source_startofpacket),       //                .startofpacket
		.rf_source_endofpacket   (nse_from_hps_s1_agent_rf_source_endofpacket),         //                .endofpacket
		.rf_source_data          (nse_from_hps_s1_agent_rf_source_data),                //                .data
		.rdata_fifo_sink_ready   (avalon_st_adapter_010_out_0_ready),                   // rdata_fifo_sink.ready
		.rdata_fifo_sink_valid   (avalon_st_adapter_010_out_0_valid),                   //                .valid
		.rdata_fifo_sink_data    (avalon_st_adapter_010_out_0_data),                    //                .data
		.rdata_fifo_sink_error   (avalon_st_adapter_010_out_0_error),                   //                .error
		.rdata_fifo_src_ready    (nse_from_hps_s1_agent_rdata_fifo_src_ready),          //  rdata_fifo_src.ready
		.rdata_fifo_src_valid    (nse_from_hps_s1_agent_rdata_fifo_src_valid),          //                .valid
		.rdata_fifo_src_data     (nse_from_hps_s1_agent_rdata_fifo_src_data),           //                .data
		.m0_response             (2'b00),                                               //     (terminated)
		.m0_writeresponsevalid   (1'b0)                                                 //     (terminated)
	);

	altera_avalon_sc_fifo #(
		.SYMBOLS_PER_BEAT    (1),
		.BITS_PER_SYMBOL     (121),
		.FIFO_DEPTH          (2),
		.CHANNEL_WIDTH       (0),
		.ERROR_WIDTH         (0),
		.USE_PACKETS         (1),
		.USE_FILL_LEVEL      (0),
		.EMPTY_LATENCY       (1),
		.USE_MEMORY_BLOCKS   (0),
		.USE_STORE_FORWARD   (0),
		.USE_ALMOST_FULL_IF  (0),
		.USE_ALMOST_EMPTY_IF (0)
	) nse_from_hps_s1_agent_rsp_fifo (
		.clk               (System_PLL_sys_clk_clk),                           //       clk.clk
		.reset             (n0_from_hps_reset_reset_bridge_in_reset_reset),    // clk_reset.reset
		.in_data           (nse_from_hps_s1_agent_rf_source_data),             //        in.data
		.in_valid          (nse_from_hps_s1_agent_rf_source_valid),            //          .valid
		.in_ready          (nse_from_hps_s1_agent_rf_source_ready),            //          .ready
		.in_startofpacket  (nse_from_hps_s1_agent_rf_source_startofpacket),    //          .startofpacket
		.in_endofpacket    (nse_from_hps_s1_agent_rf_source_endofpacket),      //          .endofpacket
		.out_data          (nse_from_hps_s1_agent_rsp_fifo_out_data),          //       out.data
		.out_valid         (nse_from_hps_s1_agent_rsp_fifo_out_valid),         //          .valid
		.out_ready         (nse_from_hps_s1_agent_rsp_fifo_out_ready),         //          .ready
		.out_startofpacket (nse_from_hps_s1_agent_rsp_fifo_out_startofpacket), //          .startofpacket
		.out_endofpacket   (nse_from_hps_s1_agent_rsp_fifo_out_endofpacket),   //          .endofpacket
		.csr_address       (2'b00),                                            // (terminated)
		.csr_read          (1'b0),                                             // (terminated)
		.csr_write         (1'b0),                                             // (terminated)
		.csr_readdata      (),                                                 // (terminated)
		.csr_writedata     (32'b00000000000000000000000000000000),             // (terminated)
		.almost_full_data  (),                                                 // (terminated)
		.almost_empty_data (),                                                 // (terminated)
		.in_empty          (1'b0),                                             // (terminated)
		.out_empty         (),                                                 // (terminated)
		.in_error          (1'b0),                                             // (terminated)
		.out_error         (),                                                 // (terminated)
		.in_channel        (1'b0),                                             // (terminated)
		.out_channel       ()                                                  // (terminated)
	);

	altera_avalon_sc_fifo #(
		.SYMBOLS_PER_BEAT    (1),
		.BITS_PER_SYMBOL     (34),
		.FIFO_DEPTH          (2),
		.CHANNEL_WIDTH       (0),
		.ERROR_WIDTH         (0),
		.USE_PACKETS         (0),
		.USE_FILL_LEVEL      (0),
		.EMPTY_LATENCY       (0),
		.USE_MEMORY_BLOCKS   (0),
		.USE_STORE_FORWARD   (0),
		.USE_ALMOST_FULL_IF  (0),
		.USE_ALMOST_EMPTY_IF (0)
	) nse_from_hps_s1_agent_rdata_fifo (
		.clk               (System_PLL_sys_clk_clk),                        //       clk.clk
		.reset             (n0_from_hps_reset_reset_bridge_in_reset_reset), // clk_reset.reset
		.in_data           (nse_from_hps_s1_agent_rdata_fifo_src_data),     //        in.data
		.in_valid          (nse_from_hps_s1_agent_rdata_fifo_src_valid),    //          .valid
		.in_ready          (nse_from_hps_s1_agent_rdata_fifo_src_ready),    //          .ready
		.out_data          (nse_from_hps_s1_agent_rdata_fifo_out_data),     //       out.data
		.out_valid         (nse_from_hps_s1_agent_rdata_fifo_out_valid),    //          .valid
		.out_ready         (nse_from_hps_s1_agent_rdata_fifo_out_ready),    //          .ready
		.csr_address       (2'b00),                                         // (terminated)
		.csr_read          (1'b0),                                          // (terminated)
		.csr_write         (1'b0),                                          // (terminated)
		.csr_readdata      (),                                              // (terminated)
		.csr_writedata     (32'b00000000000000000000000000000000),          // (terminated)
		.almost_full_data  (),                                              // (terminated)
		.almost_empty_data (),                                              // (terminated)
		.in_startofpacket  (1'b0),                                          // (terminated)
		.in_endofpacket    (1'b0),                                          // (terminated)
		.out_startofpacket (),                                              // (terminated)
		.out_endofpacket   (),                                              // (terminated)
		.in_empty          (1'b0),                                          // (terminated)
		.out_empty         (),                                              // (terminated)
		.in_error          (1'b0),                                          // (terminated)
		.out_error         (),                                              // (terminated)
		.in_channel        (1'b0),                                          // (terminated)
		.out_channel       ()                                               // (terminated)
	);

	altera_merlin_slave_agent #(
		.PKT_ORI_BURST_SIZE_H      (119),
		.PKT_ORI_BURST_SIZE_L      (117),
		.PKT_RESPONSE_STATUS_H     (116),
		.PKT_RESPONSE_STATUS_L     (115),
		.PKT_BURST_SIZE_H          (79),
		.PKT_BURST_SIZE_L          (77),
		.PKT_TRANS_LOCK            (61),
		.PKT_BEGIN_BURST           (84),
		.PKT_PROTECTION_H          (110),
		.PKT_PROTECTION_L          (108),
		.PKT_BURSTWRAP_H           (76),
		.PKT_BURSTWRAP_L           (70),
		.PKT_BYTE_CNT_H            (69),
		.PKT_BYTE_CNT_L            (63),
		.PKT_ADDR_H                (56),
		.PKT_ADDR_L                (36),
		.PKT_TRANS_COMPRESSED_READ (57),
		.PKT_TRANS_POSTED          (58),
		.PKT_TRANS_WRITE           (59),
		.PKT_TRANS_READ            (60),
		.PKT_DATA_H                (31),
		.PKT_DATA_L                (0),
		.PKT_BYTEEN_H              (35),
		.PKT_BYTEEN_L              (32),
		.PKT_SRC_ID_H              (90),
		.PKT_SRC_ID_L              (86),
		.PKT_DEST_ID_H             (95),
		.PKT_DEST_ID_L             (91),
		.PKT_SYMBOL_W              (8),
		.ST_CHANNEL_W              (27),
		.ST_DATA_W                 (120),
		.AVS_BURSTCOUNT_W          (3),
		.SUPPRESS_0_BYTEEN_CMD     (1),
		.PREVENT_FIFO_OVERFLOW     (1),
		.USE_READRESPONSE          (0),
		.USE_WRITERESPONSE         (0),
		.ECC_ENABLE                (0)
	) n0_from_fpga_s1_agent (
		.clk                     (System_PLL_sys_clk_clk),                              //             clk.clk
		.reset                   (n0_from_hps_reset_reset_bridge_in_reset_reset),       //       clk_reset.reset
		.m0_address              (n0_from_fpga_s1_agent_m0_address),                    //              m0.address
		.m0_burstcount           (n0_from_fpga_s1_agent_m0_burstcount),                 //                .burstcount
		.m0_byteenable           (n0_from_fpga_s1_agent_m0_byteenable),                 //                .byteenable
		.m0_debugaccess          (n0_from_fpga_s1_agent_m0_debugaccess),                //                .debugaccess
		.m0_lock                 (n0_from_fpga_s1_agent_m0_lock),                       //                .lock
		.m0_readdata             (n0_from_fpga_s1_agent_m0_readdata),                   //                .readdata
		.m0_readdatavalid        (n0_from_fpga_s1_agent_m0_readdatavalid),              //                .readdatavalid
		.m0_read                 (n0_from_fpga_s1_agent_m0_read),                       //                .read
		.m0_waitrequest          (n0_from_fpga_s1_agent_m0_waitrequest),                //                .waitrequest
		.m0_writedata            (n0_from_fpga_s1_agent_m0_writedata),                  //                .writedata
		.m0_write                (n0_from_fpga_s1_agent_m0_write),                      //                .write
		.rp_endofpacket          (n0_from_fpga_s1_agent_rp_endofpacket),                //              rp.endofpacket
		.rp_ready                (n0_from_fpga_s1_agent_rp_ready),                      //                .ready
		.rp_valid                (n0_from_fpga_s1_agent_rp_valid),                      //                .valid
		.rp_data                 (n0_from_fpga_s1_agent_rp_data),                       //                .data
		.rp_startofpacket        (n0_from_fpga_s1_agent_rp_startofpacket),              //                .startofpacket
		.cp_ready                (n0_from_fpga_s1_burst_adapter_source0_ready),         //              cp.ready
		.cp_valid                (n0_from_fpga_s1_burst_adapter_source0_valid),         //                .valid
		.cp_data                 (n0_from_fpga_s1_burst_adapter_source0_data),          //                .data
		.cp_startofpacket        (n0_from_fpga_s1_burst_adapter_source0_startofpacket), //                .startofpacket
		.cp_endofpacket          (n0_from_fpga_s1_burst_adapter_source0_endofpacket),   //                .endofpacket
		.cp_channel              (n0_from_fpga_s1_burst_adapter_source0_channel),       //                .channel
		.rf_sink_ready           (n0_from_fpga_s1_agent_rsp_fifo_out_ready),            //         rf_sink.ready
		.rf_sink_valid           (n0_from_fpga_s1_agent_rsp_fifo_out_valid),            //                .valid
		.rf_sink_startofpacket   (n0_from_fpga_s1_agent_rsp_fifo_out_startofpacket),    //                .startofpacket
		.rf_sink_endofpacket     (n0_from_fpga_s1_agent_rsp_fifo_out_endofpacket),      //                .endofpacket
		.rf_sink_data            (n0_from_fpga_s1_agent_rsp_fifo_out_data),             //                .data
		.rf_source_ready         (n0_from_fpga_s1_agent_rf_source_ready),               //       rf_source.ready
		.rf_source_valid         (n0_from_fpga_s1_agent_rf_source_valid),               //                .valid
		.rf_source_startofpacket (n0_from_fpga_s1_agent_rf_source_startofpacket),       //                .startofpacket
		.rf_source_endofpacket   (n0_from_fpga_s1_agent_rf_source_endofpacket),         //                .endofpacket
		.rf_source_data          (n0_from_fpga_s1_agent_rf_source_data),                //                .data
		.rdata_fifo_sink_ready   (avalon_st_adapter_011_out_0_ready),                   // rdata_fifo_sink.ready
		.rdata_fifo_sink_valid   (avalon_st_adapter_011_out_0_valid),                   //                .valid
		.rdata_fifo_sink_data    (avalon_st_adapter_011_out_0_data),                    //                .data
		.rdata_fifo_sink_error   (avalon_st_adapter_011_out_0_error),                   //                .error
		.rdata_fifo_src_ready    (n0_from_fpga_s1_agent_rdata_fifo_src_ready),          //  rdata_fifo_src.ready
		.rdata_fifo_src_valid    (n0_from_fpga_s1_agent_rdata_fifo_src_valid),          //                .valid
		.rdata_fifo_src_data     (n0_from_fpga_s1_agent_rdata_fifo_src_data),           //                .data
		.m0_response             (2'b00),                                               //     (terminated)
		.m0_writeresponsevalid   (1'b0)                                                 //     (terminated)
	);

	altera_avalon_sc_fifo #(
		.SYMBOLS_PER_BEAT    (1),
		.BITS_PER_SYMBOL     (121),
		.FIFO_DEPTH          (2),
		.CHANNEL_WIDTH       (0),
		.ERROR_WIDTH         (0),
		.USE_PACKETS         (1),
		.USE_FILL_LEVEL      (0),
		.EMPTY_LATENCY       (1),
		.USE_MEMORY_BLOCKS   (0),
		.USE_STORE_FORWARD   (0),
		.USE_ALMOST_FULL_IF  (0),
		.USE_ALMOST_EMPTY_IF (0)
	) n0_from_fpga_s1_agent_rsp_fifo (
		.clk               (System_PLL_sys_clk_clk),                           //       clk.clk
		.reset             (n0_from_hps_reset_reset_bridge_in_reset_reset),    // clk_reset.reset
		.in_data           (n0_from_fpga_s1_agent_rf_source_data),             //        in.data
		.in_valid          (n0_from_fpga_s1_agent_rf_source_valid),            //          .valid
		.in_ready          (n0_from_fpga_s1_agent_rf_source_ready),            //          .ready
		.in_startofpacket  (n0_from_fpga_s1_agent_rf_source_startofpacket),    //          .startofpacket
		.in_endofpacket    (n0_from_fpga_s1_agent_rf_source_endofpacket),      //          .endofpacket
		.out_data          (n0_from_fpga_s1_agent_rsp_fifo_out_data),          //       out.data
		.out_valid         (n0_from_fpga_s1_agent_rsp_fifo_out_valid),         //          .valid
		.out_ready         (n0_from_fpga_s1_agent_rsp_fifo_out_ready),         //          .ready
		.out_startofpacket (n0_from_fpga_s1_agent_rsp_fifo_out_startofpacket), //          .startofpacket
		.out_endofpacket   (n0_from_fpga_s1_agent_rsp_fifo_out_endofpacket),   //          .endofpacket
		.csr_address       (2'b00),                                            // (terminated)
		.csr_read          (1'b0),                                             // (terminated)
		.csr_write         (1'b0),                                             // (terminated)
		.csr_readdata      (),                                                 // (terminated)
		.csr_writedata     (32'b00000000000000000000000000000000),             // (terminated)
		.almost_full_data  (),                                                 // (terminated)
		.almost_empty_data (),                                                 // (terminated)
		.in_empty          (1'b0),                                             // (terminated)
		.out_empty         (),                                                 // (terminated)
		.in_error          (1'b0),                                             // (terminated)
		.out_error         (),                                                 // (terminated)
		.in_channel        (1'b0),                                             // (terminated)
		.out_channel       ()                                                  // (terminated)
	);

	altera_avalon_sc_fifo #(
		.SYMBOLS_PER_BEAT    (1),
		.BITS_PER_SYMBOL     (34),
		.FIFO_DEPTH          (2),
		.CHANNEL_WIDTH       (0),
		.ERROR_WIDTH         (0),
		.USE_PACKETS         (0),
		.USE_FILL_LEVEL      (0),
		.EMPTY_LATENCY       (0),
		.USE_MEMORY_BLOCKS   (0),
		.USE_STORE_FORWARD   (0),
		.USE_ALMOST_FULL_IF  (0),
		.USE_ALMOST_EMPTY_IF (0)
	) n0_from_fpga_s1_agent_rdata_fifo (
		.clk               (System_PLL_sys_clk_clk),                        //       clk.clk
		.reset             (n0_from_hps_reset_reset_bridge_in_reset_reset), // clk_reset.reset
		.in_data           (n0_from_fpga_s1_agent_rdata_fifo_src_data),     //        in.data
		.in_valid          (n0_from_fpga_s1_agent_rdata_fifo_src_valid),    //          .valid
		.in_ready          (n0_from_fpga_s1_agent_rdata_fifo_src_ready),    //          .ready
		.out_data          (n0_from_fpga_s1_agent_rdata_fifo_out_data),     //       out.data
		.out_valid         (n0_from_fpga_s1_agent_rdata_fifo_out_valid),    //          .valid
		.out_ready         (n0_from_fpga_s1_agent_rdata_fifo_out_ready),    //          .ready
		.csr_address       (2'b00),                                         // (terminated)
		.csr_read          (1'b0),                                          // (terminated)
		.csr_write         (1'b0),                                          // (terminated)
		.csr_readdata      (),                                              // (terminated)
		.csr_writedata     (32'b00000000000000000000000000000000),          // (terminated)
		.almost_full_data  (),                                              // (terminated)
		.almost_empty_data (),                                              // (terminated)
		.in_startofpacket  (1'b0),                                          // (terminated)
		.in_endofpacket    (1'b0),                                          // (terminated)
		.out_startofpacket (),                                              // (terminated)
		.out_endofpacket   (),                                              // (terminated)
		.in_empty          (1'b0),                                          // (terminated)
		.out_empty         (),                                              // (terminated)
		.in_error          (1'b0),                                          // (terminated)
		.out_error         (),                                              // (terminated)
		.in_channel        (1'b0),                                          // (terminated)
		.out_channel       ()                                               // (terminated)
	);

	altera_merlin_slave_agent #(
		.PKT_ORI_BURST_SIZE_H      (119),
		.PKT_ORI_BURST_SIZE_L      (117),
		.PKT_RESPONSE_STATUS_H     (116),
		.PKT_RESPONSE_STATUS_L     (115),
		.PKT_BURST_SIZE_H          (79),
		.PKT_BURST_SIZE_L          (77),
		.PKT_TRANS_LOCK            (61),
		.PKT_BEGIN_BURST           (84),
		.PKT_PROTECTION_H          (110),
		.PKT_PROTECTION_L          (108),
		.PKT_BURSTWRAP_H           (76),
		.PKT_BURSTWRAP_L           (70),
		.PKT_BYTE_CNT_H            (69),
		.PKT_BYTE_CNT_L            (63),
		.PKT_ADDR_H                (56),
		.PKT_ADDR_L                (36),
		.PKT_TRANS_COMPRESSED_READ (57),
		.PKT_TRANS_POSTED          (58),
		.PKT_TRANS_WRITE           (59),
		.PKT_TRANS_READ            (60),
		.PKT_DATA_H                (31),
		.PKT_DATA_L                (0),
		.PKT_BYTEEN_H              (35),
		.PKT_BYTEEN_L              (32),
		.PKT_SRC_ID_H              (90),
		.PKT_SRC_ID_L              (86),
		.PKT_DEST_ID_H             (95),
		.PKT_DEST_ID_L             (91),
		.PKT_SYMBOL_W              (8),
		.ST_CHANNEL_W              (27),
		.ST_DATA_W                 (120),
		.AVS_BURSTCOUNT_W          (3),
		.SUPPRESS_0_BYTEEN_CMD     (1),
		.PREVENT_FIFO_OVERFLOW     (1),
		.USE_READRESPONSE          (0),
		.USE_WRITERESPONSE         (0),
		.ECC_ENABLE                (0)
	) nn_from_fpga_s1_agent (
		.clk                     (System_PLL_sys_clk_clk),                              //             clk.clk
		.reset                   (n0_from_hps_reset_reset_bridge_in_reset_reset),       //       clk_reset.reset
		.m0_address              (nn_from_fpga_s1_agent_m0_address),                    //              m0.address
		.m0_burstcount           (nn_from_fpga_s1_agent_m0_burstcount),                 //                .burstcount
		.m0_byteenable           (nn_from_fpga_s1_agent_m0_byteenable),                 //                .byteenable
		.m0_debugaccess          (nn_from_fpga_s1_agent_m0_debugaccess),                //                .debugaccess
		.m0_lock                 (nn_from_fpga_s1_agent_m0_lock),                       //                .lock
		.m0_readdata             (nn_from_fpga_s1_agent_m0_readdata),                   //                .readdata
		.m0_readdatavalid        (nn_from_fpga_s1_agent_m0_readdatavalid),              //                .readdatavalid
		.m0_read                 (nn_from_fpga_s1_agent_m0_read),                       //                .read
		.m0_waitrequest          (nn_from_fpga_s1_agent_m0_waitrequest),                //                .waitrequest
		.m0_writedata            (nn_from_fpga_s1_agent_m0_writedata),                  //                .writedata
		.m0_write                (nn_from_fpga_s1_agent_m0_write),                      //                .write
		.rp_endofpacket          (nn_from_fpga_s1_agent_rp_endofpacket),                //              rp.endofpacket
		.rp_ready                (nn_from_fpga_s1_agent_rp_ready),                      //                .ready
		.rp_valid                (nn_from_fpga_s1_agent_rp_valid),                      //                .valid
		.rp_data                 (nn_from_fpga_s1_agent_rp_data),                       //                .data
		.rp_startofpacket        (nn_from_fpga_s1_agent_rp_startofpacket),              //                .startofpacket
		.cp_ready                (nn_from_fpga_s1_burst_adapter_source0_ready),         //              cp.ready
		.cp_valid                (nn_from_fpga_s1_burst_adapter_source0_valid),         //                .valid
		.cp_data                 (nn_from_fpga_s1_burst_adapter_source0_data),          //                .data
		.cp_startofpacket        (nn_from_fpga_s1_burst_adapter_source0_startofpacket), //                .startofpacket
		.cp_endofpacket          (nn_from_fpga_s1_burst_adapter_source0_endofpacket),   //                .endofpacket
		.cp_channel              (nn_from_fpga_s1_burst_adapter_source0_channel),       //                .channel
		.rf_sink_ready           (nn_from_fpga_s1_agent_rsp_fifo_out_ready),            //         rf_sink.ready
		.rf_sink_valid           (nn_from_fpga_s1_agent_rsp_fifo_out_valid),            //                .valid
		.rf_sink_startofpacket   (nn_from_fpga_s1_agent_rsp_fifo_out_startofpacket),    //                .startofpacket
		.rf_sink_endofpacket     (nn_from_fpga_s1_agent_rsp_fifo_out_endofpacket),      //                .endofpacket
		.rf_sink_data            (nn_from_fpga_s1_agent_rsp_fifo_out_data),             //                .data
		.rf_source_ready         (nn_from_fpga_s1_agent_rf_source_ready),               //       rf_source.ready
		.rf_source_valid         (nn_from_fpga_s1_agent_rf_source_valid),               //                .valid
		.rf_source_startofpacket (nn_from_fpga_s1_agent_rf_source_startofpacket),       //                .startofpacket
		.rf_source_endofpacket   (nn_from_fpga_s1_agent_rf_source_endofpacket),         //                .endofpacket
		.rf_source_data          (nn_from_fpga_s1_agent_rf_source_data),                //                .data
		.rdata_fifo_sink_ready   (avalon_st_adapter_012_out_0_ready),                   // rdata_fifo_sink.ready
		.rdata_fifo_sink_valid   (avalon_st_adapter_012_out_0_valid),                   //                .valid
		.rdata_fifo_sink_data    (avalon_st_adapter_012_out_0_data),                    //                .data
		.rdata_fifo_sink_error   (avalon_st_adapter_012_out_0_error),                   //                .error
		.rdata_fifo_src_ready    (nn_from_fpga_s1_agent_rdata_fifo_src_ready),          //  rdata_fifo_src.ready
		.rdata_fifo_src_valid    (nn_from_fpga_s1_agent_rdata_fifo_src_valid),          //                .valid
		.rdata_fifo_src_data     (nn_from_fpga_s1_agent_rdata_fifo_src_data),           //                .data
		.m0_response             (2'b00),                                               //     (terminated)
		.m0_writeresponsevalid   (1'b0)                                                 //     (terminated)
	);

	altera_avalon_sc_fifo #(
		.SYMBOLS_PER_BEAT    (1),
		.BITS_PER_SYMBOL     (121),
		.FIFO_DEPTH          (2),
		.CHANNEL_WIDTH       (0),
		.ERROR_WIDTH         (0),
		.USE_PACKETS         (1),
		.USE_FILL_LEVEL      (0),
		.EMPTY_LATENCY       (1),
		.USE_MEMORY_BLOCKS   (0),
		.USE_STORE_FORWARD   (0),
		.USE_ALMOST_FULL_IF  (0),
		.USE_ALMOST_EMPTY_IF (0)
	) nn_from_fpga_s1_agent_rsp_fifo (
		.clk               (System_PLL_sys_clk_clk),                           //       clk.clk
		.reset             (n0_from_hps_reset_reset_bridge_in_reset_reset),    // clk_reset.reset
		.in_data           (nn_from_fpga_s1_agent_rf_source_data),             //        in.data
		.in_valid          (nn_from_fpga_s1_agent_rf_source_valid),            //          .valid
		.in_ready          (nn_from_fpga_s1_agent_rf_source_ready),            //          .ready
		.in_startofpacket  (nn_from_fpga_s1_agent_rf_source_startofpacket),    //          .startofpacket
		.in_endofpacket    (nn_from_fpga_s1_agent_rf_source_endofpacket),      //          .endofpacket
		.out_data          (nn_from_fpga_s1_agent_rsp_fifo_out_data),          //       out.data
		.out_valid         (nn_from_fpga_s1_agent_rsp_fifo_out_valid),         //          .valid
		.out_ready         (nn_from_fpga_s1_agent_rsp_fifo_out_ready),         //          .ready
		.out_startofpacket (nn_from_fpga_s1_agent_rsp_fifo_out_startofpacket), //          .startofpacket
		.out_endofpacket   (nn_from_fpga_s1_agent_rsp_fifo_out_endofpacket),   //          .endofpacket
		.csr_address       (2'b00),                                            // (terminated)
		.csr_read          (1'b0),                                             // (terminated)
		.csr_write         (1'b0),                                             // (terminated)
		.csr_readdata      (),                                                 // (terminated)
		.csr_writedata     (32'b00000000000000000000000000000000),             // (terminated)
		.almost_full_data  (),                                                 // (terminated)
		.almost_empty_data (),                                                 // (terminated)
		.in_empty          (1'b0),                                             // (terminated)
		.out_empty         (),                                                 // (terminated)
		.in_error          (1'b0),                                             // (terminated)
		.out_error         (),                                                 // (terminated)
		.in_channel        (1'b0),                                             // (terminated)
		.out_channel       ()                                                  // (terminated)
	);

	altera_avalon_sc_fifo #(
		.SYMBOLS_PER_BEAT    (1),
		.BITS_PER_SYMBOL     (34),
		.FIFO_DEPTH          (2),
		.CHANNEL_WIDTH       (0),
		.ERROR_WIDTH         (0),
		.USE_PACKETS         (0),
		.USE_FILL_LEVEL      (0),
		.EMPTY_LATENCY       (0),
		.USE_MEMORY_BLOCKS   (0),
		.USE_STORE_FORWARD   (0),
		.USE_ALMOST_FULL_IF  (0),
		.USE_ALMOST_EMPTY_IF (0)
	) nn_from_fpga_s1_agent_rdata_fifo (
		.clk               (System_PLL_sys_clk_clk),                        //       clk.clk
		.reset             (n0_from_hps_reset_reset_bridge_in_reset_reset), // clk_reset.reset
		.in_data           (nn_from_fpga_s1_agent_rdata_fifo_src_data),     //        in.data
		.in_valid          (nn_from_fpga_s1_agent_rdata_fifo_src_valid),    //          .valid
		.in_ready          (nn_from_fpga_s1_agent_rdata_fifo_src_ready),    //          .ready
		.out_data          (nn_from_fpga_s1_agent_rdata_fifo_out_data),     //       out.data
		.out_valid         (nn_from_fpga_s1_agent_rdata_fifo_out_valid),    //          .valid
		.out_ready         (nn_from_fpga_s1_agent_rdata_fifo_out_ready),    //          .ready
		.csr_address       (2'b00),                                         // (terminated)
		.csr_read          (1'b0),                                          // (terminated)
		.csr_write         (1'b0),                                          // (terminated)
		.csr_readdata      (),                                              // (terminated)
		.csr_writedata     (32'b00000000000000000000000000000000),          // (terminated)
		.almost_full_data  (),                                              // (terminated)
		.almost_empty_data (),                                              // (terminated)
		.in_startofpacket  (1'b0),                                          // (terminated)
		.in_endofpacket    (1'b0),                                          // (terminated)
		.out_startofpacket (),                                              // (terminated)
		.out_endofpacket   (),                                              // (terminated)
		.in_empty          (1'b0),                                          // (terminated)
		.out_empty         (),                                              // (terminated)
		.in_error          (1'b0),                                          // (terminated)
		.out_error         (),                                              // (terminated)
		.in_channel        (1'b0),                                          // (terminated)
		.out_channel       ()                                               // (terminated)
	);

	altera_merlin_slave_agent #(
		.PKT_ORI_BURST_SIZE_H      (119),
		.PKT_ORI_BURST_SIZE_L      (117),
		.PKT_RESPONSE_STATUS_H     (116),
		.PKT_RESPONSE_STATUS_L     (115),
		.PKT_BURST_SIZE_H          (79),
		.PKT_BURST_SIZE_L          (77),
		.PKT_TRANS_LOCK            (61),
		.PKT_BEGIN_BURST           (84),
		.PKT_PROTECTION_H          (110),
		.PKT_PROTECTION_L          (108),
		.PKT_BURSTWRAP_H           (76),
		.PKT_BURSTWRAP_L           (70),
		.PKT_BYTE_CNT_H            (69),
		.PKT_BYTE_CNT_L            (63),
		.PKT_ADDR_H                (56),
		.PKT_ADDR_L                (36),
		.PKT_TRANS_COMPRESSED_READ (57),
		.PKT_TRANS_POSTED          (58),
		.PKT_TRANS_WRITE           (59),
		.PKT_TRANS_READ            (60),
		.PKT_DATA_H                (31),
		.PKT_DATA_L                (0),
		.PKT_BYTEEN_H              (35),
		.PKT_BYTEEN_L              (32),
		.PKT_SRC_ID_H              (90),
		.PKT_SRC_ID_L              (86),
		.PKT_DEST_ID_H             (95),
		.PKT_DEST_ID_L             (91),
		.PKT_SYMBOL_W              (8),
		.ST_CHANNEL_W              (27),
		.ST_DATA_W                 (120),
		.AVS_BURSTCOUNT_W          (3),
		.SUPPRESS_0_BYTEEN_CMD     (1),
		.PREVENT_FIFO_OVERFLOW     (1),
		.USE_READRESPONSE          (0),
		.USE_WRITERESPONSE         (0),
		.ECC_ENABLE                (0)
	) ns_from_fpga_s1_agent (
		.clk                     (System_PLL_sys_clk_clk),                              //             clk.clk
		.reset                   (n0_from_hps_reset_reset_bridge_in_reset_reset),       //       clk_reset.reset
		.m0_address              (ns_from_fpga_s1_agent_m0_address),                    //              m0.address
		.m0_burstcount           (ns_from_fpga_s1_agent_m0_burstcount),                 //                .burstcount
		.m0_byteenable           (ns_from_fpga_s1_agent_m0_byteenable),                 //                .byteenable
		.m0_debugaccess          (ns_from_fpga_s1_agent_m0_debugaccess),                //                .debugaccess
		.m0_lock                 (ns_from_fpga_s1_agent_m0_lock),                       //                .lock
		.m0_readdata             (ns_from_fpga_s1_agent_m0_readdata),                   //                .readdata
		.m0_readdatavalid        (ns_from_fpga_s1_agent_m0_readdatavalid),              //                .readdatavalid
		.m0_read                 (ns_from_fpga_s1_agent_m0_read),                       //                .read
		.m0_waitrequest          (ns_from_fpga_s1_agent_m0_waitrequest),                //                .waitrequest
		.m0_writedata            (ns_from_fpga_s1_agent_m0_writedata),                  //                .writedata
		.m0_write                (ns_from_fpga_s1_agent_m0_write),                      //                .write
		.rp_endofpacket          (ns_from_fpga_s1_agent_rp_endofpacket),                //              rp.endofpacket
		.rp_ready                (ns_from_fpga_s1_agent_rp_ready),                      //                .ready
		.rp_valid                (ns_from_fpga_s1_agent_rp_valid),                      //                .valid
		.rp_data                 (ns_from_fpga_s1_agent_rp_data),                       //                .data
		.rp_startofpacket        (ns_from_fpga_s1_agent_rp_startofpacket),              //                .startofpacket
		.cp_ready                (ns_from_fpga_s1_burst_adapter_source0_ready),         //              cp.ready
		.cp_valid                (ns_from_fpga_s1_burst_adapter_source0_valid),         //                .valid
		.cp_data                 (ns_from_fpga_s1_burst_adapter_source0_data),          //                .data
		.cp_startofpacket        (ns_from_fpga_s1_burst_adapter_source0_startofpacket), //                .startofpacket
		.cp_endofpacket          (ns_from_fpga_s1_burst_adapter_source0_endofpacket),   //                .endofpacket
		.cp_channel              (ns_from_fpga_s1_burst_adapter_source0_channel),       //                .channel
		.rf_sink_ready           (ns_from_fpga_s1_agent_rsp_fifo_out_ready),            //         rf_sink.ready
		.rf_sink_valid           (ns_from_fpga_s1_agent_rsp_fifo_out_valid),            //                .valid
		.rf_sink_startofpacket   (ns_from_fpga_s1_agent_rsp_fifo_out_startofpacket),    //                .startofpacket
		.rf_sink_endofpacket     (ns_from_fpga_s1_agent_rsp_fifo_out_endofpacket),      //                .endofpacket
		.rf_sink_data            (ns_from_fpga_s1_agent_rsp_fifo_out_data),             //                .data
		.rf_source_ready         (ns_from_fpga_s1_agent_rf_source_ready),               //       rf_source.ready
		.rf_source_valid         (ns_from_fpga_s1_agent_rf_source_valid),               //                .valid
		.rf_source_startofpacket (ns_from_fpga_s1_agent_rf_source_startofpacket),       //                .startofpacket
		.rf_source_endofpacket   (ns_from_fpga_s1_agent_rf_source_endofpacket),         //                .endofpacket
		.rf_source_data          (ns_from_fpga_s1_agent_rf_source_data),                //                .data
		.rdata_fifo_sink_ready   (avalon_st_adapter_013_out_0_ready),                   // rdata_fifo_sink.ready
		.rdata_fifo_sink_valid   (avalon_st_adapter_013_out_0_valid),                   //                .valid
		.rdata_fifo_sink_data    (avalon_st_adapter_013_out_0_data),                    //                .data
		.rdata_fifo_sink_error   (avalon_st_adapter_013_out_0_error),                   //                .error
		.rdata_fifo_src_ready    (ns_from_fpga_s1_agent_rdata_fifo_src_ready),          //  rdata_fifo_src.ready
		.rdata_fifo_src_valid    (ns_from_fpga_s1_agent_rdata_fifo_src_valid),          //                .valid
		.rdata_fifo_src_data     (ns_from_fpga_s1_agent_rdata_fifo_src_data),           //                .data
		.m0_response             (2'b00),                                               //     (terminated)
		.m0_writeresponsevalid   (1'b0)                                                 //     (terminated)
	);

	altera_avalon_sc_fifo #(
		.SYMBOLS_PER_BEAT    (1),
		.BITS_PER_SYMBOL     (121),
		.FIFO_DEPTH          (2),
		.CHANNEL_WIDTH       (0),
		.ERROR_WIDTH         (0),
		.USE_PACKETS         (1),
		.USE_FILL_LEVEL      (0),
		.EMPTY_LATENCY       (1),
		.USE_MEMORY_BLOCKS   (0),
		.USE_STORE_FORWARD   (0),
		.USE_ALMOST_FULL_IF  (0),
		.USE_ALMOST_EMPTY_IF (0)
	) ns_from_fpga_s1_agent_rsp_fifo (
		.clk               (System_PLL_sys_clk_clk),                           //       clk.clk
		.reset             (n0_from_hps_reset_reset_bridge_in_reset_reset),    // clk_reset.reset
		.in_data           (ns_from_fpga_s1_agent_rf_source_data),             //        in.data
		.in_valid          (ns_from_fpga_s1_agent_rf_source_valid),            //          .valid
		.in_ready          (ns_from_fpga_s1_agent_rf_source_ready),            //          .ready
		.in_startofpacket  (ns_from_fpga_s1_agent_rf_source_startofpacket),    //          .startofpacket
		.in_endofpacket    (ns_from_fpga_s1_agent_rf_source_endofpacket),      //          .endofpacket
		.out_data          (ns_from_fpga_s1_agent_rsp_fifo_out_data),          //       out.data
		.out_valid         (ns_from_fpga_s1_agent_rsp_fifo_out_valid),         //          .valid
		.out_ready         (ns_from_fpga_s1_agent_rsp_fifo_out_ready),         //          .ready
		.out_startofpacket (ns_from_fpga_s1_agent_rsp_fifo_out_startofpacket), //          .startofpacket
		.out_endofpacket   (ns_from_fpga_s1_agent_rsp_fifo_out_endofpacket),   //          .endofpacket
		.csr_address       (2'b00),                                            // (terminated)
		.csr_read          (1'b0),                                             // (terminated)
		.csr_write         (1'b0),                                             // (terminated)
		.csr_readdata      (),                                                 // (terminated)
		.csr_writedata     (32'b00000000000000000000000000000000),             // (terminated)
		.almost_full_data  (),                                                 // (terminated)
		.almost_empty_data (),                                                 // (terminated)
		.in_empty          (1'b0),                                             // (terminated)
		.out_empty         (),                                                 // (terminated)
		.in_error          (1'b0),                                             // (terminated)
		.out_error         (),                                                 // (terminated)
		.in_channel        (1'b0),                                             // (terminated)
		.out_channel       ()                                                  // (terminated)
	);

	altera_avalon_sc_fifo #(
		.SYMBOLS_PER_BEAT    (1),
		.BITS_PER_SYMBOL     (34),
		.FIFO_DEPTH          (2),
		.CHANNEL_WIDTH       (0),
		.ERROR_WIDTH         (0),
		.USE_PACKETS         (0),
		.USE_FILL_LEVEL      (0),
		.EMPTY_LATENCY       (0),
		.USE_MEMORY_BLOCKS   (0),
		.USE_STORE_FORWARD   (0),
		.USE_ALMOST_FULL_IF  (0),
		.USE_ALMOST_EMPTY_IF (0)
	) ns_from_fpga_s1_agent_rdata_fifo (
		.clk               (System_PLL_sys_clk_clk),                        //       clk.clk
		.reset             (n0_from_hps_reset_reset_bridge_in_reset_reset), // clk_reset.reset
		.in_data           (ns_from_fpga_s1_agent_rdata_fifo_src_data),     //        in.data
		.in_valid          (ns_from_fpga_s1_agent_rdata_fifo_src_valid),    //          .valid
		.in_ready          (ns_from_fpga_s1_agent_rdata_fifo_src_ready),    //          .ready
		.out_data          (ns_from_fpga_s1_agent_rdata_fifo_out_data),     //       out.data
		.out_valid         (ns_from_fpga_s1_agent_rdata_fifo_out_valid),    //          .valid
		.out_ready         (ns_from_fpga_s1_agent_rdata_fifo_out_ready),    //          .ready
		.csr_address       (2'b00),                                         // (terminated)
		.csr_read          (1'b0),                                          // (terminated)
		.csr_write         (1'b0),                                          // (terminated)
		.csr_readdata      (),                                              // (terminated)
		.csr_writedata     (32'b00000000000000000000000000000000),          // (terminated)
		.almost_full_data  (),                                              // (terminated)
		.almost_empty_data (),                                              // (terminated)
		.in_startofpacket  (1'b0),                                          // (terminated)
		.in_endofpacket    (1'b0),                                          // (terminated)
		.out_startofpacket (),                                              // (terminated)
		.out_endofpacket   (),                                              // (terminated)
		.in_empty          (1'b0),                                          // (terminated)
		.out_empty         (),                                              // (terminated)
		.in_error          (1'b0),                                          // (terminated)
		.out_error         (),                                              // (terminated)
		.in_channel        (1'b0),                                          // (terminated)
		.out_channel       ()                                               // (terminated)
	);

	altera_merlin_slave_agent #(
		.PKT_ORI_BURST_SIZE_H      (119),
		.PKT_ORI_BURST_SIZE_L      (117),
		.PKT_RESPONSE_STATUS_H     (116),
		.PKT_RESPONSE_STATUS_L     (115),
		.PKT_BURST_SIZE_H          (79),
		.PKT_BURST_SIZE_L          (77),
		.PKT_TRANS_LOCK            (61),
		.PKT_BEGIN_BURST           (84),
		.PKT_PROTECTION_H          (110),
		.PKT_PROTECTION_L          (108),
		.PKT_BURSTWRAP_H           (76),
		.PKT_BURSTWRAP_L           (70),
		.PKT_BYTE_CNT_H            (69),
		.PKT_BYTE_CNT_L            (63),
		.PKT_ADDR_H                (56),
		.PKT_ADDR_L                (36),
		.PKT_TRANS_COMPRESSED_READ (57),
		.PKT_TRANS_POSTED          (58),
		.PKT_TRANS_WRITE           (59),
		.PKT_TRANS_READ            (60),
		.PKT_DATA_H                (31),
		.PKT_DATA_L                (0),
		.PKT_BYTEEN_H              (35),
		.PKT_BYTEEN_L              (32),
		.PKT_SRC_ID_H              (90),
		.PKT_SRC_ID_L              (86),
		.PKT_DEST_ID_H             (95),
		.PKT_DEST_ID_L             (91),
		.PKT_SYMBOL_W              (8),
		.ST_CHANNEL_W              (27),
		.ST_DATA_W                 (120),
		.AVS_BURSTCOUNT_W          (3),
		.SUPPRESS_0_BYTEEN_CMD     (1),
		.PREVENT_FIFO_OVERFLOW     (1),
		.USE_READRESPONSE          (0),
		.USE_WRITERESPONSE         (0),
		.ECC_ENABLE                (0)
	) nw_from_fpga_s1_agent (
		.clk                     (System_PLL_sys_clk_clk),                              //             clk.clk
		.reset                   (n0_from_hps_reset_reset_bridge_in_reset_reset),       //       clk_reset.reset
		.m0_address              (nw_from_fpga_s1_agent_m0_address),                    //              m0.address
		.m0_burstcount           (nw_from_fpga_s1_agent_m0_burstcount),                 //                .burstcount
		.m0_byteenable           (nw_from_fpga_s1_agent_m0_byteenable),                 //                .byteenable
		.m0_debugaccess          (nw_from_fpga_s1_agent_m0_debugaccess),                //                .debugaccess
		.m0_lock                 (nw_from_fpga_s1_agent_m0_lock),                       //                .lock
		.m0_readdata             (nw_from_fpga_s1_agent_m0_readdata),                   //                .readdata
		.m0_readdatavalid        (nw_from_fpga_s1_agent_m0_readdatavalid),              //                .readdatavalid
		.m0_read                 (nw_from_fpga_s1_agent_m0_read),                       //                .read
		.m0_waitrequest          (nw_from_fpga_s1_agent_m0_waitrequest),                //                .waitrequest
		.m0_writedata            (nw_from_fpga_s1_agent_m0_writedata),                  //                .writedata
		.m0_write                (nw_from_fpga_s1_agent_m0_write),                      //                .write
		.rp_endofpacket          (nw_from_fpga_s1_agent_rp_endofpacket),                //              rp.endofpacket
		.rp_ready                (nw_from_fpga_s1_agent_rp_ready),                      //                .ready
		.rp_valid                (nw_from_fpga_s1_agent_rp_valid),                      //                .valid
		.rp_data                 (nw_from_fpga_s1_agent_rp_data),                       //                .data
		.rp_startofpacket        (nw_from_fpga_s1_agent_rp_startofpacket),              //                .startofpacket
		.cp_ready                (nw_from_fpga_s1_burst_adapter_source0_ready),         //              cp.ready
		.cp_valid                (nw_from_fpga_s1_burst_adapter_source0_valid),         //                .valid
		.cp_data                 (nw_from_fpga_s1_burst_adapter_source0_data),          //                .data
		.cp_startofpacket        (nw_from_fpga_s1_burst_adapter_source0_startofpacket), //                .startofpacket
		.cp_endofpacket          (nw_from_fpga_s1_burst_adapter_source0_endofpacket),   //                .endofpacket
		.cp_channel              (nw_from_fpga_s1_burst_adapter_source0_channel),       //                .channel
		.rf_sink_ready           (nw_from_fpga_s1_agent_rsp_fifo_out_ready),            //         rf_sink.ready
		.rf_sink_valid           (nw_from_fpga_s1_agent_rsp_fifo_out_valid),            //                .valid
		.rf_sink_startofpacket   (nw_from_fpga_s1_agent_rsp_fifo_out_startofpacket),    //                .startofpacket
		.rf_sink_endofpacket     (nw_from_fpga_s1_agent_rsp_fifo_out_endofpacket),      //                .endofpacket
		.rf_sink_data            (nw_from_fpga_s1_agent_rsp_fifo_out_data),             //                .data
		.rf_source_ready         (nw_from_fpga_s1_agent_rf_source_ready),               //       rf_source.ready
		.rf_source_valid         (nw_from_fpga_s1_agent_rf_source_valid),               //                .valid
		.rf_source_startofpacket (nw_from_fpga_s1_agent_rf_source_startofpacket),       //                .startofpacket
		.rf_source_endofpacket   (nw_from_fpga_s1_agent_rf_source_endofpacket),         //                .endofpacket
		.rf_source_data          (nw_from_fpga_s1_agent_rf_source_data),                //                .data
		.rdata_fifo_sink_ready   (avalon_st_adapter_014_out_0_ready),                   // rdata_fifo_sink.ready
		.rdata_fifo_sink_valid   (avalon_st_adapter_014_out_0_valid),                   //                .valid
		.rdata_fifo_sink_data    (avalon_st_adapter_014_out_0_data),                    //                .data
		.rdata_fifo_sink_error   (avalon_st_adapter_014_out_0_error),                   //                .error
		.rdata_fifo_src_ready    (nw_from_fpga_s1_agent_rdata_fifo_src_ready),          //  rdata_fifo_src.ready
		.rdata_fifo_src_valid    (nw_from_fpga_s1_agent_rdata_fifo_src_valid),          //                .valid
		.rdata_fifo_src_data     (nw_from_fpga_s1_agent_rdata_fifo_src_data),           //                .data
		.m0_response             (2'b00),                                               //     (terminated)
		.m0_writeresponsevalid   (1'b0)                                                 //     (terminated)
	);

	altera_avalon_sc_fifo #(
		.SYMBOLS_PER_BEAT    (1),
		.BITS_PER_SYMBOL     (121),
		.FIFO_DEPTH          (2),
		.CHANNEL_WIDTH       (0),
		.ERROR_WIDTH         (0),
		.USE_PACKETS         (1),
		.USE_FILL_LEVEL      (0),
		.EMPTY_LATENCY       (1),
		.USE_MEMORY_BLOCKS   (0),
		.USE_STORE_FORWARD   (0),
		.USE_ALMOST_FULL_IF  (0),
		.USE_ALMOST_EMPTY_IF (0)
	) nw_from_fpga_s1_agent_rsp_fifo (
		.clk               (System_PLL_sys_clk_clk),                           //       clk.clk
		.reset             (n0_from_hps_reset_reset_bridge_in_reset_reset),    // clk_reset.reset
		.in_data           (nw_from_fpga_s1_agent_rf_source_data),             //        in.data
		.in_valid          (nw_from_fpga_s1_agent_rf_source_valid),            //          .valid
		.in_ready          (nw_from_fpga_s1_agent_rf_source_ready),            //          .ready
		.in_startofpacket  (nw_from_fpga_s1_agent_rf_source_startofpacket),    //          .startofpacket
		.in_endofpacket    (nw_from_fpga_s1_agent_rf_source_endofpacket),      //          .endofpacket
		.out_data          (nw_from_fpga_s1_agent_rsp_fifo_out_data),          //       out.data
		.out_valid         (nw_from_fpga_s1_agent_rsp_fifo_out_valid),         //          .valid
		.out_ready         (nw_from_fpga_s1_agent_rsp_fifo_out_ready),         //          .ready
		.out_startofpacket (nw_from_fpga_s1_agent_rsp_fifo_out_startofpacket), //          .startofpacket
		.out_endofpacket   (nw_from_fpga_s1_agent_rsp_fifo_out_endofpacket),   //          .endofpacket
		.csr_address       (2'b00),                                            // (terminated)
		.csr_read          (1'b0),                                             // (terminated)
		.csr_write         (1'b0),                                             // (terminated)
		.csr_readdata      (),                                                 // (terminated)
		.csr_writedata     (32'b00000000000000000000000000000000),             // (terminated)
		.almost_full_data  (),                                                 // (terminated)
		.almost_empty_data (),                                                 // (terminated)
		.in_empty          (1'b0),                                             // (terminated)
		.out_empty         (),                                                 // (terminated)
		.in_error          (1'b0),                                             // (terminated)
		.out_error         (),                                                 // (terminated)
		.in_channel        (1'b0),                                             // (terminated)
		.out_channel       ()                                                  // (terminated)
	);

	altera_avalon_sc_fifo #(
		.SYMBOLS_PER_BEAT    (1),
		.BITS_PER_SYMBOL     (34),
		.FIFO_DEPTH          (2),
		.CHANNEL_WIDTH       (0),
		.ERROR_WIDTH         (0),
		.USE_PACKETS         (0),
		.USE_FILL_LEVEL      (0),
		.EMPTY_LATENCY       (0),
		.USE_MEMORY_BLOCKS   (0),
		.USE_STORE_FORWARD   (0),
		.USE_ALMOST_FULL_IF  (0),
		.USE_ALMOST_EMPTY_IF (0)
	) nw_from_fpga_s1_agent_rdata_fifo (
		.clk               (System_PLL_sys_clk_clk),                        //       clk.clk
		.reset             (n0_from_hps_reset_reset_bridge_in_reset_reset), // clk_reset.reset
		.in_data           (nw_from_fpga_s1_agent_rdata_fifo_src_data),     //        in.data
		.in_valid          (nw_from_fpga_s1_agent_rdata_fifo_src_valid),    //          .valid
		.in_ready          (nw_from_fpga_s1_agent_rdata_fifo_src_ready),    //          .ready
		.out_data          (nw_from_fpga_s1_agent_rdata_fifo_out_data),     //       out.data
		.out_valid         (nw_from_fpga_s1_agent_rdata_fifo_out_valid),    //          .valid
		.out_ready         (nw_from_fpga_s1_agent_rdata_fifo_out_ready),    //          .ready
		.csr_address       (2'b00),                                         // (terminated)
		.csr_read          (1'b0),                                          // (terminated)
		.csr_write         (1'b0),                                          // (terminated)
		.csr_readdata      (),                                              // (terminated)
		.csr_writedata     (32'b00000000000000000000000000000000),          // (terminated)
		.almost_full_data  (),                                              // (terminated)
		.almost_empty_data (),                                              // (terminated)
		.in_startofpacket  (1'b0),                                          // (terminated)
		.in_endofpacket    (1'b0),                                          // (terminated)
		.out_startofpacket (),                                              // (terminated)
		.out_endofpacket   (),                                              // (terminated)
		.in_empty          (1'b0),                                          // (terminated)
		.out_empty         (),                                              // (terminated)
		.in_error          (1'b0),                                          // (terminated)
		.out_error         (),                                              // (terminated)
		.in_channel        (1'b0),                                          // (terminated)
		.out_channel       ()                                               // (terminated)
	);

	altera_merlin_slave_agent #(
		.PKT_ORI_BURST_SIZE_H      (119),
		.PKT_ORI_BURST_SIZE_L      (117),
		.PKT_RESPONSE_STATUS_H     (116),
		.PKT_RESPONSE_STATUS_L     (115),
		.PKT_BURST_SIZE_H          (79),
		.PKT_BURST_SIZE_L          (77),
		.PKT_TRANS_LOCK            (61),
		.PKT_BEGIN_BURST           (84),
		.PKT_PROTECTION_H          (110),
		.PKT_PROTECTION_L          (108),
		.PKT_BURSTWRAP_H           (76),
		.PKT_BURSTWRAP_L           (70),
		.PKT_BYTE_CNT_H            (69),
		.PKT_BYTE_CNT_L            (63),
		.PKT_ADDR_H                (56),
		.PKT_ADDR_L                (36),
		.PKT_TRANS_COMPRESSED_READ (57),
		.PKT_TRANS_POSTED          (58),
		.PKT_TRANS_WRITE           (59),
		.PKT_TRANS_READ            (60),
		.PKT_DATA_H                (31),
		.PKT_DATA_L                (0),
		.PKT_BYTEEN_H              (35),
		.PKT_BYTEEN_L              (32),
		.PKT_SRC_ID_H              (90),
		.PKT_SRC_ID_L              (86),
		.PKT_DEST_ID_H             (95),
		.PKT_DEST_ID_L             (91),
		.PKT_SYMBOL_W              (8),
		.ST_CHANNEL_W              (27),
		.ST_DATA_W                 (120),
		.AVS_BURSTCOUNT_W          (3),
		.SUPPRESS_0_BYTEEN_CMD     (1),
		.PREVENT_FIFO_OVERFLOW     (1),
		.USE_READRESPONSE          (0),
		.USE_WRITERESPONSE         (0),
		.ECC_ENABLE                (0)
	) ne_from_fpga_s1_agent (
		.clk                     (System_PLL_sys_clk_clk),                              //             clk.clk
		.reset                   (n0_from_hps_reset_reset_bridge_in_reset_reset),       //       clk_reset.reset
		.m0_address              (ne_from_fpga_s1_agent_m0_address),                    //              m0.address
		.m0_burstcount           (ne_from_fpga_s1_agent_m0_burstcount),                 //                .burstcount
		.m0_byteenable           (ne_from_fpga_s1_agent_m0_byteenable),                 //                .byteenable
		.m0_debugaccess          (ne_from_fpga_s1_agent_m0_debugaccess),                //                .debugaccess
		.m0_lock                 (ne_from_fpga_s1_agent_m0_lock),                       //                .lock
		.m0_readdata             (ne_from_fpga_s1_agent_m0_readdata),                   //                .readdata
		.m0_readdatavalid        (ne_from_fpga_s1_agent_m0_readdatavalid),              //                .readdatavalid
		.m0_read                 (ne_from_fpga_s1_agent_m0_read),                       //                .read
		.m0_waitrequest          (ne_from_fpga_s1_agent_m0_waitrequest),                //                .waitrequest
		.m0_writedata            (ne_from_fpga_s1_agent_m0_writedata),                  //                .writedata
		.m0_write                (ne_from_fpga_s1_agent_m0_write),                      //                .write
		.rp_endofpacket          (ne_from_fpga_s1_agent_rp_endofpacket),                //              rp.endofpacket
		.rp_ready                (ne_from_fpga_s1_agent_rp_ready),                      //                .ready
		.rp_valid                (ne_from_fpga_s1_agent_rp_valid),                      //                .valid
		.rp_data                 (ne_from_fpga_s1_agent_rp_data),                       //                .data
		.rp_startofpacket        (ne_from_fpga_s1_agent_rp_startofpacket),              //                .startofpacket
		.cp_ready                (ne_from_fpga_s1_burst_adapter_source0_ready),         //              cp.ready
		.cp_valid                (ne_from_fpga_s1_burst_adapter_source0_valid),         //                .valid
		.cp_data                 (ne_from_fpga_s1_burst_adapter_source0_data),          //                .data
		.cp_startofpacket        (ne_from_fpga_s1_burst_adapter_source0_startofpacket), //                .startofpacket
		.cp_endofpacket          (ne_from_fpga_s1_burst_adapter_source0_endofpacket),   //                .endofpacket
		.cp_channel              (ne_from_fpga_s1_burst_adapter_source0_channel),       //                .channel
		.rf_sink_ready           (ne_from_fpga_s1_agent_rsp_fifo_out_ready),            //         rf_sink.ready
		.rf_sink_valid           (ne_from_fpga_s1_agent_rsp_fifo_out_valid),            //                .valid
		.rf_sink_startofpacket   (ne_from_fpga_s1_agent_rsp_fifo_out_startofpacket),    //                .startofpacket
		.rf_sink_endofpacket     (ne_from_fpga_s1_agent_rsp_fifo_out_endofpacket),      //                .endofpacket
		.rf_sink_data            (ne_from_fpga_s1_agent_rsp_fifo_out_data),             //                .data
		.rf_source_ready         (ne_from_fpga_s1_agent_rf_source_ready),               //       rf_source.ready
		.rf_source_valid         (ne_from_fpga_s1_agent_rf_source_valid),               //                .valid
		.rf_source_startofpacket (ne_from_fpga_s1_agent_rf_source_startofpacket),       //                .startofpacket
		.rf_source_endofpacket   (ne_from_fpga_s1_agent_rf_source_endofpacket),         //                .endofpacket
		.rf_source_data          (ne_from_fpga_s1_agent_rf_source_data),                //                .data
		.rdata_fifo_sink_ready   (avalon_st_adapter_015_out_0_ready),                   // rdata_fifo_sink.ready
		.rdata_fifo_sink_valid   (avalon_st_adapter_015_out_0_valid),                   //                .valid
		.rdata_fifo_sink_data    (avalon_st_adapter_015_out_0_data),                    //                .data
		.rdata_fifo_sink_error   (avalon_st_adapter_015_out_0_error),                   //                .error
		.rdata_fifo_src_ready    (ne_from_fpga_s1_agent_rdata_fifo_src_ready),          //  rdata_fifo_src.ready
		.rdata_fifo_src_valid    (ne_from_fpga_s1_agent_rdata_fifo_src_valid),          //                .valid
		.rdata_fifo_src_data     (ne_from_fpga_s1_agent_rdata_fifo_src_data),           //                .data
		.m0_response             (2'b00),                                               //     (terminated)
		.m0_writeresponsevalid   (1'b0)                                                 //     (terminated)
	);

	altera_avalon_sc_fifo #(
		.SYMBOLS_PER_BEAT    (1),
		.BITS_PER_SYMBOL     (121),
		.FIFO_DEPTH          (2),
		.CHANNEL_WIDTH       (0),
		.ERROR_WIDTH         (0),
		.USE_PACKETS         (1),
		.USE_FILL_LEVEL      (0),
		.EMPTY_LATENCY       (1),
		.USE_MEMORY_BLOCKS   (0),
		.USE_STORE_FORWARD   (0),
		.USE_ALMOST_FULL_IF  (0),
		.USE_ALMOST_EMPTY_IF (0)
	) ne_from_fpga_s1_agent_rsp_fifo (
		.clk               (System_PLL_sys_clk_clk),                           //       clk.clk
		.reset             (n0_from_hps_reset_reset_bridge_in_reset_reset),    // clk_reset.reset
		.in_data           (ne_from_fpga_s1_agent_rf_source_data),             //        in.data
		.in_valid          (ne_from_fpga_s1_agent_rf_source_valid),            //          .valid
		.in_ready          (ne_from_fpga_s1_agent_rf_source_ready),            //          .ready
		.in_startofpacket  (ne_from_fpga_s1_agent_rf_source_startofpacket),    //          .startofpacket
		.in_endofpacket    (ne_from_fpga_s1_agent_rf_source_endofpacket),      //          .endofpacket
		.out_data          (ne_from_fpga_s1_agent_rsp_fifo_out_data),          //       out.data
		.out_valid         (ne_from_fpga_s1_agent_rsp_fifo_out_valid),         //          .valid
		.out_ready         (ne_from_fpga_s1_agent_rsp_fifo_out_ready),         //          .ready
		.out_startofpacket (ne_from_fpga_s1_agent_rsp_fifo_out_startofpacket), //          .startofpacket
		.out_endofpacket   (ne_from_fpga_s1_agent_rsp_fifo_out_endofpacket),   //          .endofpacket
		.csr_address       (2'b00),                                            // (terminated)
		.csr_read          (1'b0),                                             // (terminated)
		.csr_write         (1'b0),                                             // (terminated)
		.csr_readdata      (),                                                 // (terminated)
		.csr_writedata     (32'b00000000000000000000000000000000),             // (terminated)
		.almost_full_data  (),                                                 // (terminated)
		.almost_empty_data (),                                                 // (terminated)
		.in_empty          (1'b0),                                             // (terminated)
		.out_empty         (),                                                 // (terminated)
		.in_error          (1'b0),                                             // (terminated)
		.out_error         (),                                                 // (terminated)
		.in_channel        (1'b0),                                             // (terminated)
		.out_channel       ()                                                  // (terminated)
	);

	altera_avalon_sc_fifo #(
		.SYMBOLS_PER_BEAT    (1),
		.BITS_PER_SYMBOL     (34),
		.FIFO_DEPTH          (2),
		.CHANNEL_WIDTH       (0),
		.ERROR_WIDTH         (0),
		.USE_PACKETS         (0),
		.USE_FILL_LEVEL      (0),
		.EMPTY_LATENCY       (0),
		.USE_MEMORY_BLOCKS   (0),
		.USE_STORE_FORWARD   (0),
		.USE_ALMOST_FULL_IF  (0),
		.USE_ALMOST_EMPTY_IF (0)
	) ne_from_fpga_s1_agent_rdata_fifo (
		.clk               (System_PLL_sys_clk_clk),                        //       clk.clk
		.reset             (n0_from_hps_reset_reset_bridge_in_reset_reset), // clk_reset.reset
		.in_data           (ne_from_fpga_s1_agent_rdata_fifo_src_data),     //        in.data
		.in_valid          (ne_from_fpga_s1_agent_rdata_fifo_src_valid),    //          .valid
		.in_ready          (ne_from_fpga_s1_agent_rdata_fifo_src_ready),    //          .ready
		.out_data          (ne_from_fpga_s1_agent_rdata_fifo_out_data),     //       out.data
		.out_valid         (ne_from_fpga_s1_agent_rdata_fifo_out_valid),    //          .valid
		.out_ready         (ne_from_fpga_s1_agent_rdata_fifo_out_ready),    //          .ready
		.csr_address       (2'b00),                                         // (terminated)
		.csr_read          (1'b0),                                          // (terminated)
		.csr_write         (1'b0),                                          // (terminated)
		.csr_readdata      (),                                              // (terminated)
		.csr_writedata     (32'b00000000000000000000000000000000),          // (terminated)
		.almost_full_data  (),                                              // (terminated)
		.almost_empty_data (),                                              // (terminated)
		.in_startofpacket  (1'b0),                                          // (terminated)
		.in_endofpacket    (1'b0),                                          // (terminated)
		.out_startofpacket (),                                              // (terminated)
		.out_endofpacket   (),                                              // (terminated)
		.in_empty          (1'b0),                                          // (terminated)
		.out_empty         (),                                              // (terminated)
		.in_error          (1'b0),                                          // (terminated)
		.out_error         (),                                              // (terminated)
		.in_channel        (1'b0),                                          // (terminated)
		.out_channel       ()                                               // (terminated)
	);

	altera_merlin_slave_agent #(
		.PKT_ORI_BURST_SIZE_H      (119),
		.PKT_ORI_BURST_SIZE_L      (117),
		.PKT_RESPONSE_STATUS_H     (116),
		.PKT_RESPONSE_STATUS_L     (115),
		.PKT_BURST_SIZE_H          (79),
		.PKT_BURST_SIZE_L          (77),
		.PKT_TRANS_LOCK            (61),
		.PKT_BEGIN_BURST           (84),
		.PKT_PROTECTION_H          (110),
		.PKT_PROTECTION_L          (108),
		.PKT_BURSTWRAP_H           (76),
		.PKT_BURSTWRAP_L           (70),
		.PKT_BYTE_CNT_H            (69),
		.PKT_BYTE_CNT_L            (63),
		.PKT_ADDR_H                (56),
		.PKT_ADDR_L                (36),
		.PKT_TRANS_COMPRESSED_READ (57),
		.PKT_TRANS_POSTED          (58),
		.PKT_TRANS_WRITE           (59),
		.PKT_TRANS_READ            (60),
		.PKT_DATA_H                (31),
		.PKT_DATA_L                (0),
		.PKT_BYTEEN_H              (35),
		.PKT_BYTEEN_L              (32),
		.PKT_SRC_ID_H              (90),
		.PKT_SRC_ID_L              (86),
		.PKT_DEST_ID_H             (95),
		.PKT_DEST_ID_L             (91),
		.PKT_SYMBOL_W              (8),
		.ST_CHANNEL_W              (27),
		.ST_DATA_W                 (120),
		.AVS_BURSTCOUNT_W          (3),
		.SUPPRESS_0_BYTEEN_CMD     (1),
		.PREVENT_FIFO_OVERFLOW     (1),
		.USE_READRESPONSE          (0),
		.USE_WRITERESPONSE         (0),
		.ECC_ENABLE                (0)
	) nnw_from_fpga_s1_agent (
		.clk                     (System_PLL_sys_clk_clk),                               //             clk.clk
		.reset                   (n0_from_hps_reset_reset_bridge_in_reset_reset),        //       clk_reset.reset
		.m0_address              (nnw_from_fpga_s1_agent_m0_address),                    //              m0.address
		.m0_burstcount           (nnw_from_fpga_s1_agent_m0_burstcount),                 //                .burstcount
		.m0_byteenable           (nnw_from_fpga_s1_agent_m0_byteenable),                 //                .byteenable
		.m0_debugaccess          (nnw_from_fpga_s1_agent_m0_debugaccess),                //                .debugaccess
		.m0_lock                 (nnw_from_fpga_s1_agent_m0_lock),                       //                .lock
		.m0_readdata             (nnw_from_fpga_s1_agent_m0_readdata),                   //                .readdata
		.m0_readdatavalid        (nnw_from_fpga_s1_agent_m0_readdatavalid),              //                .readdatavalid
		.m0_read                 (nnw_from_fpga_s1_agent_m0_read),                       //                .read
		.m0_waitrequest          (nnw_from_fpga_s1_agent_m0_waitrequest),                //                .waitrequest
		.m0_writedata            (nnw_from_fpga_s1_agent_m0_writedata),                  //                .writedata
		.m0_write                (nnw_from_fpga_s1_agent_m0_write),                      //                .write
		.rp_endofpacket          (nnw_from_fpga_s1_agent_rp_endofpacket),                //              rp.endofpacket
		.rp_ready                (nnw_from_fpga_s1_agent_rp_ready),                      //                .ready
		.rp_valid                (nnw_from_fpga_s1_agent_rp_valid),                      //                .valid
		.rp_data                 (nnw_from_fpga_s1_agent_rp_data),                       //                .data
		.rp_startofpacket        (nnw_from_fpga_s1_agent_rp_startofpacket),              //                .startofpacket
		.cp_ready                (nnw_from_fpga_s1_burst_adapter_source0_ready),         //              cp.ready
		.cp_valid                (nnw_from_fpga_s1_burst_adapter_source0_valid),         //                .valid
		.cp_data                 (nnw_from_fpga_s1_burst_adapter_source0_data),          //                .data
		.cp_startofpacket        (nnw_from_fpga_s1_burst_adapter_source0_startofpacket), //                .startofpacket
		.cp_endofpacket          (nnw_from_fpga_s1_burst_adapter_source0_endofpacket),   //                .endofpacket
		.cp_channel              (nnw_from_fpga_s1_burst_adapter_source0_channel),       //                .channel
		.rf_sink_ready           (nnw_from_fpga_s1_agent_rsp_fifo_out_ready),            //         rf_sink.ready
		.rf_sink_valid           (nnw_from_fpga_s1_agent_rsp_fifo_out_valid),            //                .valid
		.rf_sink_startofpacket   (nnw_from_fpga_s1_agent_rsp_fifo_out_startofpacket),    //                .startofpacket
		.rf_sink_endofpacket     (nnw_from_fpga_s1_agent_rsp_fifo_out_endofpacket),      //                .endofpacket
		.rf_sink_data            (nnw_from_fpga_s1_agent_rsp_fifo_out_data),             //                .data
		.rf_source_ready         (nnw_from_fpga_s1_agent_rf_source_ready),               //       rf_source.ready
		.rf_source_valid         (nnw_from_fpga_s1_agent_rf_source_valid),               //                .valid
		.rf_source_startofpacket (nnw_from_fpga_s1_agent_rf_source_startofpacket),       //                .startofpacket
		.rf_source_endofpacket   (nnw_from_fpga_s1_agent_rf_source_endofpacket),         //                .endofpacket
		.rf_source_data          (nnw_from_fpga_s1_agent_rf_source_data),                //                .data
		.rdata_fifo_sink_ready   (avalon_st_adapter_016_out_0_ready),                    // rdata_fifo_sink.ready
		.rdata_fifo_sink_valid   (avalon_st_adapter_016_out_0_valid),                    //                .valid
		.rdata_fifo_sink_data    (avalon_st_adapter_016_out_0_data),                     //                .data
		.rdata_fifo_sink_error   (avalon_st_adapter_016_out_0_error),                    //                .error
		.rdata_fifo_src_ready    (nnw_from_fpga_s1_agent_rdata_fifo_src_ready),          //  rdata_fifo_src.ready
		.rdata_fifo_src_valid    (nnw_from_fpga_s1_agent_rdata_fifo_src_valid),          //                .valid
		.rdata_fifo_src_data     (nnw_from_fpga_s1_agent_rdata_fifo_src_data),           //                .data
		.m0_response             (2'b00),                                                //     (terminated)
		.m0_writeresponsevalid   (1'b0)                                                  //     (terminated)
	);

	altera_avalon_sc_fifo #(
		.SYMBOLS_PER_BEAT    (1),
		.BITS_PER_SYMBOL     (121),
		.FIFO_DEPTH          (2),
		.CHANNEL_WIDTH       (0),
		.ERROR_WIDTH         (0),
		.USE_PACKETS         (1),
		.USE_FILL_LEVEL      (0),
		.EMPTY_LATENCY       (1),
		.USE_MEMORY_BLOCKS   (0),
		.USE_STORE_FORWARD   (0),
		.USE_ALMOST_FULL_IF  (0),
		.USE_ALMOST_EMPTY_IF (0)
	) nnw_from_fpga_s1_agent_rsp_fifo (
		.clk               (System_PLL_sys_clk_clk),                            //       clk.clk
		.reset             (n0_from_hps_reset_reset_bridge_in_reset_reset),     // clk_reset.reset
		.in_data           (nnw_from_fpga_s1_agent_rf_source_data),             //        in.data
		.in_valid          (nnw_from_fpga_s1_agent_rf_source_valid),            //          .valid
		.in_ready          (nnw_from_fpga_s1_agent_rf_source_ready),            //          .ready
		.in_startofpacket  (nnw_from_fpga_s1_agent_rf_source_startofpacket),    //          .startofpacket
		.in_endofpacket    (nnw_from_fpga_s1_agent_rf_source_endofpacket),      //          .endofpacket
		.out_data          (nnw_from_fpga_s1_agent_rsp_fifo_out_data),          //       out.data
		.out_valid         (nnw_from_fpga_s1_agent_rsp_fifo_out_valid),         //          .valid
		.out_ready         (nnw_from_fpga_s1_agent_rsp_fifo_out_ready),         //          .ready
		.out_startofpacket (nnw_from_fpga_s1_agent_rsp_fifo_out_startofpacket), //          .startofpacket
		.out_endofpacket   (nnw_from_fpga_s1_agent_rsp_fifo_out_endofpacket),   //          .endofpacket
		.csr_address       (2'b00),                                             // (terminated)
		.csr_read          (1'b0),                                              // (terminated)
		.csr_write         (1'b0),                                              // (terminated)
		.csr_readdata      (),                                                  // (terminated)
		.csr_writedata     (32'b00000000000000000000000000000000),              // (terminated)
		.almost_full_data  (),                                                  // (terminated)
		.almost_empty_data (),                                                  // (terminated)
		.in_empty          (1'b0),                                              // (terminated)
		.out_empty         (),                                                  // (terminated)
		.in_error          (1'b0),                                              // (terminated)
		.out_error         (),                                                  // (terminated)
		.in_channel        (1'b0),                                              // (terminated)
		.out_channel       ()                                                   // (terminated)
	);

	altera_avalon_sc_fifo #(
		.SYMBOLS_PER_BEAT    (1),
		.BITS_PER_SYMBOL     (34),
		.FIFO_DEPTH          (2),
		.CHANNEL_WIDTH       (0),
		.ERROR_WIDTH         (0),
		.USE_PACKETS         (0),
		.USE_FILL_LEVEL      (0),
		.EMPTY_LATENCY       (0),
		.USE_MEMORY_BLOCKS   (0),
		.USE_STORE_FORWARD   (0),
		.USE_ALMOST_FULL_IF  (0),
		.USE_ALMOST_EMPTY_IF (0)
	) nnw_from_fpga_s1_agent_rdata_fifo (
		.clk               (System_PLL_sys_clk_clk),                        //       clk.clk
		.reset             (n0_from_hps_reset_reset_bridge_in_reset_reset), // clk_reset.reset
		.in_data           (nnw_from_fpga_s1_agent_rdata_fifo_src_data),    //        in.data
		.in_valid          (nnw_from_fpga_s1_agent_rdata_fifo_src_valid),   //          .valid
		.in_ready          (nnw_from_fpga_s1_agent_rdata_fifo_src_ready),   //          .ready
		.out_data          (nnw_from_fpga_s1_agent_rdata_fifo_out_data),    //       out.data
		.out_valid         (nnw_from_fpga_s1_agent_rdata_fifo_out_valid),   //          .valid
		.out_ready         (nnw_from_fpga_s1_agent_rdata_fifo_out_ready),   //          .ready
		.csr_address       (2'b00),                                         // (terminated)
		.csr_read          (1'b0),                                          // (terminated)
		.csr_write         (1'b0),                                          // (terminated)
		.csr_readdata      (),                                              // (terminated)
		.csr_writedata     (32'b00000000000000000000000000000000),          // (terminated)
		.almost_full_data  (),                                              // (terminated)
		.almost_empty_data (),                                              // (terminated)
		.in_startofpacket  (1'b0),                                          // (terminated)
		.in_endofpacket    (1'b0),                                          // (terminated)
		.out_startofpacket (),                                              // (terminated)
		.out_endofpacket   (),                                              // (terminated)
		.in_empty          (1'b0),                                          // (terminated)
		.out_empty         (),                                              // (terminated)
		.in_error          (1'b0),                                          // (terminated)
		.out_error         (),                                              // (terminated)
		.in_channel        (1'b0),                                          // (terminated)
		.out_channel       ()                                               // (terminated)
	);

	altera_merlin_slave_agent #(
		.PKT_ORI_BURST_SIZE_H      (119),
		.PKT_ORI_BURST_SIZE_L      (117),
		.PKT_RESPONSE_STATUS_H     (116),
		.PKT_RESPONSE_STATUS_L     (115),
		.PKT_BURST_SIZE_H          (79),
		.PKT_BURST_SIZE_L          (77),
		.PKT_TRANS_LOCK            (61),
		.PKT_BEGIN_BURST           (84),
		.PKT_PROTECTION_H          (110),
		.PKT_PROTECTION_L          (108),
		.PKT_BURSTWRAP_H           (76),
		.PKT_BURSTWRAP_L           (70),
		.PKT_BYTE_CNT_H            (69),
		.PKT_BYTE_CNT_L            (63),
		.PKT_ADDR_H                (56),
		.PKT_ADDR_L                (36),
		.PKT_TRANS_COMPRESSED_READ (57),
		.PKT_TRANS_POSTED          (58),
		.PKT_TRANS_WRITE           (59),
		.PKT_TRANS_READ            (60),
		.PKT_DATA_H                (31),
		.PKT_DATA_L                (0),
		.PKT_BYTEEN_H              (35),
		.PKT_BYTEEN_L              (32),
		.PKT_SRC_ID_H              (90),
		.PKT_SRC_ID_L              (86),
		.PKT_DEST_ID_H             (95),
		.PKT_DEST_ID_L             (91),
		.PKT_SYMBOL_W              (8),
		.ST_CHANNEL_W              (27),
		.ST_DATA_W                 (120),
		.AVS_BURSTCOUNT_W          (3),
		.SUPPRESS_0_BYTEEN_CMD     (1),
		.PREVENT_FIFO_OVERFLOW     (1),
		.USE_READRESPONSE          (0),
		.USE_WRITERESPONSE         (0),
		.ECC_ENABLE                (0)
	) nne_from_fpga_s1_agent (
		.clk                     (System_PLL_sys_clk_clk),                               //             clk.clk
		.reset                   (n0_from_hps_reset_reset_bridge_in_reset_reset),        //       clk_reset.reset
		.m0_address              (nne_from_fpga_s1_agent_m0_address),                    //              m0.address
		.m0_burstcount           (nne_from_fpga_s1_agent_m0_burstcount),                 //                .burstcount
		.m0_byteenable           (nne_from_fpga_s1_agent_m0_byteenable),                 //                .byteenable
		.m0_debugaccess          (nne_from_fpga_s1_agent_m0_debugaccess),                //                .debugaccess
		.m0_lock                 (nne_from_fpga_s1_agent_m0_lock),                       //                .lock
		.m0_readdata             (nne_from_fpga_s1_agent_m0_readdata),                   //                .readdata
		.m0_readdatavalid        (nne_from_fpga_s1_agent_m0_readdatavalid),              //                .readdatavalid
		.m0_read                 (nne_from_fpga_s1_agent_m0_read),                       //                .read
		.m0_waitrequest          (nne_from_fpga_s1_agent_m0_waitrequest),                //                .waitrequest
		.m0_writedata            (nne_from_fpga_s1_agent_m0_writedata),                  //                .writedata
		.m0_write                (nne_from_fpga_s1_agent_m0_write),                      //                .write
		.rp_endofpacket          (nne_from_fpga_s1_agent_rp_endofpacket),                //              rp.endofpacket
		.rp_ready                (nne_from_fpga_s1_agent_rp_ready),                      //                .ready
		.rp_valid                (nne_from_fpga_s1_agent_rp_valid),                      //                .valid
		.rp_data                 (nne_from_fpga_s1_agent_rp_data),                       //                .data
		.rp_startofpacket        (nne_from_fpga_s1_agent_rp_startofpacket),              //                .startofpacket
		.cp_ready                (nne_from_fpga_s1_burst_adapter_source0_ready),         //              cp.ready
		.cp_valid                (nne_from_fpga_s1_burst_adapter_source0_valid),         //                .valid
		.cp_data                 (nne_from_fpga_s1_burst_adapter_source0_data),          //                .data
		.cp_startofpacket        (nne_from_fpga_s1_burst_adapter_source0_startofpacket), //                .startofpacket
		.cp_endofpacket          (nne_from_fpga_s1_burst_adapter_source0_endofpacket),   //                .endofpacket
		.cp_channel              (nne_from_fpga_s1_burst_adapter_source0_channel),       //                .channel
		.rf_sink_ready           (nne_from_fpga_s1_agent_rsp_fifo_out_ready),            //         rf_sink.ready
		.rf_sink_valid           (nne_from_fpga_s1_agent_rsp_fifo_out_valid),            //                .valid
		.rf_sink_startofpacket   (nne_from_fpga_s1_agent_rsp_fifo_out_startofpacket),    //                .startofpacket
		.rf_sink_endofpacket     (nne_from_fpga_s1_agent_rsp_fifo_out_endofpacket),      //                .endofpacket
		.rf_sink_data            (nne_from_fpga_s1_agent_rsp_fifo_out_data),             //                .data
		.rf_source_ready         (nne_from_fpga_s1_agent_rf_source_ready),               //       rf_source.ready
		.rf_source_valid         (nne_from_fpga_s1_agent_rf_source_valid),               //                .valid
		.rf_source_startofpacket (nne_from_fpga_s1_agent_rf_source_startofpacket),       //                .startofpacket
		.rf_source_endofpacket   (nne_from_fpga_s1_agent_rf_source_endofpacket),         //                .endofpacket
		.rf_source_data          (nne_from_fpga_s1_agent_rf_source_data),                //                .data
		.rdata_fifo_sink_ready   (avalon_st_adapter_017_out_0_ready),                    // rdata_fifo_sink.ready
		.rdata_fifo_sink_valid   (avalon_st_adapter_017_out_0_valid),                    //                .valid
		.rdata_fifo_sink_data    (avalon_st_adapter_017_out_0_data),                     //                .data
		.rdata_fifo_sink_error   (avalon_st_adapter_017_out_0_error),                    //                .error
		.rdata_fifo_src_ready    (nne_from_fpga_s1_agent_rdata_fifo_src_ready),          //  rdata_fifo_src.ready
		.rdata_fifo_src_valid    (nne_from_fpga_s1_agent_rdata_fifo_src_valid),          //                .valid
		.rdata_fifo_src_data     (nne_from_fpga_s1_agent_rdata_fifo_src_data),           //                .data
		.m0_response             (2'b00),                                                //     (terminated)
		.m0_writeresponsevalid   (1'b0)                                                  //     (terminated)
	);

	altera_avalon_sc_fifo #(
		.SYMBOLS_PER_BEAT    (1),
		.BITS_PER_SYMBOL     (121),
		.FIFO_DEPTH          (2),
		.CHANNEL_WIDTH       (0),
		.ERROR_WIDTH         (0),
		.USE_PACKETS         (1),
		.USE_FILL_LEVEL      (0),
		.EMPTY_LATENCY       (1),
		.USE_MEMORY_BLOCKS   (0),
		.USE_STORE_FORWARD   (0),
		.USE_ALMOST_FULL_IF  (0),
		.USE_ALMOST_EMPTY_IF (0)
	) nne_from_fpga_s1_agent_rsp_fifo (
		.clk               (System_PLL_sys_clk_clk),                            //       clk.clk
		.reset             (n0_from_hps_reset_reset_bridge_in_reset_reset),     // clk_reset.reset
		.in_data           (nne_from_fpga_s1_agent_rf_source_data),             //        in.data
		.in_valid          (nne_from_fpga_s1_agent_rf_source_valid),            //          .valid
		.in_ready          (nne_from_fpga_s1_agent_rf_source_ready),            //          .ready
		.in_startofpacket  (nne_from_fpga_s1_agent_rf_source_startofpacket),    //          .startofpacket
		.in_endofpacket    (nne_from_fpga_s1_agent_rf_source_endofpacket),      //          .endofpacket
		.out_data          (nne_from_fpga_s1_agent_rsp_fifo_out_data),          //       out.data
		.out_valid         (nne_from_fpga_s1_agent_rsp_fifo_out_valid),         //          .valid
		.out_ready         (nne_from_fpga_s1_agent_rsp_fifo_out_ready),         //          .ready
		.out_startofpacket (nne_from_fpga_s1_agent_rsp_fifo_out_startofpacket), //          .startofpacket
		.out_endofpacket   (nne_from_fpga_s1_agent_rsp_fifo_out_endofpacket),   //          .endofpacket
		.csr_address       (2'b00),                                             // (terminated)
		.csr_read          (1'b0),                                              // (terminated)
		.csr_write         (1'b0),                                              // (terminated)
		.csr_readdata      (),                                                  // (terminated)
		.csr_writedata     (32'b00000000000000000000000000000000),              // (terminated)
		.almost_full_data  (),                                                  // (terminated)
		.almost_empty_data (),                                                  // (terminated)
		.in_empty          (1'b0),                                              // (terminated)
		.out_empty         (),                                                  // (terminated)
		.in_error          (1'b0),                                              // (terminated)
		.out_error         (),                                                  // (terminated)
		.in_channel        (1'b0),                                              // (terminated)
		.out_channel       ()                                                   // (terminated)
	);

	altera_avalon_sc_fifo #(
		.SYMBOLS_PER_BEAT    (1),
		.BITS_PER_SYMBOL     (34),
		.FIFO_DEPTH          (2),
		.CHANNEL_WIDTH       (0),
		.ERROR_WIDTH         (0),
		.USE_PACKETS         (0),
		.USE_FILL_LEVEL      (0),
		.EMPTY_LATENCY       (0),
		.USE_MEMORY_BLOCKS   (0),
		.USE_STORE_FORWARD   (0),
		.USE_ALMOST_FULL_IF  (0),
		.USE_ALMOST_EMPTY_IF (0)
	) nne_from_fpga_s1_agent_rdata_fifo (
		.clk               (System_PLL_sys_clk_clk),                        //       clk.clk
		.reset             (n0_from_hps_reset_reset_bridge_in_reset_reset), // clk_reset.reset
		.in_data           (nne_from_fpga_s1_agent_rdata_fifo_src_data),    //        in.data
		.in_valid          (nne_from_fpga_s1_agent_rdata_fifo_src_valid),   //          .valid
		.in_ready          (nne_from_fpga_s1_agent_rdata_fifo_src_ready),   //          .ready
		.out_data          (nne_from_fpga_s1_agent_rdata_fifo_out_data),    //       out.data
		.out_valid         (nne_from_fpga_s1_agent_rdata_fifo_out_valid),   //          .valid
		.out_ready         (nne_from_fpga_s1_agent_rdata_fifo_out_ready),   //          .ready
		.csr_address       (2'b00),                                         // (terminated)
		.csr_read          (1'b0),                                          // (terminated)
		.csr_write         (1'b0),                                          // (terminated)
		.csr_readdata      (),                                              // (terminated)
		.csr_writedata     (32'b00000000000000000000000000000000),          // (terminated)
		.almost_full_data  (),                                              // (terminated)
		.almost_empty_data (),                                              // (terminated)
		.in_startofpacket  (1'b0),                                          // (terminated)
		.in_endofpacket    (1'b0),                                          // (terminated)
		.out_startofpacket (),                                              // (terminated)
		.out_endofpacket   (),                                              // (terminated)
		.in_empty          (1'b0),                                          // (terminated)
		.out_empty         (),                                              // (terminated)
		.in_error          (1'b0),                                          // (terminated)
		.out_error         (),                                              // (terminated)
		.in_channel        (1'b0),                                          // (terminated)
		.out_channel       ()                                               // (terminated)
	);

	altera_merlin_slave_agent #(
		.PKT_ORI_BURST_SIZE_H      (119),
		.PKT_ORI_BURST_SIZE_L      (117),
		.PKT_RESPONSE_STATUS_H     (116),
		.PKT_RESPONSE_STATUS_L     (115),
		.PKT_BURST_SIZE_H          (79),
		.PKT_BURST_SIZE_L          (77),
		.PKT_TRANS_LOCK            (61),
		.PKT_BEGIN_BURST           (84),
		.PKT_PROTECTION_H          (110),
		.PKT_PROTECTION_L          (108),
		.PKT_BURSTWRAP_H           (76),
		.PKT_BURSTWRAP_L           (70),
		.PKT_BYTE_CNT_H            (69),
		.PKT_BYTE_CNT_L            (63),
		.PKT_ADDR_H                (56),
		.PKT_ADDR_L                (36),
		.PKT_TRANS_COMPRESSED_READ (57),
		.PKT_TRANS_POSTED          (58),
		.PKT_TRANS_WRITE           (59),
		.PKT_TRANS_READ            (60),
		.PKT_DATA_H                (31),
		.PKT_DATA_L                (0),
		.PKT_BYTEEN_H              (35),
		.PKT_BYTEEN_L              (32),
		.PKT_SRC_ID_H              (90),
		.PKT_SRC_ID_L              (86),
		.PKT_DEST_ID_H             (95),
		.PKT_DEST_ID_L             (91),
		.PKT_SYMBOL_W              (8),
		.ST_CHANNEL_W              (27),
		.ST_DATA_W                 (120),
		.AVS_BURSTCOUNT_W          (3),
		.SUPPRESS_0_BYTEEN_CMD     (1),
		.PREVENT_FIFO_OVERFLOW     (1),
		.USE_READRESPONSE          (0),
		.USE_WRITERESPONSE         (0),
		.ECC_ENABLE                (0)
	) nsw_from_fpga_s1_agent (
		.clk                     (System_PLL_sys_clk_clk),                               //             clk.clk
		.reset                   (n0_from_hps_reset_reset_bridge_in_reset_reset),        //       clk_reset.reset
		.m0_address              (nsw_from_fpga_s1_agent_m0_address),                    //              m0.address
		.m0_burstcount           (nsw_from_fpga_s1_agent_m0_burstcount),                 //                .burstcount
		.m0_byteenable           (nsw_from_fpga_s1_agent_m0_byteenable),                 //                .byteenable
		.m0_debugaccess          (nsw_from_fpga_s1_agent_m0_debugaccess),                //                .debugaccess
		.m0_lock                 (nsw_from_fpga_s1_agent_m0_lock),                       //                .lock
		.m0_readdata             (nsw_from_fpga_s1_agent_m0_readdata),                   //                .readdata
		.m0_readdatavalid        (nsw_from_fpga_s1_agent_m0_readdatavalid),              //                .readdatavalid
		.m0_read                 (nsw_from_fpga_s1_agent_m0_read),                       //                .read
		.m0_waitrequest          (nsw_from_fpga_s1_agent_m0_waitrequest),                //                .waitrequest
		.m0_writedata            (nsw_from_fpga_s1_agent_m0_writedata),                  //                .writedata
		.m0_write                (nsw_from_fpga_s1_agent_m0_write),                      //                .write
		.rp_endofpacket          (nsw_from_fpga_s1_agent_rp_endofpacket),                //              rp.endofpacket
		.rp_ready                (nsw_from_fpga_s1_agent_rp_ready),                      //                .ready
		.rp_valid                (nsw_from_fpga_s1_agent_rp_valid),                      //                .valid
		.rp_data                 (nsw_from_fpga_s1_agent_rp_data),                       //                .data
		.rp_startofpacket        (nsw_from_fpga_s1_agent_rp_startofpacket),              //                .startofpacket
		.cp_ready                (nsw_from_fpga_s1_burst_adapter_source0_ready),         //              cp.ready
		.cp_valid                (nsw_from_fpga_s1_burst_adapter_source0_valid),         //                .valid
		.cp_data                 (nsw_from_fpga_s1_burst_adapter_source0_data),          //                .data
		.cp_startofpacket        (nsw_from_fpga_s1_burst_adapter_source0_startofpacket), //                .startofpacket
		.cp_endofpacket          (nsw_from_fpga_s1_burst_adapter_source0_endofpacket),   //                .endofpacket
		.cp_channel              (nsw_from_fpga_s1_burst_adapter_source0_channel),       //                .channel
		.rf_sink_ready           (nsw_from_fpga_s1_agent_rsp_fifo_out_ready),            //         rf_sink.ready
		.rf_sink_valid           (nsw_from_fpga_s1_agent_rsp_fifo_out_valid),            //                .valid
		.rf_sink_startofpacket   (nsw_from_fpga_s1_agent_rsp_fifo_out_startofpacket),    //                .startofpacket
		.rf_sink_endofpacket     (nsw_from_fpga_s1_agent_rsp_fifo_out_endofpacket),      //                .endofpacket
		.rf_sink_data            (nsw_from_fpga_s1_agent_rsp_fifo_out_data),             //                .data
		.rf_source_ready         (nsw_from_fpga_s1_agent_rf_source_ready),               //       rf_source.ready
		.rf_source_valid         (nsw_from_fpga_s1_agent_rf_source_valid),               //                .valid
		.rf_source_startofpacket (nsw_from_fpga_s1_agent_rf_source_startofpacket),       //                .startofpacket
		.rf_source_endofpacket   (nsw_from_fpga_s1_agent_rf_source_endofpacket),         //                .endofpacket
		.rf_source_data          (nsw_from_fpga_s1_agent_rf_source_data),                //                .data
		.rdata_fifo_sink_ready   (avalon_st_adapter_018_out_0_ready),                    // rdata_fifo_sink.ready
		.rdata_fifo_sink_valid   (avalon_st_adapter_018_out_0_valid),                    //                .valid
		.rdata_fifo_sink_data    (avalon_st_adapter_018_out_0_data),                     //                .data
		.rdata_fifo_sink_error   (avalon_st_adapter_018_out_0_error),                    //                .error
		.rdata_fifo_src_ready    (nsw_from_fpga_s1_agent_rdata_fifo_src_ready),          //  rdata_fifo_src.ready
		.rdata_fifo_src_valid    (nsw_from_fpga_s1_agent_rdata_fifo_src_valid),          //                .valid
		.rdata_fifo_src_data     (nsw_from_fpga_s1_agent_rdata_fifo_src_data),           //                .data
		.m0_response             (2'b00),                                                //     (terminated)
		.m0_writeresponsevalid   (1'b0)                                                  //     (terminated)
	);

	altera_avalon_sc_fifo #(
		.SYMBOLS_PER_BEAT    (1),
		.BITS_PER_SYMBOL     (121),
		.FIFO_DEPTH          (2),
		.CHANNEL_WIDTH       (0),
		.ERROR_WIDTH         (0),
		.USE_PACKETS         (1),
		.USE_FILL_LEVEL      (0),
		.EMPTY_LATENCY       (1),
		.USE_MEMORY_BLOCKS   (0),
		.USE_STORE_FORWARD   (0),
		.USE_ALMOST_FULL_IF  (0),
		.USE_ALMOST_EMPTY_IF (0)
	) nsw_from_fpga_s1_agent_rsp_fifo (
		.clk               (System_PLL_sys_clk_clk),                            //       clk.clk
		.reset             (n0_from_hps_reset_reset_bridge_in_reset_reset),     // clk_reset.reset
		.in_data           (nsw_from_fpga_s1_agent_rf_source_data),             //        in.data
		.in_valid          (nsw_from_fpga_s1_agent_rf_source_valid),            //          .valid
		.in_ready          (nsw_from_fpga_s1_agent_rf_source_ready),            //          .ready
		.in_startofpacket  (nsw_from_fpga_s1_agent_rf_source_startofpacket),    //          .startofpacket
		.in_endofpacket    (nsw_from_fpga_s1_agent_rf_source_endofpacket),      //          .endofpacket
		.out_data          (nsw_from_fpga_s1_agent_rsp_fifo_out_data),          //       out.data
		.out_valid         (nsw_from_fpga_s1_agent_rsp_fifo_out_valid),         //          .valid
		.out_ready         (nsw_from_fpga_s1_agent_rsp_fifo_out_ready),         //          .ready
		.out_startofpacket (nsw_from_fpga_s1_agent_rsp_fifo_out_startofpacket), //          .startofpacket
		.out_endofpacket   (nsw_from_fpga_s1_agent_rsp_fifo_out_endofpacket),   //          .endofpacket
		.csr_address       (2'b00),                                             // (terminated)
		.csr_read          (1'b0),                                              // (terminated)
		.csr_write         (1'b0),                                              // (terminated)
		.csr_readdata      (),                                                  // (terminated)
		.csr_writedata     (32'b00000000000000000000000000000000),              // (terminated)
		.almost_full_data  (),                                                  // (terminated)
		.almost_empty_data (),                                                  // (terminated)
		.in_empty          (1'b0),                                              // (terminated)
		.out_empty         (),                                                  // (terminated)
		.in_error          (1'b0),                                              // (terminated)
		.out_error         (),                                                  // (terminated)
		.in_channel        (1'b0),                                              // (terminated)
		.out_channel       ()                                                   // (terminated)
	);

	altera_avalon_sc_fifo #(
		.SYMBOLS_PER_BEAT    (1),
		.BITS_PER_SYMBOL     (34),
		.FIFO_DEPTH          (2),
		.CHANNEL_WIDTH       (0),
		.ERROR_WIDTH         (0),
		.USE_PACKETS         (0),
		.USE_FILL_LEVEL      (0),
		.EMPTY_LATENCY       (0),
		.USE_MEMORY_BLOCKS   (0),
		.USE_STORE_FORWARD   (0),
		.USE_ALMOST_FULL_IF  (0),
		.USE_ALMOST_EMPTY_IF (0)
	) nsw_from_fpga_s1_agent_rdata_fifo (
		.clk               (System_PLL_sys_clk_clk),                        //       clk.clk
		.reset             (n0_from_hps_reset_reset_bridge_in_reset_reset), // clk_reset.reset
		.in_data           (nsw_from_fpga_s1_agent_rdata_fifo_src_data),    //        in.data
		.in_valid          (nsw_from_fpga_s1_agent_rdata_fifo_src_valid),   //          .valid
		.in_ready          (nsw_from_fpga_s1_agent_rdata_fifo_src_ready),   //          .ready
		.out_data          (nsw_from_fpga_s1_agent_rdata_fifo_out_data),    //       out.data
		.out_valid         (nsw_from_fpga_s1_agent_rdata_fifo_out_valid),   //          .valid
		.out_ready         (nsw_from_fpga_s1_agent_rdata_fifo_out_ready),   //          .ready
		.csr_address       (2'b00),                                         // (terminated)
		.csr_read          (1'b0),                                          // (terminated)
		.csr_write         (1'b0),                                          // (terminated)
		.csr_readdata      (),                                              // (terminated)
		.csr_writedata     (32'b00000000000000000000000000000000),          // (terminated)
		.almost_full_data  (),                                              // (terminated)
		.almost_empty_data (),                                              // (terminated)
		.in_startofpacket  (1'b0),                                          // (terminated)
		.in_endofpacket    (1'b0),                                          // (terminated)
		.out_startofpacket (),                                              // (terminated)
		.out_endofpacket   (),                                              // (terminated)
		.in_empty          (1'b0),                                          // (terminated)
		.out_empty         (),                                              // (terminated)
		.in_error          (1'b0),                                          // (terminated)
		.out_error         (),                                              // (terminated)
		.in_channel        (1'b0),                                          // (terminated)
		.out_channel       ()                                               // (terminated)
	);

	altera_merlin_slave_agent #(
		.PKT_ORI_BURST_SIZE_H      (119),
		.PKT_ORI_BURST_SIZE_L      (117),
		.PKT_RESPONSE_STATUS_H     (116),
		.PKT_RESPONSE_STATUS_L     (115),
		.PKT_BURST_SIZE_H          (79),
		.PKT_BURST_SIZE_L          (77),
		.PKT_TRANS_LOCK            (61),
		.PKT_BEGIN_BURST           (84),
		.PKT_PROTECTION_H          (110),
		.PKT_PROTECTION_L          (108),
		.PKT_BURSTWRAP_H           (76),
		.PKT_BURSTWRAP_L           (70),
		.PKT_BYTE_CNT_H            (69),
		.PKT_BYTE_CNT_L            (63),
		.PKT_ADDR_H                (56),
		.PKT_ADDR_L                (36),
		.PKT_TRANS_COMPRESSED_READ (57),
		.PKT_TRANS_POSTED          (58),
		.PKT_TRANS_WRITE           (59),
		.PKT_TRANS_READ            (60),
		.PKT_DATA_H                (31),
		.PKT_DATA_L                (0),
		.PKT_BYTEEN_H              (35),
		.PKT_BYTEEN_L              (32),
		.PKT_SRC_ID_H              (90),
		.PKT_SRC_ID_L              (86),
		.PKT_DEST_ID_H             (95),
		.PKT_DEST_ID_L             (91),
		.PKT_SYMBOL_W              (8),
		.ST_CHANNEL_W              (27),
		.ST_DATA_W                 (120),
		.AVS_BURSTCOUNT_W          (3),
		.SUPPRESS_0_BYTEEN_CMD     (1),
		.PREVENT_FIFO_OVERFLOW     (1),
		.USE_READRESPONSE          (0),
		.USE_WRITERESPONSE         (0),
		.ECC_ENABLE                (0)
	) nse_from_fpga_s1_agent (
		.clk                     (System_PLL_sys_clk_clk),                               //             clk.clk
		.reset                   (n0_from_hps_reset_reset_bridge_in_reset_reset),        //       clk_reset.reset
		.m0_address              (nse_from_fpga_s1_agent_m0_address),                    //              m0.address
		.m0_burstcount           (nse_from_fpga_s1_agent_m0_burstcount),                 //                .burstcount
		.m0_byteenable           (nse_from_fpga_s1_agent_m0_byteenable),                 //                .byteenable
		.m0_debugaccess          (nse_from_fpga_s1_agent_m0_debugaccess),                //                .debugaccess
		.m0_lock                 (nse_from_fpga_s1_agent_m0_lock),                       //                .lock
		.m0_readdata             (nse_from_fpga_s1_agent_m0_readdata),                   //                .readdata
		.m0_readdatavalid        (nse_from_fpga_s1_agent_m0_readdatavalid),              //                .readdatavalid
		.m0_read                 (nse_from_fpga_s1_agent_m0_read),                       //                .read
		.m0_waitrequest          (nse_from_fpga_s1_agent_m0_waitrequest),                //                .waitrequest
		.m0_writedata            (nse_from_fpga_s1_agent_m0_writedata),                  //                .writedata
		.m0_write                (nse_from_fpga_s1_agent_m0_write),                      //                .write
		.rp_endofpacket          (nse_from_fpga_s1_agent_rp_endofpacket),                //              rp.endofpacket
		.rp_ready                (nse_from_fpga_s1_agent_rp_ready),                      //                .ready
		.rp_valid                (nse_from_fpga_s1_agent_rp_valid),                      //                .valid
		.rp_data                 (nse_from_fpga_s1_agent_rp_data),                       //                .data
		.rp_startofpacket        (nse_from_fpga_s1_agent_rp_startofpacket),              //                .startofpacket
		.cp_ready                (nse_from_fpga_s1_burst_adapter_source0_ready),         //              cp.ready
		.cp_valid                (nse_from_fpga_s1_burst_adapter_source0_valid),         //                .valid
		.cp_data                 (nse_from_fpga_s1_burst_adapter_source0_data),          //                .data
		.cp_startofpacket        (nse_from_fpga_s1_burst_adapter_source0_startofpacket), //                .startofpacket
		.cp_endofpacket          (nse_from_fpga_s1_burst_adapter_source0_endofpacket),   //                .endofpacket
		.cp_channel              (nse_from_fpga_s1_burst_adapter_source0_channel),       //                .channel
		.rf_sink_ready           (nse_from_fpga_s1_agent_rsp_fifo_out_ready),            //         rf_sink.ready
		.rf_sink_valid           (nse_from_fpga_s1_agent_rsp_fifo_out_valid),            //                .valid
		.rf_sink_startofpacket   (nse_from_fpga_s1_agent_rsp_fifo_out_startofpacket),    //                .startofpacket
		.rf_sink_endofpacket     (nse_from_fpga_s1_agent_rsp_fifo_out_endofpacket),      //                .endofpacket
		.rf_sink_data            (nse_from_fpga_s1_agent_rsp_fifo_out_data),             //                .data
		.rf_source_ready         (nse_from_fpga_s1_agent_rf_source_ready),               //       rf_source.ready
		.rf_source_valid         (nse_from_fpga_s1_agent_rf_source_valid),               //                .valid
		.rf_source_startofpacket (nse_from_fpga_s1_agent_rf_source_startofpacket),       //                .startofpacket
		.rf_source_endofpacket   (nse_from_fpga_s1_agent_rf_source_endofpacket),         //                .endofpacket
		.rf_source_data          (nse_from_fpga_s1_agent_rf_source_data),                //                .data
		.rdata_fifo_sink_ready   (avalon_st_adapter_019_out_0_ready),                    // rdata_fifo_sink.ready
		.rdata_fifo_sink_valid   (avalon_st_adapter_019_out_0_valid),                    //                .valid
		.rdata_fifo_sink_data    (avalon_st_adapter_019_out_0_data),                     //                .data
		.rdata_fifo_sink_error   (avalon_st_adapter_019_out_0_error),                    //                .error
		.rdata_fifo_src_ready    (nse_from_fpga_s1_agent_rdata_fifo_src_ready),          //  rdata_fifo_src.ready
		.rdata_fifo_src_valid    (nse_from_fpga_s1_agent_rdata_fifo_src_valid),          //                .valid
		.rdata_fifo_src_data     (nse_from_fpga_s1_agent_rdata_fifo_src_data),           //                .data
		.m0_response             (2'b00),                                                //     (terminated)
		.m0_writeresponsevalid   (1'b0)                                                  //     (terminated)
	);

	altera_avalon_sc_fifo #(
		.SYMBOLS_PER_BEAT    (1),
		.BITS_PER_SYMBOL     (121),
		.FIFO_DEPTH          (2),
		.CHANNEL_WIDTH       (0),
		.ERROR_WIDTH         (0),
		.USE_PACKETS         (1),
		.USE_FILL_LEVEL      (0),
		.EMPTY_LATENCY       (1),
		.USE_MEMORY_BLOCKS   (0),
		.USE_STORE_FORWARD   (0),
		.USE_ALMOST_FULL_IF  (0),
		.USE_ALMOST_EMPTY_IF (0)
	) nse_from_fpga_s1_agent_rsp_fifo (
		.clk               (System_PLL_sys_clk_clk),                            //       clk.clk
		.reset             (n0_from_hps_reset_reset_bridge_in_reset_reset),     // clk_reset.reset
		.in_data           (nse_from_fpga_s1_agent_rf_source_data),             //        in.data
		.in_valid          (nse_from_fpga_s1_agent_rf_source_valid),            //          .valid
		.in_ready          (nse_from_fpga_s1_agent_rf_source_ready),            //          .ready
		.in_startofpacket  (nse_from_fpga_s1_agent_rf_source_startofpacket),    //          .startofpacket
		.in_endofpacket    (nse_from_fpga_s1_agent_rf_source_endofpacket),      //          .endofpacket
		.out_data          (nse_from_fpga_s1_agent_rsp_fifo_out_data),          //       out.data
		.out_valid         (nse_from_fpga_s1_agent_rsp_fifo_out_valid),         //          .valid
		.out_ready         (nse_from_fpga_s1_agent_rsp_fifo_out_ready),         //          .ready
		.out_startofpacket (nse_from_fpga_s1_agent_rsp_fifo_out_startofpacket), //          .startofpacket
		.out_endofpacket   (nse_from_fpga_s1_agent_rsp_fifo_out_endofpacket),   //          .endofpacket
		.csr_address       (2'b00),                                             // (terminated)
		.csr_read          (1'b0),                                              // (terminated)
		.csr_write         (1'b0),                                              // (terminated)
		.csr_readdata      (),                                                  // (terminated)
		.csr_writedata     (32'b00000000000000000000000000000000),              // (terminated)
		.almost_full_data  (),                                                  // (terminated)
		.almost_empty_data (),                                                  // (terminated)
		.in_empty          (1'b0),                                              // (terminated)
		.out_empty         (),                                                  // (terminated)
		.in_error          (1'b0),                                              // (terminated)
		.out_error         (),                                                  // (terminated)
		.in_channel        (1'b0),                                              // (terminated)
		.out_channel       ()                                                   // (terminated)
	);

	altera_avalon_sc_fifo #(
		.SYMBOLS_PER_BEAT    (1),
		.BITS_PER_SYMBOL     (34),
		.FIFO_DEPTH          (2),
		.CHANNEL_WIDTH       (0),
		.ERROR_WIDTH         (0),
		.USE_PACKETS         (0),
		.USE_FILL_LEVEL      (0),
		.EMPTY_LATENCY       (0),
		.USE_MEMORY_BLOCKS   (0),
		.USE_STORE_FORWARD   (0),
		.USE_ALMOST_FULL_IF  (0),
		.USE_ALMOST_EMPTY_IF (0)
	) nse_from_fpga_s1_agent_rdata_fifo (
		.clk               (System_PLL_sys_clk_clk),                        //       clk.clk
		.reset             (n0_from_hps_reset_reset_bridge_in_reset_reset), // clk_reset.reset
		.in_data           (nse_from_fpga_s1_agent_rdata_fifo_src_data),    //        in.data
		.in_valid          (nse_from_fpga_s1_agent_rdata_fifo_src_valid),   //          .valid
		.in_ready          (nse_from_fpga_s1_agent_rdata_fifo_src_ready),   //          .ready
		.out_data          (nse_from_fpga_s1_agent_rdata_fifo_out_data),    //       out.data
		.out_valid         (nse_from_fpga_s1_agent_rdata_fifo_out_valid),   //          .valid
		.out_ready         (nse_from_fpga_s1_agent_rdata_fifo_out_ready),   //          .ready
		.csr_address       (2'b00),                                         // (terminated)
		.csr_read          (1'b0),                                          // (terminated)
		.csr_write         (1'b0),                                          // (terminated)
		.csr_readdata      (),                                              // (terminated)
		.csr_writedata     (32'b00000000000000000000000000000000),          // (terminated)
		.almost_full_data  (),                                              // (terminated)
		.almost_empty_data (),                                              // (terminated)
		.in_startofpacket  (1'b0),                                          // (terminated)
		.in_endofpacket    (1'b0),                                          // (terminated)
		.out_startofpacket (),                                              // (terminated)
		.out_endofpacket   (),                                              // (terminated)
		.in_empty          (1'b0),                                          // (terminated)
		.out_empty         (),                                              // (terminated)
		.in_error          (1'b0),                                          // (terminated)
		.out_error         (),                                              // (terminated)
		.in_channel        (1'b0),                                          // (terminated)
		.out_channel       ()                                               // (terminated)
	);

	altera_merlin_slave_agent #(
		.PKT_ORI_BURST_SIZE_H      (119),
		.PKT_ORI_BURST_SIZE_L      (117),
		.PKT_RESPONSE_STATUS_H     (116),
		.PKT_RESPONSE_STATUS_L     (115),
		.PKT_BURST_SIZE_H          (79),
		.PKT_BURST_SIZE_L          (77),
		.PKT_TRANS_LOCK            (61),
		.PKT_BEGIN_BURST           (84),
		.PKT_PROTECTION_H          (110),
		.PKT_PROTECTION_L          (108),
		.PKT_BURSTWRAP_H           (76),
		.PKT_BURSTWRAP_L           (70),
		.PKT_BYTE_CNT_H            (69),
		.PKT_BYTE_CNT_L            (63),
		.PKT_ADDR_H                (56),
		.PKT_ADDR_L                (36),
		.PKT_TRANS_COMPRESSED_READ (57),
		.PKT_TRANS_POSTED          (58),
		.PKT_TRANS_WRITE           (59),
		.PKT_TRANS_READ            (60),
		.PKT_DATA_H                (31),
		.PKT_DATA_L                (0),
		.PKT_BYTEEN_H              (35),
		.PKT_BYTEEN_L              (32),
		.PKT_SRC_ID_H              (90),
		.PKT_SRC_ID_L              (86),
		.PKT_DEST_ID_H             (95),
		.PKT_DEST_ID_L             (91),
		.PKT_SYMBOL_W              (8),
		.ST_CHANNEL_W              (27),
		.ST_DATA_W                 (120),
		.AVS_BURSTCOUNT_W          (3),
		.SUPPRESS_0_BYTEEN_CMD     (1),
		.PREVENT_FIFO_OVERFLOW     (1),
		.USE_READRESPONSE          (0),
		.USE_WRITERESPONSE         (0),
		.ECC_ENABLE                (0)
	) one9th_s1_agent (
		.clk                     (System_PLL_sys_clk_clk),                        //             clk.clk
		.reset                   (n0_from_hps_reset_reset_bridge_in_reset_reset), //       clk_reset.reset
		.m0_address              (one9th_s1_agent_m0_address),                    //              m0.address
		.m0_burstcount           (one9th_s1_agent_m0_burstcount),                 //                .burstcount
		.m0_byteenable           (one9th_s1_agent_m0_byteenable),                 //                .byteenable
		.m0_debugaccess          (one9th_s1_agent_m0_debugaccess),                //                .debugaccess
		.m0_lock                 (one9th_s1_agent_m0_lock),                       //                .lock
		.m0_readdata             (one9th_s1_agent_m0_readdata),                   //                .readdata
		.m0_readdatavalid        (one9th_s1_agent_m0_readdatavalid),              //                .readdatavalid
		.m0_read                 (one9th_s1_agent_m0_read),                       //                .read
		.m0_waitrequest          (one9th_s1_agent_m0_waitrequest),                //                .waitrequest
		.m0_writedata            (one9th_s1_agent_m0_writedata),                  //                .writedata
		.m0_write                (one9th_s1_agent_m0_write),                      //                .write
		.rp_endofpacket          (one9th_s1_agent_rp_endofpacket),                //              rp.endofpacket
		.rp_ready                (one9th_s1_agent_rp_ready),                      //                .ready
		.rp_valid                (one9th_s1_agent_rp_valid),                      //                .valid
		.rp_data                 (one9th_s1_agent_rp_data),                       //                .data
		.rp_startofpacket        (one9th_s1_agent_rp_startofpacket),              //                .startofpacket
		.cp_ready                (one9th_s1_burst_adapter_source0_ready),         //              cp.ready
		.cp_valid                (one9th_s1_burst_adapter_source0_valid),         //                .valid
		.cp_data                 (one9th_s1_burst_adapter_source0_data),          //                .data
		.cp_startofpacket        (one9th_s1_burst_adapter_source0_startofpacket), //                .startofpacket
		.cp_endofpacket          (one9th_s1_burst_adapter_source0_endofpacket),   //                .endofpacket
		.cp_channel              (one9th_s1_burst_adapter_source0_channel),       //                .channel
		.rf_sink_ready           (one9th_s1_agent_rsp_fifo_out_ready),            //         rf_sink.ready
		.rf_sink_valid           (one9th_s1_agent_rsp_fifo_out_valid),            //                .valid
		.rf_sink_startofpacket   (one9th_s1_agent_rsp_fifo_out_startofpacket),    //                .startofpacket
		.rf_sink_endofpacket     (one9th_s1_agent_rsp_fifo_out_endofpacket),      //                .endofpacket
		.rf_sink_data            (one9th_s1_agent_rsp_fifo_out_data),             //                .data
		.rf_source_ready         (one9th_s1_agent_rf_source_ready),               //       rf_source.ready
		.rf_source_valid         (one9th_s1_agent_rf_source_valid),               //                .valid
		.rf_source_startofpacket (one9th_s1_agent_rf_source_startofpacket),       //                .startofpacket
		.rf_source_endofpacket   (one9th_s1_agent_rf_source_endofpacket),         //                .endofpacket
		.rf_source_data          (one9th_s1_agent_rf_source_data),                //                .data
		.rdata_fifo_sink_ready   (avalon_st_adapter_020_out_0_ready),             // rdata_fifo_sink.ready
		.rdata_fifo_sink_valid   (avalon_st_adapter_020_out_0_valid),             //                .valid
		.rdata_fifo_sink_data    (avalon_st_adapter_020_out_0_data),              //                .data
		.rdata_fifo_sink_error   (avalon_st_adapter_020_out_0_error),             //                .error
		.rdata_fifo_src_ready    (one9th_s1_agent_rdata_fifo_src_ready),          //  rdata_fifo_src.ready
		.rdata_fifo_src_valid    (one9th_s1_agent_rdata_fifo_src_valid),          //                .valid
		.rdata_fifo_src_data     (one9th_s1_agent_rdata_fifo_src_data),           //                .data
		.m0_response             (2'b00),                                         //     (terminated)
		.m0_writeresponsevalid   (1'b0)                                           //     (terminated)
	);

	altera_avalon_sc_fifo #(
		.SYMBOLS_PER_BEAT    (1),
		.BITS_PER_SYMBOL     (121),
		.FIFO_DEPTH          (2),
		.CHANNEL_WIDTH       (0),
		.ERROR_WIDTH         (0),
		.USE_PACKETS         (1),
		.USE_FILL_LEVEL      (0),
		.EMPTY_LATENCY       (1),
		.USE_MEMORY_BLOCKS   (0),
		.USE_STORE_FORWARD   (0),
		.USE_ALMOST_FULL_IF  (0),
		.USE_ALMOST_EMPTY_IF (0)
	) one9th_s1_agent_rsp_fifo (
		.clk               (System_PLL_sys_clk_clk),                        //       clk.clk
		.reset             (n0_from_hps_reset_reset_bridge_in_reset_reset), // clk_reset.reset
		.in_data           (one9th_s1_agent_rf_source_data),                //        in.data
		.in_valid          (one9th_s1_agent_rf_source_valid),               //          .valid
		.in_ready          (one9th_s1_agent_rf_source_ready),               //          .ready
		.in_startofpacket  (one9th_s1_agent_rf_source_startofpacket),       //          .startofpacket
		.in_endofpacket    (one9th_s1_agent_rf_source_endofpacket),         //          .endofpacket
		.out_data          (one9th_s1_agent_rsp_fifo_out_data),             //       out.data
		.out_valid         (one9th_s1_agent_rsp_fifo_out_valid),            //          .valid
		.out_ready         (one9th_s1_agent_rsp_fifo_out_ready),            //          .ready
		.out_startofpacket (one9th_s1_agent_rsp_fifo_out_startofpacket),    //          .startofpacket
		.out_endofpacket   (one9th_s1_agent_rsp_fifo_out_endofpacket),      //          .endofpacket
		.csr_address       (2'b00),                                         // (terminated)
		.csr_read          (1'b0),                                          // (terminated)
		.csr_write         (1'b0),                                          // (terminated)
		.csr_readdata      (),                                              // (terminated)
		.csr_writedata     (32'b00000000000000000000000000000000),          // (terminated)
		.almost_full_data  (),                                              // (terminated)
		.almost_empty_data (),                                              // (terminated)
		.in_empty          (1'b0),                                          // (terminated)
		.out_empty         (),                                              // (terminated)
		.in_error          (1'b0),                                          // (terminated)
		.out_error         (),                                              // (terminated)
		.in_channel        (1'b0),                                          // (terminated)
		.out_channel       ()                                               // (terminated)
	);

	altera_avalon_sc_fifo #(
		.SYMBOLS_PER_BEAT    (1),
		.BITS_PER_SYMBOL     (34),
		.FIFO_DEPTH          (2),
		.CHANNEL_WIDTH       (0),
		.ERROR_WIDTH         (0),
		.USE_PACKETS         (0),
		.USE_FILL_LEVEL      (0),
		.EMPTY_LATENCY       (0),
		.USE_MEMORY_BLOCKS   (0),
		.USE_STORE_FORWARD   (0),
		.USE_ALMOST_FULL_IF  (0),
		.USE_ALMOST_EMPTY_IF (0)
	) one9th_s1_agent_rdata_fifo (
		.clk               (System_PLL_sys_clk_clk),                        //       clk.clk
		.reset             (n0_from_hps_reset_reset_bridge_in_reset_reset), // clk_reset.reset
		.in_data           (one9th_s1_agent_rdata_fifo_src_data),           //        in.data
		.in_valid          (one9th_s1_agent_rdata_fifo_src_valid),          //          .valid
		.in_ready          (one9th_s1_agent_rdata_fifo_src_ready),          //          .ready
		.out_data          (one9th_s1_agent_rdata_fifo_out_data),           //       out.data
		.out_valid         (one9th_s1_agent_rdata_fifo_out_valid),          //          .valid
		.out_ready         (one9th_s1_agent_rdata_fifo_out_ready),          //          .ready
		.csr_address       (2'b00),                                         // (terminated)
		.csr_read          (1'b0),                                          // (terminated)
		.csr_write         (1'b0),                                          // (terminated)
		.csr_readdata      (),                                              // (terminated)
		.csr_writedata     (32'b00000000000000000000000000000000),          // (terminated)
		.almost_full_data  (),                                              // (terminated)
		.almost_empty_data (),                                              // (terminated)
		.in_startofpacket  (1'b0),                                          // (terminated)
		.in_endofpacket    (1'b0),                                          // (terminated)
		.out_startofpacket (),                                              // (terminated)
		.out_endofpacket   (),                                              // (terminated)
		.in_empty          (1'b0),                                          // (terminated)
		.out_empty         (),                                              // (terminated)
		.in_error          (1'b0),                                          // (terminated)
		.out_error         (),                                              // (terminated)
		.in_channel        (1'b0),                                          // (terminated)
		.out_channel       ()                                               // (terminated)
	);

	altera_merlin_slave_agent #(
		.PKT_ORI_BURST_SIZE_H      (119),
		.PKT_ORI_BURST_SIZE_L      (117),
		.PKT_RESPONSE_STATUS_H     (116),
		.PKT_RESPONSE_STATUS_L     (115),
		.PKT_BURST_SIZE_H          (79),
		.PKT_BURST_SIZE_L          (77),
		.PKT_TRANS_LOCK            (61),
		.PKT_BEGIN_BURST           (84),
		.PKT_PROTECTION_H          (110),
		.PKT_PROTECTION_L          (108),
		.PKT_BURSTWRAP_H           (76),
		.PKT_BURSTWRAP_L           (70),
		.PKT_BYTE_CNT_H            (69),
		.PKT_BYTE_CNT_L            (63),
		.PKT_ADDR_H                (56),
		.PKT_ADDR_L                (36),
		.PKT_TRANS_COMPRESSED_READ (57),
		.PKT_TRANS_POSTED          (58),
		.PKT_TRANS_WRITE           (59),
		.PKT_TRANS_READ            (60),
		.PKT_DATA_H                (31),
		.PKT_DATA_L                (0),
		.PKT_BYTEEN_H              (35),
		.PKT_BYTEEN_L              (32),
		.PKT_SRC_ID_H              (90),
		.PKT_SRC_ID_L              (86),
		.PKT_DEST_ID_H             (95),
		.PKT_DEST_ID_L             (91),
		.PKT_SYMBOL_W              (8),
		.ST_CHANNEL_W              (27),
		.ST_DATA_W                 (120),
		.AVS_BURSTCOUNT_W          (3),
		.SUPPRESS_0_BYTEEN_CMD     (1),
		.PREVENT_FIFO_OVERFLOW     (1),
		.USE_READRESPONSE          (0),
		.USE_WRITERESPONSE         (0),
		.ECC_ENABLE                (0)
	) one36th_s1_agent (
		.clk                     (System_PLL_sys_clk_clk),                         //             clk.clk
		.reset                   (n0_from_hps_reset_reset_bridge_in_reset_reset),  //       clk_reset.reset
		.m0_address              (one36th_s1_agent_m0_address),                    //              m0.address
		.m0_burstcount           (one36th_s1_agent_m0_burstcount),                 //                .burstcount
		.m0_byteenable           (one36th_s1_agent_m0_byteenable),                 //                .byteenable
		.m0_debugaccess          (one36th_s1_agent_m0_debugaccess),                //                .debugaccess
		.m0_lock                 (one36th_s1_agent_m0_lock),                       //                .lock
		.m0_readdata             (one36th_s1_agent_m0_readdata),                   //                .readdata
		.m0_readdatavalid        (one36th_s1_agent_m0_readdatavalid),              //                .readdatavalid
		.m0_read                 (one36th_s1_agent_m0_read),                       //                .read
		.m0_waitrequest          (one36th_s1_agent_m0_waitrequest),                //                .waitrequest
		.m0_writedata            (one36th_s1_agent_m0_writedata),                  //                .writedata
		.m0_write                (one36th_s1_agent_m0_write),                      //                .write
		.rp_endofpacket          (one36th_s1_agent_rp_endofpacket),                //              rp.endofpacket
		.rp_ready                (one36th_s1_agent_rp_ready),                      //                .ready
		.rp_valid                (one36th_s1_agent_rp_valid),                      //                .valid
		.rp_data                 (one36th_s1_agent_rp_data),                       //                .data
		.rp_startofpacket        (one36th_s1_agent_rp_startofpacket),              //                .startofpacket
		.cp_ready                (one36th_s1_burst_adapter_source0_ready),         //              cp.ready
		.cp_valid                (one36th_s1_burst_adapter_source0_valid),         //                .valid
		.cp_data                 (one36th_s1_burst_adapter_source0_data),          //                .data
		.cp_startofpacket        (one36th_s1_burst_adapter_source0_startofpacket), //                .startofpacket
		.cp_endofpacket          (one36th_s1_burst_adapter_source0_endofpacket),   //                .endofpacket
		.cp_channel              (one36th_s1_burst_adapter_source0_channel),       //                .channel
		.rf_sink_ready           (one36th_s1_agent_rsp_fifo_out_ready),            //         rf_sink.ready
		.rf_sink_valid           (one36th_s1_agent_rsp_fifo_out_valid),            //                .valid
		.rf_sink_startofpacket   (one36th_s1_agent_rsp_fifo_out_startofpacket),    //                .startofpacket
		.rf_sink_endofpacket     (one36th_s1_agent_rsp_fifo_out_endofpacket),      //                .endofpacket
		.rf_sink_data            (one36th_s1_agent_rsp_fifo_out_data),             //                .data
		.rf_source_ready         (one36th_s1_agent_rf_source_ready),               //       rf_source.ready
		.rf_source_valid         (one36th_s1_agent_rf_source_valid),               //                .valid
		.rf_source_startofpacket (one36th_s1_agent_rf_source_startofpacket),       //                .startofpacket
		.rf_source_endofpacket   (one36th_s1_agent_rf_source_endofpacket),         //                .endofpacket
		.rf_source_data          (one36th_s1_agent_rf_source_data),                //                .data
		.rdata_fifo_sink_ready   (avalon_st_adapter_021_out_0_ready),              // rdata_fifo_sink.ready
		.rdata_fifo_sink_valid   (avalon_st_adapter_021_out_0_valid),              //                .valid
		.rdata_fifo_sink_data    (avalon_st_adapter_021_out_0_data),               //                .data
		.rdata_fifo_sink_error   (avalon_st_adapter_021_out_0_error),              //                .error
		.rdata_fifo_src_ready    (one36th_s1_agent_rdata_fifo_src_ready),          //  rdata_fifo_src.ready
		.rdata_fifo_src_valid    (one36th_s1_agent_rdata_fifo_src_valid),          //                .valid
		.rdata_fifo_src_data     (one36th_s1_agent_rdata_fifo_src_data),           //                .data
		.m0_response             (2'b00),                                          //     (terminated)
		.m0_writeresponsevalid   (1'b0)                                            //     (terminated)
	);

	altera_avalon_sc_fifo #(
		.SYMBOLS_PER_BEAT    (1),
		.BITS_PER_SYMBOL     (121),
		.FIFO_DEPTH          (2),
		.CHANNEL_WIDTH       (0),
		.ERROR_WIDTH         (0),
		.USE_PACKETS         (1),
		.USE_FILL_LEVEL      (0),
		.EMPTY_LATENCY       (1),
		.USE_MEMORY_BLOCKS   (0),
		.USE_STORE_FORWARD   (0),
		.USE_ALMOST_FULL_IF  (0),
		.USE_ALMOST_EMPTY_IF (0)
	) one36th_s1_agent_rsp_fifo (
		.clk               (System_PLL_sys_clk_clk),                        //       clk.clk
		.reset             (n0_from_hps_reset_reset_bridge_in_reset_reset), // clk_reset.reset
		.in_data           (one36th_s1_agent_rf_source_data),               //        in.data
		.in_valid          (one36th_s1_agent_rf_source_valid),              //          .valid
		.in_ready          (one36th_s1_agent_rf_source_ready),              //          .ready
		.in_startofpacket  (one36th_s1_agent_rf_source_startofpacket),      //          .startofpacket
		.in_endofpacket    (one36th_s1_agent_rf_source_endofpacket),        //          .endofpacket
		.out_data          (one36th_s1_agent_rsp_fifo_out_data),            //       out.data
		.out_valid         (one36th_s1_agent_rsp_fifo_out_valid),           //          .valid
		.out_ready         (one36th_s1_agent_rsp_fifo_out_ready),           //          .ready
		.out_startofpacket (one36th_s1_agent_rsp_fifo_out_startofpacket),   //          .startofpacket
		.out_endofpacket   (one36th_s1_agent_rsp_fifo_out_endofpacket),     //          .endofpacket
		.csr_address       (2'b00),                                         // (terminated)
		.csr_read          (1'b0),                                          // (terminated)
		.csr_write         (1'b0),                                          // (terminated)
		.csr_readdata      (),                                              // (terminated)
		.csr_writedata     (32'b00000000000000000000000000000000),          // (terminated)
		.almost_full_data  (),                                              // (terminated)
		.almost_empty_data (),                                              // (terminated)
		.in_empty          (1'b0),                                          // (terminated)
		.out_empty         (),                                              // (terminated)
		.in_error          (1'b0),                                          // (terminated)
		.out_error         (),                                              // (terminated)
		.in_channel        (1'b0),                                          // (terminated)
		.out_channel       ()                                               // (terminated)
	);

	altera_avalon_sc_fifo #(
		.SYMBOLS_PER_BEAT    (1),
		.BITS_PER_SYMBOL     (34),
		.FIFO_DEPTH          (2),
		.CHANNEL_WIDTH       (0),
		.ERROR_WIDTH         (0),
		.USE_PACKETS         (0),
		.USE_FILL_LEVEL      (0),
		.EMPTY_LATENCY       (0),
		.USE_MEMORY_BLOCKS   (0),
		.USE_STORE_FORWARD   (0),
		.USE_ALMOST_FULL_IF  (0),
		.USE_ALMOST_EMPTY_IF (0)
	) one36th_s1_agent_rdata_fifo (
		.clk               (System_PLL_sys_clk_clk),                        //       clk.clk
		.reset             (n0_from_hps_reset_reset_bridge_in_reset_reset), // clk_reset.reset
		.in_data           (one36th_s1_agent_rdata_fifo_src_data),          //        in.data
		.in_valid          (one36th_s1_agent_rdata_fifo_src_valid),         //          .valid
		.in_ready          (one36th_s1_agent_rdata_fifo_src_ready),         //          .ready
		.out_data          (one36th_s1_agent_rdata_fifo_out_data),          //       out.data
		.out_valid         (one36th_s1_agent_rdata_fifo_out_valid),         //          .valid
		.out_ready         (one36th_s1_agent_rdata_fifo_out_ready),         //          .ready
		.csr_address       (2'b00),                                         // (terminated)
		.csr_read          (1'b0),                                          // (terminated)
		.csr_write         (1'b0),                                          // (terminated)
		.csr_readdata      (),                                              // (terminated)
		.csr_writedata     (32'b00000000000000000000000000000000),          // (terminated)
		.almost_full_data  (),                                              // (terminated)
		.almost_empty_data (),                                              // (terminated)
		.in_startofpacket  (1'b0),                                          // (terminated)
		.in_endofpacket    (1'b0),                                          // (terminated)
		.out_startofpacket (),                                              // (terminated)
		.out_endofpacket   (),                                              // (terminated)
		.in_empty          (1'b0),                                          // (terminated)
		.out_empty         (),                                              // (terminated)
		.in_error          (1'b0),                                          // (terminated)
		.out_error         (),                                              // (terminated)
		.in_channel        (1'b0),                                          // (terminated)
		.out_channel       ()                                               // (terminated)
	);

	altera_merlin_slave_agent #(
		.PKT_ORI_BURST_SIZE_H      (119),
		.PKT_ORI_BURST_SIZE_L      (117),
		.PKT_RESPONSE_STATUS_H     (116),
		.PKT_RESPONSE_STATUS_L     (115),
		.PKT_BURST_SIZE_H          (79),
		.PKT_BURST_SIZE_L          (77),
		.PKT_TRANS_LOCK            (61),
		.PKT_BEGIN_BURST           (84),
		.PKT_PROTECTION_H          (110),
		.PKT_PROTECTION_L          (108),
		.PKT_BURSTWRAP_H           (76),
		.PKT_BURSTWRAP_L           (70),
		.PKT_BYTE_CNT_H            (69),
		.PKT_BYTE_CNT_L            (63),
		.PKT_ADDR_H                (56),
		.PKT_ADDR_L                (36),
		.PKT_TRANS_COMPRESSED_READ (57),
		.PKT_TRANS_POSTED          (58),
		.PKT_TRANS_WRITE           (59),
		.PKT_TRANS_READ            (60),
		.PKT_DATA_H                (31),
		.PKT_DATA_L                (0),
		.PKT_BYTEEN_H              (35),
		.PKT_BYTEEN_L              (32),
		.PKT_SRC_ID_H              (90),
		.PKT_SRC_ID_L              (86),
		.PKT_DEST_ID_H             (95),
		.PKT_DEST_ID_L             (91),
		.PKT_SYMBOL_W              (8),
		.ST_CHANNEL_W              (27),
		.ST_DATA_W                 (120),
		.AVS_BURSTCOUNT_W          (3),
		.SUPPRESS_0_BYTEEN_CMD     (1),
		.PREVENT_FIFO_OVERFLOW     (1),
		.USE_READRESPONSE          (0),
		.USE_WRITERESPONSE         (0),
		.ECC_ENABLE                (0)
	) omega_s1_agent (
		.clk                     (System_PLL_sys_clk_clk),                        //             clk.clk
		.reset                   (n0_from_hps_reset_reset_bridge_in_reset_reset), //       clk_reset.reset
		.m0_address              (omega_s1_agent_m0_address),                     //              m0.address
		.m0_burstcount           (omega_s1_agent_m0_burstcount),                  //                .burstcount
		.m0_byteenable           (omega_s1_agent_m0_byteenable),                  //                .byteenable
		.m0_debugaccess          (omega_s1_agent_m0_debugaccess),                 //                .debugaccess
		.m0_lock                 (omega_s1_agent_m0_lock),                        //                .lock
		.m0_readdata             (omega_s1_agent_m0_readdata),                    //                .readdata
		.m0_readdatavalid        (omega_s1_agent_m0_readdatavalid),               //                .readdatavalid
		.m0_read                 (omega_s1_agent_m0_read),                        //                .read
		.m0_waitrequest          (omega_s1_agent_m0_waitrequest),                 //                .waitrequest
		.m0_writedata            (omega_s1_agent_m0_writedata),                   //                .writedata
		.m0_write                (omega_s1_agent_m0_write),                       //                .write
		.rp_endofpacket          (omega_s1_agent_rp_endofpacket),                 //              rp.endofpacket
		.rp_ready                (omega_s1_agent_rp_ready),                       //                .ready
		.rp_valid                (omega_s1_agent_rp_valid),                       //                .valid
		.rp_data                 (omega_s1_agent_rp_data),                        //                .data
		.rp_startofpacket        (omega_s1_agent_rp_startofpacket),               //                .startofpacket
		.cp_ready                (omega_s1_burst_adapter_source0_ready),          //              cp.ready
		.cp_valid                (omega_s1_burst_adapter_source0_valid),          //                .valid
		.cp_data                 (omega_s1_burst_adapter_source0_data),           //                .data
		.cp_startofpacket        (omega_s1_burst_adapter_source0_startofpacket),  //                .startofpacket
		.cp_endofpacket          (omega_s1_burst_adapter_source0_endofpacket),    //                .endofpacket
		.cp_channel              (omega_s1_burst_adapter_source0_channel),        //                .channel
		.rf_sink_ready           (omega_s1_agent_rsp_fifo_out_ready),             //         rf_sink.ready
		.rf_sink_valid           (omega_s1_agent_rsp_fifo_out_valid),             //                .valid
		.rf_sink_startofpacket   (omega_s1_agent_rsp_fifo_out_startofpacket),     //                .startofpacket
		.rf_sink_endofpacket     (omega_s1_agent_rsp_fifo_out_endofpacket),       //                .endofpacket
		.rf_sink_data            (omega_s1_agent_rsp_fifo_out_data),              //                .data
		.rf_source_ready         (omega_s1_agent_rf_source_ready),                //       rf_source.ready
		.rf_source_valid         (omega_s1_agent_rf_source_valid),                //                .valid
		.rf_source_startofpacket (omega_s1_agent_rf_source_startofpacket),        //                .startofpacket
		.rf_source_endofpacket   (omega_s1_agent_rf_source_endofpacket),          //                .endofpacket
		.rf_source_data          (omega_s1_agent_rf_source_data),                 //                .data
		.rdata_fifo_sink_ready   (avalon_st_adapter_022_out_0_ready),             // rdata_fifo_sink.ready
		.rdata_fifo_sink_valid   (avalon_st_adapter_022_out_0_valid),             //                .valid
		.rdata_fifo_sink_data    (avalon_st_adapter_022_out_0_data),              //                .data
		.rdata_fifo_sink_error   (avalon_st_adapter_022_out_0_error),             //                .error
		.rdata_fifo_src_ready    (omega_s1_agent_rdata_fifo_src_ready),           //  rdata_fifo_src.ready
		.rdata_fifo_src_valid    (omega_s1_agent_rdata_fifo_src_valid),           //                .valid
		.rdata_fifo_src_data     (omega_s1_agent_rdata_fifo_src_data),            //                .data
		.m0_response             (2'b00),                                         //     (terminated)
		.m0_writeresponsevalid   (1'b0)                                           //     (terminated)
	);

	altera_avalon_sc_fifo #(
		.SYMBOLS_PER_BEAT    (1),
		.BITS_PER_SYMBOL     (121),
		.FIFO_DEPTH          (2),
		.CHANNEL_WIDTH       (0),
		.ERROR_WIDTH         (0),
		.USE_PACKETS         (1),
		.USE_FILL_LEVEL      (0),
		.EMPTY_LATENCY       (1),
		.USE_MEMORY_BLOCKS   (0),
		.USE_STORE_FORWARD   (0),
		.USE_ALMOST_FULL_IF  (0),
		.USE_ALMOST_EMPTY_IF (0)
	) omega_s1_agent_rsp_fifo (
		.clk               (System_PLL_sys_clk_clk),                        //       clk.clk
		.reset             (n0_from_hps_reset_reset_bridge_in_reset_reset), // clk_reset.reset
		.in_data           (omega_s1_agent_rf_source_data),                 //        in.data
		.in_valid          (omega_s1_agent_rf_source_valid),                //          .valid
		.in_ready          (omega_s1_agent_rf_source_ready),                //          .ready
		.in_startofpacket  (omega_s1_agent_rf_source_startofpacket),        //          .startofpacket
		.in_endofpacket    (omega_s1_agent_rf_source_endofpacket),          //          .endofpacket
		.out_data          (omega_s1_agent_rsp_fifo_out_data),              //       out.data
		.out_valid         (omega_s1_agent_rsp_fifo_out_valid),             //          .valid
		.out_ready         (omega_s1_agent_rsp_fifo_out_ready),             //          .ready
		.out_startofpacket (omega_s1_agent_rsp_fifo_out_startofpacket),     //          .startofpacket
		.out_endofpacket   (omega_s1_agent_rsp_fifo_out_endofpacket),       //          .endofpacket
		.csr_address       (2'b00),                                         // (terminated)
		.csr_read          (1'b0),                                          // (terminated)
		.csr_write         (1'b0),                                          // (terminated)
		.csr_readdata      (),                                              // (terminated)
		.csr_writedata     (32'b00000000000000000000000000000000),          // (terminated)
		.almost_full_data  (),                                              // (terminated)
		.almost_empty_data (),                                              // (terminated)
		.in_empty          (1'b0),                                          // (terminated)
		.out_empty         (),                                              // (terminated)
		.in_error          (1'b0),                                          // (terminated)
		.out_error         (),                                              // (terminated)
		.in_channel        (1'b0),                                          // (terminated)
		.out_channel       ()                                               // (terminated)
	);

	altera_avalon_sc_fifo #(
		.SYMBOLS_PER_BEAT    (1),
		.BITS_PER_SYMBOL     (34),
		.FIFO_DEPTH          (2),
		.CHANNEL_WIDTH       (0),
		.ERROR_WIDTH         (0),
		.USE_PACKETS         (0),
		.USE_FILL_LEVEL      (0),
		.EMPTY_LATENCY       (0),
		.USE_MEMORY_BLOCKS   (0),
		.USE_STORE_FORWARD   (0),
		.USE_ALMOST_FULL_IF  (0),
		.USE_ALMOST_EMPTY_IF (0)
	) omega_s1_agent_rdata_fifo (
		.clk               (System_PLL_sys_clk_clk),                        //       clk.clk
		.reset             (n0_from_hps_reset_reset_bridge_in_reset_reset), // clk_reset.reset
		.in_data           (omega_s1_agent_rdata_fifo_src_data),            //        in.data
		.in_valid          (omega_s1_agent_rdata_fifo_src_valid),           //          .valid
		.in_ready          (omega_s1_agent_rdata_fifo_src_ready),           //          .ready
		.out_data          (omega_s1_agent_rdata_fifo_out_data),            //       out.data
		.out_valid         (omega_s1_agent_rdata_fifo_out_valid),           //          .valid
		.out_ready         (omega_s1_agent_rdata_fifo_out_ready),           //          .ready
		.csr_address       (2'b00),                                         // (terminated)
		.csr_read          (1'b0),                                          // (terminated)
		.csr_write         (1'b0),                                          // (terminated)
		.csr_readdata      (),                                              // (terminated)
		.csr_writedata     (32'b00000000000000000000000000000000),          // (terminated)
		.almost_full_data  (),                                              // (terminated)
		.almost_empty_data (),                                              // (terminated)
		.in_startofpacket  (1'b0),                                          // (terminated)
		.in_endofpacket    (1'b0),                                          // (terminated)
		.out_startofpacket (),                                              // (terminated)
		.out_endofpacket   (),                                              // (terminated)
		.in_empty          (1'b0),                                          // (terminated)
		.out_empty         (),                                              // (terminated)
		.in_error          (1'b0),                                          // (terminated)
		.out_error         (),                                              // (terminated)
		.in_channel        (1'b0),                                          // (terminated)
		.out_channel       ()                                               // (terminated)
	);

	altera_merlin_slave_agent #(
		.PKT_ORI_BURST_SIZE_H      (119),
		.PKT_ORI_BURST_SIZE_L      (117),
		.PKT_RESPONSE_STATUS_H     (116),
		.PKT_RESPONSE_STATUS_L     (115),
		.PKT_BURST_SIZE_H          (79),
		.PKT_BURST_SIZE_L          (77),
		.PKT_TRANS_LOCK            (61),
		.PKT_BEGIN_BURST           (84),
		.PKT_PROTECTION_H          (110),
		.PKT_PROTECTION_L          (108),
		.PKT_BURSTWRAP_H           (76),
		.PKT_BURSTWRAP_L           (70),
		.PKT_BYTE_CNT_H            (69),
		.PKT_BYTE_CNT_L            (63),
		.PKT_ADDR_H                (56),
		.PKT_ADDR_L                (36),
		.PKT_TRANS_COMPRESSED_READ (57),
		.PKT_TRANS_POSTED          (58),
		.PKT_TRANS_WRITE           (59),
		.PKT_TRANS_READ            (60),
		.PKT_DATA_H                (31),
		.PKT_DATA_L                (0),
		.PKT_BYTEEN_H              (35),
		.PKT_BYTEEN_L              (32),
		.PKT_SRC_ID_H              (90),
		.PKT_SRC_ID_L              (86),
		.PKT_DEST_ID_H             (95),
		.PKT_DEST_ID_L             (91),
		.PKT_SYMBOL_W              (8),
		.ST_CHANNEL_W              (27),
		.ST_DATA_W                 (120),
		.AVS_BURSTCOUNT_W          (3),
		.SUPPRESS_0_BYTEEN_CMD     (1),
		.PREVENT_FIFO_OVERFLOW     (1),
		.USE_READRESPONSE          (0),
		.USE_WRITERESPONSE         (0),
		.ECC_ENABLE                (0)
	) ux_s1_agent (
		.clk                     (System_PLL_sys_clk_clk),                        //             clk.clk
		.reset                   (n0_from_hps_reset_reset_bridge_in_reset_reset), //       clk_reset.reset
		.m0_address              (ux_s1_agent_m0_address),                        //              m0.address
		.m0_burstcount           (ux_s1_agent_m0_burstcount),                     //                .burstcount
		.m0_byteenable           (ux_s1_agent_m0_byteenable),                     //                .byteenable
		.m0_debugaccess          (ux_s1_agent_m0_debugaccess),                    //                .debugaccess
		.m0_lock                 (ux_s1_agent_m0_lock),                           //                .lock
		.m0_readdata             (ux_s1_agent_m0_readdata),                       //                .readdata
		.m0_readdatavalid        (ux_s1_agent_m0_readdatavalid),                  //                .readdatavalid
		.m0_read                 (ux_s1_agent_m0_read),                           //                .read
		.m0_waitrequest          (ux_s1_agent_m0_waitrequest),                    //                .waitrequest
		.m0_writedata            (ux_s1_agent_m0_writedata),                      //                .writedata
		.m0_write                (ux_s1_agent_m0_write),                          //                .write
		.rp_endofpacket          (ux_s1_agent_rp_endofpacket),                    //              rp.endofpacket
		.rp_ready                (ux_s1_agent_rp_ready),                          //                .ready
		.rp_valid                (ux_s1_agent_rp_valid),                          //                .valid
		.rp_data                 (ux_s1_agent_rp_data),                           //                .data
		.rp_startofpacket        (ux_s1_agent_rp_startofpacket),                  //                .startofpacket
		.cp_ready                (ux_s1_burst_adapter_source0_ready),             //              cp.ready
		.cp_valid                (ux_s1_burst_adapter_source0_valid),             //                .valid
		.cp_data                 (ux_s1_burst_adapter_source0_data),              //                .data
		.cp_startofpacket        (ux_s1_burst_adapter_source0_startofpacket),     //                .startofpacket
		.cp_endofpacket          (ux_s1_burst_adapter_source0_endofpacket),       //                .endofpacket
		.cp_channel              (ux_s1_burst_adapter_source0_channel),           //                .channel
		.rf_sink_ready           (ux_s1_agent_rsp_fifo_out_ready),                //         rf_sink.ready
		.rf_sink_valid           (ux_s1_agent_rsp_fifo_out_valid),                //                .valid
		.rf_sink_startofpacket   (ux_s1_agent_rsp_fifo_out_startofpacket),        //                .startofpacket
		.rf_sink_endofpacket     (ux_s1_agent_rsp_fifo_out_endofpacket),          //                .endofpacket
		.rf_sink_data            (ux_s1_agent_rsp_fifo_out_data),                 //                .data
		.rf_source_ready         (ux_s1_agent_rf_source_ready),                   //       rf_source.ready
		.rf_source_valid         (ux_s1_agent_rf_source_valid),                   //                .valid
		.rf_source_startofpacket (ux_s1_agent_rf_source_startofpacket),           //                .startofpacket
		.rf_source_endofpacket   (ux_s1_agent_rf_source_endofpacket),             //                .endofpacket
		.rf_source_data          (ux_s1_agent_rf_source_data),                    //                .data
		.rdata_fifo_sink_ready   (avalon_st_adapter_023_out_0_ready),             // rdata_fifo_sink.ready
		.rdata_fifo_sink_valid   (avalon_st_adapter_023_out_0_valid),             //                .valid
		.rdata_fifo_sink_data    (avalon_st_adapter_023_out_0_data),              //                .data
		.rdata_fifo_sink_error   (avalon_st_adapter_023_out_0_error),             //                .error
		.rdata_fifo_src_ready    (ux_s1_agent_rdata_fifo_src_ready),              //  rdata_fifo_src.ready
		.rdata_fifo_src_valid    (ux_s1_agent_rdata_fifo_src_valid),              //                .valid
		.rdata_fifo_src_data     (ux_s1_agent_rdata_fifo_src_data),               //                .data
		.m0_response             (2'b00),                                         //     (terminated)
		.m0_writeresponsevalid   (1'b0)                                           //     (terminated)
	);

	altera_avalon_sc_fifo #(
		.SYMBOLS_PER_BEAT    (1),
		.BITS_PER_SYMBOL     (121),
		.FIFO_DEPTH          (2),
		.CHANNEL_WIDTH       (0),
		.ERROR_WIDTH         (0),
		.USE_PACKETS         (1),
		.USE_FILL_LEVEL      (0),
		.EMPTY_LATENCY       (1),
		.USE_MEMORY_BLOCKS   (0),
		.USE_STORE_FORWARD   (0),
		.USE_ALMOST_FULL_IF  (0),
		.USE_ALMOST_EMPTY_IF (0)
	) ux_s1_agent_rsp_fifo (
		.clk               (System_PLL_sys_clk_clk),                        //       clk.clk
		.reset             (n0_from_hps_reset_reset_bridge_in_reset_reset), // clk_reset.reset
		.in_data           (ux_s1_agent_rf_source_data),                    //        in.data
		.in_valid          (ux_s1_agent_rf_source_valid),                   //          .valid
		.in_ready          (ux_s1_agent_rf_source_ready),                   //          .ready
		.in_startofpacket  (ux_s1_agent_rf_source_startofpacket),           //          .startofpacket
		.in_endofpacket    (ux_s1_agent_rf_source_endofpacket),             //          .endofpacket
		.out_data          (ux_s1_agent_rsp_fifo_out_data),                 //       out.data
		.out_valid         (ux_s1_agent_rsp_fifo_out_valid),                //          .valid
		.out_ready         (ux_s1_agent_rsp_fifo_out_ready),                //          .ready
		.out_startofpacket (ux_s1_agent_rsp_fifo_out_startofpacket),        //          .startofpacket
		.out_endofpacket   (ux_s1_agent_rsp_fifo_out_endofpacket),          //          .endofpacket
		.csr_address       (2'b00),                                         // (terminated)
		.csr_read          (1'b0),                                          // (terminated)
		.csr_write         (1'b0),                                          // (terminated)
		.csr_readdata      (),                                              // (terminated)
		.csr_writedata     (32'b00000000000000000000000000000000),          // (terminated)
		.almost_full_data  (),                                              // (terminated)
		.almost_empty_data (),                                              // (terminated)
		.in_empty          (1'b0),                                          // (terminated)
		.out_empty         (),                                              // (terminated)
		.in_error          (1'b0),                                          // (terminated)
		.out_error         (),                                              // (terminated)
		.in_channel        (1'b0),                                          // (terminated)
		.out_channel       ()                                               // (terminated)
	);

	altera_avalon_sc_fifo #(
		.SYMBOLS_PER_BEAT    (1),
		.BITS_PER_SYMBOL     (34),
		.FIFO_DEPTH          (2),
		.CHANNEL_WIDTH       (0),
		.ERROR_WIDTH         (0),
		.USE_PACKETS         (0),
		.USE_FILL_LEVEL      (0),
		.EMPTY_LATENCY       (0),
		.USE_MEMORY_BLOCKS   (0),
		.USE_STORE_FORWARD   (0),
		.USE_ALMOST_FULL_IF  (0),
		.USE_ALMOST_EMPTY_IF (0)
	) ux_s1_agent_rdata_fifo (
		.clk               (System_PLL_sys_clk_clk),                        //       clk.clk
		.reset             (n0_from_hps_reset_reset_bridge_in_reset_reset), // clk_reset.reset
		.in_data           (ux_s1_agent_rdata_fifo_src_data),               //        in.data
		.in_valid          (ux_s1_agent_rdata_fifo_src_valid),              //          .valid
		.in_ready          (ux_s1_agent_rdata_fifo_src_ready),              //          .ready
		.out_data          (ux_s1_agent_rdata_fifo_out_data),               //       out.data
		.out_valid         (ux_s1_agent_rdata_fifo_out_valid),              //          .valid
		.out_ready         (ux_s1_agent_rdata_fifo_out_ready),              //          .ready
		.csr_address       (2'b00),                                         // (terminated)
		.csr_read          (1'b0),                                          // (terminated)
		.csr_write         (1'b0),                                          // (terminated)
		.csr_readdata      (),                                              // (terminated)
		.csr_writedata     (32'b00000000000000000000000000000000),          // (terminated)
		.almost_full_data  (),                                              // (terminated)
		.almost_empty_data (),                                              // (terminated)
		.in_startofpacket  (1'b0),                                          // (terminated)
		.in_endofpacket    (1'b0),                                          // (terminated)
		.out_startofpacket (),                                              // (terminated)
		.out_endofpacket   (),                                              // (terminated)
		.in_empty          (1'b0),                                          // (terminated)
		.out_empty         (),                                              // (terminated)
		.in_error          (1'b0),                                          // (terminated)
		.out_error         (),                                              // (terminated)
		.in_channel        (1'b0),                                          // (terminated)
		.out_channel       ()                                               // (terminated)
	);

	altera_merlin_slave_agent #(
		.PKT_ORI_BURST_SIZE_H      (119),
		.PKT_ORI_BURST_SIZE_L      (117),
		.PKT_RESPONSE_STATUS_H     (116),
		.PKT_RESPONSE_STATUS_L     (115),
		.PKT_BURST_SIZE_H          (79),
		.PKT_BURST_SIZE_L          (77),
		.PKT_TRANS_LOCK            (61),
		.PKT_BEGIN_BURST           (84),
		.PKT_PROTECTION_H          (110),
		.PKT_PROTECTION_L          (108),
		.PKT_BURSTWRAP_H           (76),
		.PKT_BURSTWRAP_L           (70),
		.PKT_BYTE_CNT_H            (69),
		.PKT_BYTE_CNT_L            (63),
		.PKT_ADDR_H                (56),
		.PKT_ADDR_L                (36),
		.PKT_TRANS_COMPRESSED_READ (57),
		.PKT_TRANS_POSTED          (58),
		.PKT_TRANS_WRITE           (59),
		.PKT_TRANS_READ            (60),
		.PKT_DATA_H                (31),
		.PKT_DATA_L                (0),
		.PKT_BYTEEN_H              (35),
		.PKT_BYTEEN_L              (32),
		.PKT_SRC_ID_H              (90),
		.PKT_SRC_ID_L              (86),
		.PKT_DEST_ID_H             (95),
		.PKT_DEST_ID_L             (91),
		.PKT_SYMBOL_W              (8),
		.ST_CHANNEL_W              (27),
		.ST_DATA_W                 (120),
		.AVS_BURSTCOUNT_W          (3),
		.SUPPRESS_0_BYTEEN_CMD     (1),
		.PREVENT_FIFO_OVERFLOW     (1),
		.USE_READRESPONSE          (0),
		.USE_WRITERESPONSE         (0),
		.ECC_ENABLE                (0)
	) uy_s1_agent (
		.clk                     (System_PLL_sys_clk_clk),                        //             clk.clk
		.reset                   (n0_from_hps_reset_reset_bridge_in_reset_reset), //       clk_reset.reset
		.m0_address              (uy_s1_agent_m0_address),                        //              m0.address
		.m0_burstcount           (uy_s1_agent_m0_burstcount),                     //                .burstcount
		.m0_byteenable           (uy_s1_agent_m0_byteenable),                     //                .byteenable
		.m0_debugaccess          (uy_s1_agent_m0_debugaccess),                    //                .debugaccess
		.m0_lock                 (uy_s1_agent_m0_lock),                           //                .lock
		.m0_readdata             (uy_s1_agent_m0_readdata),                       //                .readdata
		.m0_readdatavalid        (uy_s1_agent_m0_readdatavalid),                  //                .readdatavalid
		.m0_read                 (uy_s1_agent_m0_read),                           //                .read
		.m0_waitrequest          (uy_s1_agent_m0_waitrequest),                    //                .waitrequest
		.m0_writedata            (uy_s1_agent_m0_writedata),                      //                .writedata
		.m0_write                (uy_s1_agent_m0_write),                          //                .write
		.rp_endofpacket          (uy_s1_agent_rp_endofpacket),                    //              rp.endofpacket
		.rp_ready                (uy_s1_agent_rp_ready),                          //                .ready
		.rp_valid                (uy_s1_agent_rp_valid),                          //                .valid
		.rp_data                 (uy_s1_agent_rp_data),                           //                .data
		.rp_startofpacket        (uy_s1_agent_rp_startofpacket),                  //                .startofpacket
		.cp_ready                (uy_s1_burst_adapter_source0_ready),             //              cp.ready
		.cp_valid                (uy_s1_burst_adapter_source0_valid),             //                .valid
		.cp_data                 (uy_s1_burst_adapter_source0_data),              //                .data
		.cp_startofpacket        (uy_s1_burst_adapter_source0_startofpacket),     //                .startofpacket
		.cp_endofpacket          (uy_s1_burst_adapter_source0_endofpacket),       //                .endofpacket
		.cp_channel              (uy_s1_burst_adapter_source0_channel),           //                .channel
		.rf_sink_ready           (uy_s1_agent_rsp_fifo_out_ready),                //         rf_sink.ready
		.rf_sink_valid           (uy_s1_agent_rsp_fifo_out_valid),                //                .valid
		.rf_sink_startofpacket   (uy_s1_agent_rsp_fifo_out_startofpacket),        //                .startofpacket
		.rf_sink_endofpacket     (uy_s1_agent_rsp_fifo_out_endofpacket),          //                .endofpacket
		.rf_sink_data            (uy_s1_agent_rsp_fifo_out_data),                 //                .data
		.rf_source_ready         (uy_s1_agent_rf_source_ready),                   //       rf_source.ready
		.rf_source_valid         (uy_s1_agent_rf_source_valid),                   //                .valid
		.rf_source_startofpacket (uy_s1_agent_rf_source_startofpacket),           //                .startofpacket
		.rf_source_endofpacket   (uy_s1_agent_rf_source_endofpacket),             //                .endofpacket
		.rf_source_data          (uy_s1_agent_rf_source_data),                    //                .data
		.rdata_fifo_sink_ready   (avalon_st_adapter_024_out_0_ready),             // rdata_fifo_sink.ready
		.rdata_fifo_sink_valid   (avalon_st_adapter_024_out_0_valid),             //                .valid
		.rdata_fifo_sink_data    (avalon_st_adapter_024_out_0_data),              //                .data
		.rdata_fifo_sink_error   (avalon_st_adapter_024_out_0_error),             //                .error
		.rdata_fifo_src_ready    (uy_s1_agent_rdata_fifo_src_ready),              //  rdata_fifo_src.ready
		.rdata_fifo_src_valid    (uy_s1_agent_rdata_fifo_src_valid),              //                .valid
		.rdata_fifo_src_data     (uy_s1_agent_rdata_fifo_src_data),               //                .data
		.m0_response             (2'b00),                                         //     (terminated)
		.m0_writeresponsevalid   (1'b0)                                           //     (terminated)
	);

	altera_avalon_sc_fifo #(
		.SYMBOLS_PER_BEAT    (1),
		.BITS_PER_SYMBOL     (121),
		.FIFO_DEPTH          (2),
		.CHANNEL_WIDTH       (0),
		.ERROR_WIDTH         (0),
		.USE_PACKETS         (1),
		.USE_FILL_LEVEL      (0),
		.EMPTY_LATENCY       (1),
		.USE_MEMORY_BLOCKS   (0),
		.USE_STORE_FORWARD   (0),
		.USE_ALMOST_FULL_IF  (0),
		.USE_ALMOST_EMPTY_IF (0)
	) uy_s1_agent_rsp_fifo (
		.clk               (System_PLL_sys_clk_clk),                        //       clk.clk
		.reset             (n0_from_hps_reset_reset_bridge_in_reset_reset), // clk_reset.reset
		.in_data           (uy_s1_agent_rf_source_data),                    //        in.data
		.in_valid          (uy_s1_agent_rf_source_valid),                   //          .valid
		.in_ready          (uy_s1_agent_rf_source_ready),                   //          .ready
		.in_startofpacket  (uy_s1_agent_rf_source_startofpacket),           //          .startofpacket
		.in_endofpacket    (uy_s1_agent_rf_source_endofpacket),             //          .endofpacket
		.out_data          (uy_s1_agent_rsp_fifo_out_data),                 //       out.data
		.out_valid         (uy_s1_agent_rsp_fifo_out_valid),                //          .valid
		.out_ready         (uy_s1_agent_rsp_fifo_out_ready),                //          .ready
		.out_startofpacket (uy_s1_agent_rsp_fifo_out_startofpacket),        //          .startofpacket
		.out_endofpacket   (uy_s1_agent_rsp_fifo_out_endofpacket),          //          .endofpacket
		.csr_address       (2'b00),                                         // (terminated)
		.csr_read          (1'b0),                                          // (terminated)
		.csr_write         (1'b0),                                          // (terminated)
		.csr_readdata      (),                                              // (terminated)
		.csr_writedata     (32'b00000000000000000000000000000000),          // (terminated)
		.almost_full_data  (),                                              // (terminated)
		.almost_empty_data (),                                              // (terminated)
		.in_empty          (1'b0),                                          // (terminated)
		.out_empty         (),                                              // (terminated)
		.in_error          (1'b0),                                          // (terminated)
		.out_error         (),                                              // (terminated)
		.in_channel        (1'b0),                                          // (terminated)
		.out_channel       ()                                               // (terminated)
	);

	altera_avalon_sc_fifo #(
		.SYMBOLS_PER_BEAT    (1),
		.BITS_PER_SYMBOL     (34),
		.FIFO_DEPTH          (2),
		.CHANNEL_WIDTH       (0),
		.ERROR_WIDTH         (0),
		.USE_PACKETS         (0),
		.USE_FILL_LEVEL      (0),
		.EMPTY_LATENCY       (0),
		.USE_MEMORY_BLOCKS   (0),
		.USE_STORE_FORWARD   (0),
		.USE_ALMOST_FULL_IF  (0),
		.USE_ALMOST_EMPTY_IF (0)
	) uy_s1_agent_rdata_fifo (
		.clk               (System_PLL_sys_clk_clk),                        //       clk.clk
		.reset             (n0_from_hps_reset_reset_bridge_in_reset_reset), // clk_reset.reset
		.in_data           (uy_s1_agent_rdata_fifo_src_data),               //        in.data
		.in_valid          (uy_s1_agent_rdata_fifo_src_valid),              //          .valid
		.in_ready          (uy_s1_agent_rdata_fifo_src_ready),              //          .ready
		.out_data          (uy_s1_agent_rdata_fifo_out_data),               //       out.data
		.out_valid         (uy_s1_agent_rdata_fifo_out_valid),              //          .valid
		.out_ready         (uy_s1_agent_rdata_fifo_out_ready),              //          .ready
		.csr_address       (2'b00),                                         // (terminated)
		.csr_read          (1'b0),                                          // (terminated)
		.csr_write         (1'b0),                                          // (terminated)
		.csr_readdata      (),                                              // (terminated)
		.csr_writedata     (32'b00000000000000000000000000000000),          // (terminated)
		.almost_full_data  (),                                              // (terminated)
		.almost_empty_data (),                                              // (terminated)
		.in_startofpacket  (1'b0),                                          // (terminated)
		.in_endofpacket    (1'b0),                                          // (terminated)
		.out_startofpacket (),                                              // (terminated)
		.out_endofpacket   (),                                              // (terminated)
		.in_empty          (1'b0),                                          // (terminated)
		.out_empty         (),                                              // (terminated)
		.in_error          (1'b0),                                          // (terminated)
		.out_error         (),                                              // (terminated)
		.in_channel        (1'b0),                                          // (terminated)
		.out_channel       ()                                               // (terminated)
	);

	altera_merlin_slave_agent #(
		.PKT_ORI_BURST_SIZE_H      (119),
		.PKT_ORI_BURST_SIZE_L      (117),
		.PKT_RESPONSE_STATUS_H     (116),
		.PKT_RESPONSE_STATUS_L     (115),
		.PKT_BURST_SIZE_H          (79),
		.PKT_BURST_SIZE_L          (77),
		.PKT_TRANS_LOCK            (61),
		.PKT_BEGIN_BURST           (84),
		.PKT_PROTECTION_H          (110),
		.PKT_PROTECTION_L          (108),
		.PKT_BURSTWRAP_H           (76),
		.PKT_BURSTWRAP_L           (70),
		.PKT_BYTE_CNT_H            (69),
		.PKT_BYTE_CNT_L            (63),
		.PKT_ADDR_H                (56),
		.PKT_ADDR_L                (36),
		.PKT_TRANS_COMPRESSED_READ (57),
		.PKT_TRANS_POSTED          (58),
		.PKT_TRANS_WRITE           (59),
		.PKT_TRANS_READ            (60),
		.PKT_DATA_H                (31),
		.PKT_DATA_L                (0),
		.PKT_BYTEEN_H              (35),
		.PKT_BYTEEN_L              (32),
		.PKT_SRC_ID_H              (90),
		.PKT_SRC_ID_L              (86),
		.PKT_DEST_ID_H             (95),
		.PKT_DEST_ID_L             (91),
		.PKT_SYMBOL_W              (8),
		.ST_CHANNEL_W              (27),
		.ST_DATA_W                 (120),
		.AVS_BURSTCOUNT_W          (3),
		.SUPPRESS_0_BYTEEN_CMD     (1),
		.PREVENT_FIFO_OVERFLOW     (1),
		.USE_READRESPONSE          (0),
		.USE_WRITERESPONSE         (0),
		.ECC_ENABLE                (0)
	) pipes_s1_agent (
		.clk                     (System_PLL_sys_clk_clk),                        //             clk.clk
		.reset                   (n0_from_hps_reset_reset_bridge_in_reset_reset), //       clk_reset.reset
		.m0_address              (pipes_s1_agent_m0_address),                     //              m0.address
		.m0_burstcount           (pipes_s1_agent_m0_burstcount),                  //                .burstcount
		.m0_byteenable           (pipes_s1_agent_m0_byteenable),                  //                .byteenable
		.m0_debugaccess          (pipes_s1_agent_m0_debugaccess),                 //                .debugaccess
		.m0_lock                 (pipes_s1_agent_m0_lock),                        //                .lock
		.m0_readdata             (pipes_s1_agent_m0_readdata),                    //                .readdata
		.m0_readdatavalid        (pipes_s1_agent_m0_readdatavalid),               //                .readdatavalid
		.m0_read                 (pipes_s1_agent_m0_read),                        //                .read
		.m0_waitrequest          (pipes_s1_agent_m0_waitrequest),                 //                .waitrequest
		.m0_writedata            (pipes_s1_agent_m0_writedata),                   //                .writedata
		.m0_write                (pipes_s1_agent_m0_write),                       //                .write
		.rp_endofpacket          (pipes_s1_agent_rp_endofpacket),                 //              rp.endofpacket
		.rp_ready                (pipes_s1_agent_rp_ready),                       //                .ready
		.rp_valid                (pipes_s1_agent_rp_valid),                       //                .valid
		.rp_data                 (pipes_s1_agent_rp_data),                        //                .data
		.rp_startofpacket        (pipes_s1_agent_rp_startofpacket),               //                .startofpacket
		.cp_ready                (pipes_s1_burst_adapter_source0_ready),          //              cp.ready
		.cp_valid                (pipes_s1_burst_adapter_source0_valid),          //                .valid
		.cp_data                 (pipes_s1_burst_adapter_source0_data),           //                .data
		.cp_startofpacket        (pipes_s1_burst_adapter_source0_startofpacket),  //                .startofpacket
		.cp_endofpacket          (pipes_s1_burst_adapter_source0_endofpacket),    //                .endofpacket
		.cp_channel              (pipes_s1_burst_adapter_source0_channel),        //                .channel
		.rf_sink_ready           (pipes_s1_agent_rsp_fifo_out_ready),             //         rf_sink.ready
		.rf_sink_valid           (pipes_s1_agent_rsp_fifo_out_valid),             //                .valid
		.rf_sink_startofpacket   (pipes_s1_agent_rsp_fifo_out_startofpacket),     //                .startofpacket
		.rf_sink_endofpacket     (pipes_s1_agent_rsp_fifo_out_endofpacket),       //                .endofpacket
		.rf_sink_data            (pipes_s1_agent_rsp_fifo_out_data),              //                .data
		.rf_source_ready         (pipes_s1_agent_rf_source_ready),                //       rf_source.ready
		.rf_source_valid         (pipes_s1_agent_rf_source_valid),                //                .valid
		.rf_source_startofpacket (pipes_s1_agent_rf_source_startofpacket),        //                .startofpacket
		.rf_source_endofpacket   (pipes_s1_agent_rf_source_endofpacket),          //                .endofpacket
		.rf_source_data          (pipes_s1_agent_rf_source_data),                 //                .data
		.rdata_fifo_sink_ready   (avalon_st_adapter_025_out_0_ready),             // rdata_fifo_sink.ready
		.rdata_fifo_sink_valid   (avalon_st_adapter_025_out_0_valid),             //                .valid
		.rdata_fifo_sink_data    (avalon_st_adapter_025_out_0_data),              //                .data
		.rdata_fifo_sink_error   (avalon_st_adapter_025_out_0_error),             //                .error
		.rdata_fifo_src_ready    (pipes_s1_agent_rdata_fifo_src_ready),           //  rdata_fifo_src.ready
		.rdata_fifo_src_valid    (pipes_s1_agent_rdata_fifo_src_valid),           //                .valid
		.rdata_fifo_src_data     (pipes_s1_agent_rdata_fifo_src_data),            //                .data
		.m0_response             (2'b00),                                         //     (terminated)
		.m0_writeresponsevalid   (1'b0)                                           //     (terminated)
	);

	altera_avalon_sc_fifo #(
		.SYMBOLS_PER_BEAT    (1),
		.BITS_PER_SYMBOL     (121),
		.FIFO_DEPTH          (2),
		.CHANNEL_WIDTH       (0),
		.ERROR_WIDTH         (0),
		.USE_PACKETS         (1),
		.USE_FILL_LEVEL      (0),
		.EMPTY_LATENCY       (1),
		.USE_MEMORY_BLOCKS   (0),
		.USE_STORE_FORWARD   (0),
		.USE_ALMOST_FULL_IF  (0),
		.USE_ALMOST_EMPTY_IF (0)
	) pipes_s1_agent_rsp_fifo (
		.clk               (System_PLL_sys_clk_clk),                        //       clk.clk
		.reset             (n0_from_hps_reset_reset_bridge_in_reset_reset), // clk_reset.reset
		.in_data           (pipes_s1_agent_rf_source_data),                 //        in.data
		.in_valid          (pipes_s1_agent_rf_source_valid),                //          .valid
		.in_ready          (pipes_s1_agent_rf_source_ready),                //          .ready
		.in_startofpacket  (pipes_s1_agent_rf_source_startofpacket),        //          .startofpacket
		.in_endofpacket    (pipes_s1_agent_rf_source_endofpacket),          //          .endofpacket
		.out_data          (pipes_s1_agent_rsp_fifo_out_data),              //       out.data
		.out_valid         (pipes_s1_agent_rsp_fifo_out_valid),             //          .valid
		.out_ready         (pipes_s1_agent_rsp_fifo_out_ready),             //          .ready
		.out_startofpacket (pipes_s1_agent_rsp_fifo_out_startofpacket),     //          .startofpacket
		.out_endofpacket   (pipes_s1_agent_rsp_fifo_out_endofpacket),       //          .endofpacket
		.csr_address       (2'b00),                                         // (terminated)
		.csr_read          (1'b0),                                          // (terminated)
		.csr_write         (1'b0),                                          // (terminated)
		.csr_readdata      (),                                              // (terminated)
		.csr_writedata     (32'b00000000000000000000000000000000),          // (terminated)
		.almost_full_data  (),                                              // (terminated)
		.almost_empty_data (),                                              // (terminated)
		.in_empty          (1'b0),                                          // (terminated)
		.out_empty         (),                                              // (terminated)
		.in_error          (1'b0),                                          // (terminated)
		.out_error         (),                                              // (terminated)
		.in_channel        (1'b0),                                          // (terminated)
		.out_channel       ()                                               // (terminated)
	);

	altera_avalon_sc_fifo #(
		.SYMBOLS_PER_BEAT    (1),
		.BITS_PER_SYMBOL     (34),
		.FIFO_DEPTH          (2),
		.CHANNEL_WIDTH       (0),
		.ERROR_WIDTH         (0),
		.USE_PACKETS         (0),
		.USE_FILL_LEVEL      (0),
		.EMPTY_LATENCY       (0),
		.USE_MEMORY_BLOCKS   (0),
		.USE_STORE_FORWARD   (0),
		.USE_ALMOST_FULL_IF  (0),
		.USE_ALMOST_EMPTY_IF (0)
	) pipes_s1_agent_rdata_fifo (
		.clk               (System_PLL_sys_clk_clk),                        //       clk.clk
		.reset             (n0_from_hps_reset_reset_bridge_in_reset_reset), // clk_reset.reset
		.in_data           (pipes_s1_agent_rdata_fifo_src_data),            //        in.data
		.in_valid          (pipes_s1_agent_rdata_fifo_src_valid),           //          .valid
		.in_ready          (pipes_s1_agent_rdata_fifo_src_ready),           //          .ready
		.out_data          (pipes_s1_agent_rdata_fifo_out_data),            //       out.data
		.out_valid         (pipes_s1_agent_rdata_fifo_out_valid),           //          .valid
		.out_ready         (pipes_s1_agent_rdata_fifo_out_ready),           //          .ready
		.csr_address       (2'b00),                                         // (terminated)
		.csr_read          (1'b0),                                          // (terminated)
		.csr_write         (1'b0),                                          // (terminated)
		.csr_readdata      (),                                              // (terminated)
		.csr_writedata     (32'b00000000000000000000000000000000),          // (terminated)
		.almost_full_data  (),                                              // (terminated)
		.almost_empty_data (),                                              // (terminated)
		.in_startofpacket  (1'b0),                                          // (terminated)
		.in_endofpacket    (1'b0),                                          // (terminated)
		.out_startofpacket (),                                              // (terminated)
		.out_endofpacket   (),                                              // (terminated)
		.in_empty          (1'b0),                                          // (terminated)
		.out_empty         (),                                              // (terminated)
		.in_error          (1'b0),                                          // (terminated)
		.out_error         (),                                              // (terminated)
		.in_channel        (1'b0),                                          // (terminated)
		.out_channel       ()                                               // (terminated)
	);

	altera_merlin_slave_agent #(
		.PKT_ORI_BURST_SIZE_H      (119),
		.PKT_ORI_BURST_SIZE_L      (117),
		.PKT_RESPONSE_STATUS_H     (116),
		.PKT_RESPONSE_STATUS_L     (115),
		.PKT_BURST_SIZE_H          (79),
		.PKT_BURST_SIZE_L          (77),
		.PKT_TRANS_LOCK            (61),
		.PKT_BEGIN_BURST           (84),
		.PKT_PROTECTION_H          (110),
		.PKT_PROTECTION_L          (108),
		.PKT_BURSTWRAP_H           (76),
		.PKT_BURSTWRAP_L           (70),
		.PKT_BYTE_CNT_H            (69),
		.PKT_BYTE_CNT_L            (63),
		.PKT_ADDR_H                (56),
		.PKT_ADDR_L                (36),
		.PKT_TRANS_COMPRESSED_READ (57),
		.PKT_TRANS_POSTED          (58),
		.PKT_TRANS_WRITE           (59),
		.PKT_TRANS_READ            (60),
		.PKT_DATA_H                (31),
		.PKT_DATA_L                (0),
		.PKT_BYTEEN_H              (35),
		.PKT_BYTEEN_L              (32),
		.PKT_SRC_ID_H              (90),
		.PKT_SRC_ID_L              (86),
		.PKT_DEST_ID_H             (95),
		.PKT_DEST_ID_L             (91),
		.PKT_SYMBOL_W              (8),
		.ST_CHANNEL_W              (27),
		.ST_DATA_W                 (120),
		.AVS_BURSTCOUNT_W          (3),
		.SUPPRESS_0_BYTEEN_CMD     (1),
		.PREVENT_FIFO_OVERFLOW     (1),
		.USE_READRESPONSE          (0),
		.USE_WRITERESPONSE         (0),
		.ECC_ENABLE                (0)
	) pixel_dma_addr_translation_slave_agent (
		.clk                     (System_PLL_sys_clk_clk),                                               //             clk.clk
		.reset                   (AV_Config_reset_reset_bridge_in_reset_reset),                          //       clk_reset.reset
		.m0_address              (pixel_dma_addr_translation_slave_agent_m0_address),                    //              m0.address
		.m0_burstcount           (pixel_dma_addr_translation_slave_agent_m0_burstcount),                 //                .burstcount
		.m0_byteenable           (pixel_dma_addr_translation_slave_agent_m0_byteenable),                 //                .byteenable
		.m0_debugaccess          (pixel_dma_addr_translation_slave_agent_m0_debugaccess),                //                .debugaccess
		.m0_lock                 (pixel_dma_addr_translation_slave_agent_m0_lock),                       //                .lock
		.m0_readdata             (pixel_dma_addr_translation_slave_agent_m0_readdata),                   //                .readdata
		.m0_readdatavalid        (pixel_dma_addr_translation_slave_agent_m0_readdatavalid),              //                .readdatavalid
		.m0_read                 (pixel_dma_addr_translation_slave_agent_m0_read),                       //                .read
		.m0_waitrequest          (pixel_dma_addr_translation_slave_agent_m0_waitrequest),                //                .waitrequest
		.m0_writedata            (pixel_dma_addr_translation_slave_agent_m0_writedata),                  //                .writedata
		.m0_write                (pixel_dma_addr_translation_slave_agent_m0_write),                      //                .write
		.rp_endofpacket          (pixel_dma_addr_translation_slave_agent_rp_endofpacket),                //              rp.endofpacket
		.rp_ready                (pixel_dma_addr_translation_slave_agent_rp_ready),                      //                .ready
		.rp_valid                (pixel_dma_addr_translation_slave_agent_rp_valid),                      //                .valid
		.rp_data                 (pixel_dma_addr_translation_slave_agent_rp_data),                       //                .data
		.rp_startofpacket        (pixel_dma_addr_translation_slave_agent_rp_startofpacket),              //                .startofpacket
		.cp_ready                (pixel_dma_addr_translation_slave_burst_adapter_source0_ready),         //              cp.ready
		.cp_valid                (pixel_dma_addr_translation_slave_burst_adapter_source0_valid),         //                .valid
		.cp_data                 (pixel_dma_addr_translation_slave_burst_adapter_source0_data),          //                .data
		.cp_startofpacket        (pixel_dma_addr_translation_slave_burst_adapter_source0_startofpacket), //                .startofpacket
		.cp_endofpacket          (pixel_dma_addr_translation_slave_burst_adapter_source0_endofpacket),   //                .endofpacket
		.cp_channel              (pixel_dma_addr_translation_slave_burst_adapter_source0_channel),       //                .channel
		.rf_sink_ready           (pixel_dma_addr_translation_slave_agent_rsp_fifo_out_ready),            //         rf_sink.ready
		.rf_sink_valid           (pixel_dma_addr_translation_slave_agent_rsp_fifo_out_valid),            //                .valid
		.rf_sink_startofpacket   (pixel_dma_addr_translation_slave_agent_rsp_fifo_out_startofpacket),    //                .startofpacket
		.rf_sink_endofpacket     (pixel_dma_addr_translation_slave_agent_rsp_fifo_out_endofpacket),      //                .endofpacket
		.rf_sink_data            (pixel_dma_addr_translation_slave_agent_rsp_fifo_out_data),             //                .data
		.rf_source_ready         (pixel_dma_addr_translation_slave_agent_rf_source_ready),               //       rf_source.ready
		.rf_source_valid         (pixel_dma_addr_translation_slave_agent_rf_source_valid),               //                .valid
		.rf_source_startofpacket (pixel_dma_addr_translation_slave_agent_rf_source_startofpacket),       //                .startofpacket
		.rf_source_endofpacket   (pixel_dma_addr_translation_slave_agent_rf_source_endofpacket),         //                .endofpacket
		.rf_source_data          (pixel_dma_addr_translation_slave_agent_rf_source_data),                //                .data
		.rdata_fifo_sink_ready   (avalon_st_adapter_026_out_0_ready),                                    // rdata_fifo_sink.ready
		.rdata_fifo_sink_valid   (avalon_st_adapter_026_out_0_valid),                                    //                .valid
		.rdata_fifo_sink_data    (avalon_st_adapter_026_out_0_data),                                     //                .data
		.rdata_fifo_sink_error   (avalon_st_adapter_026_out_0_error),                                    //                .error
		.rdata_fifo_src_ready    (pixel_dma_addr_translation_slave_agent_rdata_fifo_src_ready),          //  rdata_fifo_src.ready
		.rdata_fifo_src_valid    (pixel_dma_addr_translation_slave_agent_rdata_fifo_src_valid),          //                .valid
		.rdata_fifo_src_data     (pixel_dma_addr_translation_slave_agent_rdata_fifo_src_data),           //                .data
		.m0_response             (2'b00),                                                                //     (terminated)
		.m0_writeresponsevalid   (1'b0)                                                                  //     (terminated)
	);

	altera_avalon_sc_fifo #(
		.SYMBOLS_PER_BEAT    (1),
		.BITS_PER_SYMBOL     (121),
		.FIFO_DEPTH          (2),
		.CHANNEL_WIDTH       (0),
		.ERROR_WIDTH         (0),
		.USE_PACKETS         (1),
		.USE_FILL_LEVEL      (0),
		.EMPTY_LATENCY       (1),
		.USE_MEMORY_BLOCKS   (0),
		.USE_STORE_FORWARD   (0),
		.USE_ALMOST_FULL_IF  (0),
		.USE_ALMOST_EMPTY_IF (0)
	) pixel_dma_addr_translation_slave_agent_rsp_fifo (
		.clk               (System_PLL_sys_clk_clk),                                            //       clk.clk
		.reset             (AV_Config_reset_reset_bridge_in_reset_reset),                       // clk_reset.reset
		.in_data           (pixel_dma_addr_translation_slave_agent_rf_source_data),             //        in.data
		.in_valid          (pixel_dma_addr_translation_slave_agent_rf_source_valid),            //          .valid
		.in_ready          (pixel_dma_addr_translation_slave_agent_rf_source_ready),            //          .ready
		.in_startofpacket  (pixel_dma_addr_translation_slave_agent_rf_source_startofpacket),    //          .startofpacket
		.in_endofpacket    (pixel_dma_addr_translation_slave_agent_rf_source_endofpacket),      //          .endofpacket
		.out_data          (pixel_dma_addr_translation_slave_agent_rsp_fifo_out_data),          //       out.data
		.out_valid         (pixel_dma_addr_translation_slave_agent_rsp_fifo_out_valid),         //          .valid
		.out_ready         (pixel_dma_addr_translation_slave_agent_rsp_fifo_out_ready),         //          .ready
		.out_startofpacket (pixel_dma_addr_translation_slave_agent_rsp_fifo_out_startofpacket), //          .startofpacket
		.out_endofpacket   (pixel_dma_addr_translation_slave_agent_rsp_fifo_out_endofpacket),   //          .endofpacket
		.csr_address       (2'b00),                                                             // (terminated)
		.csr_read          (1'b0),                                                              // (terminated)
		.csr_write         (1'b0),                                                              // (terminated)
		.csr_readdata      (),                                                                  // (terminated)
		.csr_writedata     (32'b00000000000000000000000000000000),                              // (terminated)
		.almost_full_data  (),                                                                  // (terminated)
		.almost_empty_data (),                                                                  // (terminated)
		.in_empty          (1'b0),                                                              // (terminated)
		.out_empty         (),                                                                  // (terminated)
		.in_error          (1'b0),                                                              // (terminated)
		.out_error         (),                                                                  // (terminated)
		.in_channel        (1'b0),                                                              // (terminated)
		.out_channel       ()                                                                   // (terminated)
	);

	altera_avalon_sc_fifo #(
		.SYMBOLS_PER_BEAT    (1),
		.BITS_PER_SYMBOL     (34),
		.FIFO_DEPTH          (2),
		.CHANNEL_WIDTH       (0),
		.ERROR_WIDTH         (0),
		.USE_PACKETS         (0),
		.USE_FILL_LEVEL      (0),
		.EMPTY_LATENCY       (0),
		.USE_MEMORY_BLOCKS   (0),
		.USE_STORE_FORWARD   (0),
		.USE_ALMOST_FULL_IF  (0),
		.USE_ALMOST_EMPTY_IF (0)
	) pixel_dma_addr_translation_slave_agent_rdata_fifo (
		.clk               (System_PLL_sys_clk_clk),                                      //       clk.clk
		.reset             (AV_Config_reset_reset_bridge_in_reset_reset),                 // clk_reset.reset
		.in_data           (pixel_dma_addr_translation_slave_agent_rdata_fifo_src_data),  //        in.data
		.in_valid          (pixel_dma_addr_translation_slave_agent_rdata_fifo_src_valid), //          .valid
		.in_ready          (pixel_dma_addr_translation_slave_agent_rdata_fifo_src_ready), //          .ready
		.out_data          (pixel_dma_addr_translation_slave_agent_rdata_fifo_out_data),  //       out.data
		.out_valid         (pixel_dma_addr_translation_slave_agent_rdata_fifo_out_valid), //          .valid
		.out_ready         (pixel_dma_addr_translation_slave_agent_rdata_fifo_out_ready), //          .ready
		.csr_address       (2'b00),                                                       // (terminated)
		.csr_read          (1'b0),                                                        // (terminated)
		.csr_write         (1'b0),                                                        // (terminated)
		.csr_readdata      (),                                                            // (terminated)
		.csr_writedata     (32'b00000000000000000000000000000000),                        // (terminated)
		.almost_full_data  (),                                                            // (terminated)
		.almost_empty_data (),                                                            // (terminated)
		.in_startofpacket  (1'b0),                                                        // (terminated)
		.in_endofpacket    (1'b0),                                                        // (terminated)
		.out_startofpacket (),                                                            // (terminated)
		.out_endofpacket   (),                                                            // (terminated)
		.in_empty          (1'b0),                                                        // (terminated)
		.out_empty         (),                                                            // (terminated)
		.in_error          (1'b0),                                                        // (terminated)
		.out_error         (),                                                            // (terminated)
		.in_channel        (1'b0),                                                        // (terminated)
		.out_channel       ()                                                             // (terminated)
	);

	Computer_System_mm_interconnect_1_router router (
		.sink_ready         (arm_a9_hps_h2f_lw_axi_master_agent_write_cp_ready),                        //      sink.ready
		.sink_valid         (arm_a9_hps_h2f_lw_axi_master_agent_write_cp_valid),                        //          .valid
		.sink_data          (arm_a9_hps_h2f_lw_axi_master_agent_write_cp_data),                         //          .data
		.sink_startofpacket (arm_a9_hps_h2f_lw_axi_master_agent_write_cp_startofpacket),                //          .startofpacket
		.sink_endofpacket   (arm_a9_hps_h2f_lw_axi_master_agent_write_cp_endofpacket),                  //          .endofpacket
		.clk                (System_PLL_sys_clk_clk),                                                   //       clk.clk
		.reset              (ARM_A9_HPS_h2f_lw_axi_master_agent_clk_reset_reset_bridge_in_reset_reset), // clk_reset.reset
		.src_ready          (router_src_ready),                                                         //       src.ready
		.src_valid          (router_src_valid),                                                         //          .valid
		.src_data           (router_src_data),                                                          //          .data
		.src_channel        (router_src_channel),                                                       //          .channel
		.src_startofpacket  (router_src_startofpacket),                                                 //          .startofpacket
		.src_endofpacket    (router_src_endofpacket)                                                    //          .endofpacket
	);

	Computer_System_mm_interconnect_1_router router_001 (
		.sink_ready         (arm_a9_hps_h2f_lw_axi_master_agent_read_cp_ready),                         //      sink.ready
		.sink_valid         (arm_a9_hps_h2f_lw_axi_master_agent_read_cp_valid),                         //          .valid
		.sink_data          (arm_a9_hps_h2f_lw_axi_master_agent_read_cp_data),                          //          .data
		.sink_startofpacket (arm_a9_hps_h2f_lw_axi_master_agent_read_cp_startofpacket),                 //          .startofpacket
		.sink_endofpacket   (arm_a9_hps_h2f_lw_axi_master_agent_read_cp_endofpacket),                   //          .endofpacket
		.clk                (System_PLL_sys_clk_clk),                                                   //       clk.clk
		.reset              (ARM_A9_HPS_h2f_lw_axi_master_agent_clk_reset_reset_bridge_in_reset_reset), // clk_reset.reset
		.src_ready          (router_001_src_ready),                                                     //       src.ready
		.src_valid          (router_001_src_valid),                                                     //          .valid
		.src_data           (router_001_src_data),                                                      //          .data
		.src_channel        (router_001_src_channel),                                                   //          .channel
		.src_startofpacket  (router_001_src_startofpacket),                                             //          .startofpacket
		.src_endofpacket    (router_001_src_endofpacket)                                                //          .endofpacket
	);

	Computer_System_mm_interconnect_1_router_002 router_002 (
		.sink_ready         (av_config_avalon_av_config_slave_agent_rp_ready),         //      sink.ready
		.sink_valid         (av_config_avalon_av_config_slave_agent_rp_valid),         //          .valid
		.sink_data          (av_config_avalon_av_config_slave_agent_rp_data),          //          .data
		.sink_startofpacket (av_config_avalon_av_config_slave_agent_rp_startofpacket), //          .startofpacket
		.sink_endofpacket   (av_config_avalon_av_config_slave_agent_rp_endofpacket),   //          .endofpacket
		.clk                (System_PLL_sys_clk_clk),                                  //       clk.clk
		.reset              (AV_Config_reset_reset_bridge_in_reset_reset),             // clk_reset.reset
		.src_ready          (router_002_src_ready),                                    //       src.ready
		.src_valid          (router_002_src_valid),                                    //          .valid
		.src_data           (router_002_src_data),                                     //          .data
		.src_channel        (router_002_src_channel),                                  //          .channel
		.src_startofpacket  (router_002_src_startofpacket),                            //          .startofpacket
		.src_endofpacket    (router_002_src_endofpacket)                               //          .endofpacket
	);

	Computer_System_mm_interconnect_1_router_002 router_003 (
		.sink_ready         (vga_subsystem_char_buffer_control_slave_agent_rp_ready),         //      sink.ready
		.sink_valid         (vga_subsystem_char_buffer_control_slave_agent_rp_valid),         //          .valid
		.sink_data          (vga_subsystem_char_buffer_control_slave_agent_rp_data),          //          .data
		.sink_startofpacket (vga_subsystem_char_buffer_control_slave_agent_rp_startofpacket), //          .startofpacket
		.sink_endofpacket   (vga_subsystem_char_buffer_control_slave_agent_rp_endofpacket),   //          .endofpacket
		.clk                (System_PLL_sys_clk_clk),                                         //       clk.clk
		.reset              (AV_Config_reset_reset_bridge_in_reset_reset),                    // clk_reset.reset
		.src_ready          (router_003_src_ready),                                           //       src.ready
		.src_valid          (router_003_src_valid),                                           //          .valid
		.src_data           (router_003_src_data),                                            //          .data
		.src_channel        (router_003_src_channel),                                         //          .channel
		.src_startofpacket  (router_003_src_startofpacket),                                   //          .startofpacket
		.src_endofpacket    (router_003_src_endofpacket)                                      //          .endofpacket
	);

	Computer_System_mm_interconnect_1_router_002 router_004 (
		.sink_ready         (n0_from_hps_s1_agent_rp_ready),                 //      sink.ready
		.sink_valid         (n0_from_hps_s1_agent_rp_valid),                 //          .valid
		.sink_data          (n0_from_hps_s1_agent_rp_data),                  //          .data
		.sink_startofpacket (n0_from_hps_s1_agent_rp_startofpacket),         //          .startofpacket
		.sink_endofpacket   (n0_from_hps_s1_agent_rp_endofpacket),           //          .endofpacket
		.clk                (System_PLL_sys_clk_clk),                        //       clk.clk
		.reset              (n0_from_hps_reset_reset_bridge_in_reset_reset), // clk_reset.reset
		.src_ready          (router_004_src_ready),                          //       src.ready
		.src_valid          (router_004_src_valid),                          //          .valid
		.src_data           (router_004_src_data),                           //          .data
		.src_channel        (router_004_src_channel),                        //          .channel
		.src_startofpacket  (router_004_src_startofpacket),                  //          .startofpacket
		.src_endofpacket    (router_004_src_endofpacket)                     //          .endofpacket
	);

	Computer_System_mm_interconnect_1_router_002 router_005 (
		.sink_ready         (nn_from_hps_s1_agent_rp_ready),                 //      sink.ready
		.sink_valid         (nn_from_hps_s1_agent_rp_valid),                 //          .valid
		.sink_data          (nn_from_hps_s1_agent_rp_data),                  //          .data
		.sink_startofpacket (nn_from_hps_s1_agent_rp_startofpacket),         //          .startofpacket
		.sink_endofpacket   (nn_from_hps_s1_agent_rp_endofpacket),           //          .endofpacket
		.clk                (System_PLL_sys_clk_clk),                        //       clk.clk
		.reset              (n0_from_hps_reset_reset_bridge_in_reset_reset), // clk_reset.reset
		.src_ready          (router_005_src_ready),                          //       src.ready
		.src_valid          (router_005_src_valid),                          //          .valid
		.src_data           (router_005_src_data),                           //          .data
		.src_channel        (router_005_src_channel),                        //          .channel
		.src_startofpacket  (router_005_src_startofpacket),                  //          .startofpacket
		.src_endofpacket    (router_005_src_endofpacket)                     //          .endofpacket
	);

	Computer_System_mm_interconnect_1_router_002 router_006 (
		.sink_ready         (ns_from_hps_s1_agent_rp_ready),                 //      sink.ready
		.sink_valid         (ns_from_hps_s1_agent_rp_valid),                 //          .valid
		.sink_data          (ns_from_hps_s1_agent_rp_data),                  //          .data
		.sink_startofpacket (ns_from_hps_s1_agent_rp_startofpacket),         //          .startofpacket
		.sink_endofpacket   (ns_from_hps_s1_agent_rp_endofpacket),           //          .endofpacket
		.clk                (System_PLL_sys_clk_clk),                        //       clk.clk
		.reset              (n0_from_hps_reset_reset_bridge_in_reset_reset), // clk_reset.reset
		.src_ready          (router_006_src_ready),                          //       src.ready
		.src_valid          (router_006_src_valid),                          //          .valid
		.src_data           (router_006_src_data),                           //          .data
		.src_channel        (router_006_src_channel),                        //          .channel
		.src_startofpacket  (router_006_src_startofpacket),                  //          .startofpacket
		.src_endofpacket    (router_006_src_endofpacket)                     //          .endofpacket
	);

	Computer_System_mm_interconnect_1_router_002 router_007 (
		.sink_ready         (nw_from_hps_s1_agent_rp_ready),                 //      sink.ready
		.sink_valid         (nw_from_hps_s1_agent_rp_valid),                 //          .valid
		.sink_data          (nw_from_hps_s1_agent_rp_data),                  //          .data
		.sink_startofpacket (nw_from_hps_s1_agent_rp_startofpacket),         //          .startofpacket
		.sink_endofpacket   (nw_from_hps_s1_agent_rp_endofpacket),           //          .endofpacket
		.clk                (System_PLL_sys_clk_clk),                        //       clk.clk
		.reset              (n0_from_hps_reset_reset_bridge_in_reset_reset), // clk_reset.reset
		.src_ready          (router_007_src_ready),                          //       src.ready
		.src_valid          (router_007_src_valid),                          //          .valid
		.src_data           (router_007_src_data),                           //          .data
		.src_channel        (router_007_src_channel),                        //          .channel
		.src_startofpacket  (router_007_src_startofpacket),                  //          .startofpacket
		.src_endofpacket    (router_007_src_endofpacket)                     //          .endofpacket
	);

	Computer_System_mm_interconnect_1_router_002 router_008 (
		.sink_ready         (ne_from_hps_s1_agent_rp_ready),                 //      sink.ready
		.sink_valid         (ne_from_hps_s1_agent_rp_valid),                 //          .valid
		.sink_data          (ne_from_hps_s1_agent_rp_data),                  //          .data
		.sink_startofpacket (ne_from_hps_s1_agent_rp_startofpacket),         //          .startofpacket
		.sink_endofpacket   (ne_from_hps_s1_agent_rp_endofpacket),           //          .endofpacket
		.clk                (System_PLL_sys_clk_clk),                        //       clk.clk
		.reset              (n0_from_hps_reset_reset_bridge_in_reset_reset), // clk_reset.reset
		.src_ready          (router_008_src_ready),                          //       src.ready
		.src_valid          (router_008_src_valid),                          //          .valid
		.src_data           (router_008_src_data),                           //          .data
		.src_channel        (router_008_src_channel),                        //          .channel
		.src_startofpacket  (router_008_src_startofpacket),                  //          .startofpacket
		.src_endofpacket    (router_008_src_endofpacket)                     //          .endofpacket
	);

	Computer_System_mm_interconnect_1_router_002 router_009 (
		.sink_ready         (nnw_from_hps_s1_agent_rp_ready),                //      sink.ready
		.sink_valid         (nnw_from_hps_s1_agent_rp_valid),                //          .valid
		.sink_data          (nnw_from_hps_s1_agent_rp_data),                 //          .data
		.sink_startofpacket (nnw_from_hps_s1_agent_rp_startofpacket),        //          .startofpacket
		.sink_endofpacket   (nnw_from_hps_s1_agent_rp_endofpacket),          //          .endofpacket
		.clk                (System_PLL_sys_clk_clk),                        //       clk.clk
		.reset              (n0_from_hps_reset_reset_bridge_in_reset_reset), // clk_reset.reset
		.src_ready          (router_009_src_ready),                          //       src.ready
		.src_valid          (router_009_src_valid),                          //          .valid
		.src_data           (router_009_src_data),                           //          .data
		.src_channel        (router_009_src_channel),                        //          .channel
		.src_startofpacket  (router_009_src_startofpacket),                  //          .startofpacket
		.src_endofpacket    (router_009_src_endofpacket)                     //          .endofpacket
	);

	Computer_System_mm_interconnect_1_router_002 router_010 (
		.sink_ready         (nne_from_hps_s1_agent_rp_ready),                //      sink.ready
		.sink_valid         (nne_from_hps_s1_agent_rp_valid),                //          .valid
		.sink_data          (nne_from_hps_s1_agent_rp_data),                 //          .data
		.sink_startofpacket (nne_from_hps_s1_agent_rp_startofpacket),        //          .startofpacket
		.sink_endofpacket   (nne_from_hps_s1_agent_rp_endofpacket),          //          .endofpacket
		.clk                (System_PLL_sys_clk_clk),                        //       clk.clk
		.reset              (n0_from_hps_reset_reset_bridge_in_reset_reset), // clk_reset.reset
		.src_ready          (router_010_src_ready),                          //       src.ready
		.src_valid          (router_010_src_valid),                          //          .valid
		.src_data           (router_010_src_data),                           //          .data
		.src_channel        (router_010_src_channel),                        //          .channel
		.src_startofpacket  (router_010_src_startofpacket),                  //          .startofpacket
		.src_endofpacket    (router_010_src_endofpacket)                     //          .endofpacket
	);

	Computer_System_mm_interconnect_1_router_002 router_011 (
		.sink_ready         (nsw_from_hps_s1_agent_rp_ready),                //      sink.ready
		.sink_valid         (nsw_from_hps_s1_agent_rp_valid),                //          .valid
		.sink_data          (nsw_from_hps_s1_agent_rp_data),                 //          .data
		.sink_startofpacket (nsw_from_hps_s1_agent_rp_startofpacket),        //          .startofpacket
		.sink_endofpacket   (nsw_from_hps_s1_agent_rp_endofpacket),          //          .endofpacket
		.clk                (System_PLL_sys_clk_clk),                        //       clk.clk
		.reset              (n0_from_hps_reset_reset_bridge_in_reset_reset), // clk_reset.reset
		.src_ready          (router_011_src_ready),                          //       src.ready
		.src_valid          (router_011_src_valid),                          //          .valid
		.src_data           (router_011_src_data),                           //          .data
		.src_channel        (router_011_src_channel),                        //          .channel
		.src_startofpacket  (router_011_src_startofpacket),                  //          .startofpacket
		.src_endofpacket    (router_011_src_endofpacket)                     //          .endofpacket
	);

	Computer_System_mm_interconnect_1_router_002 router_012 (
		.sink_ready         (nse_from_hps_s1_agent_rp_ready),                //      sink.ready
		.sink_valid         (nse_from_hps_s1_agent_rp_valid),                //          .valid
		.sink_data          (nse_from_hps_s1_agent_rp_data),                 //          .data
		.sink_startofpacket (nse_from_hps_s1_agent_rp_startofpacket),        //          .startofpacket
		.sink_endofpacket   (nse_from_hps_s1_agent_rp_endofpacket),          //          .endofpacket
		.clk                (System_PLL_sys_clk_clk),                        //       clk.clk
		.reset              (n0_from_hps_reset_reset_bridge_in_reset_reset), // clk_reset.reset
		.src_ready          (router_012_src_ready),                          //       src.ready
		.src_valid          (router_012_src_valid),                          //          .valid
		.src_data           (router_012_src_data),                           //          .data
		.src_channel        (router_012_src_channel),                        //          .channel
		.src_startofpacket  (router_012_src_startofpacket),                  //          .startofpacket
		.src_endofpacket    (router_012_src_endofpacket)                     //          .endofpacket
	);

	Computer_System_mm_interconnect_1_router_002 router_013 (
		.sink_ready         (n0_from_fpga_s1_agent_rp_ready),                //      sink.ready
		.sink_valid         (n0_from_fpga_s1_agent_rp_valid),                //          .valid
		.sink_data          (n0_from_fpga_s1_agent_rp_data),                 //          .data
		.sink_startofpacket (n0_from_fpga_s1_agent_rp_startofpacket),        //          .startofpacket
		.sink_endofpacket   (n0_from_fpga_s1_agent_rp_endofpacket),          //          .endofpacket
		.clk                (System_PLL_sys_clk_clk),                        //       clk.clk
		.reset              (n0_from_hps_reset_reset_bridge_in_reset_reset), // clk_reset.reset
		.src_ready          (router_013_src_ready),                          //       src.ready
		.src_valid          (router_013_src_valid),                          //          .valid
		.src_data           (router_013_src_data),                           //          .data
		.src_channel        (router_013_src_channel),                        //          .channel
		.src_startofpacket  (router_013_src_startofpacket),                  //          .startofpacket
		.src_endofpacket    (router_013_src_endofpacket)                     //          .endofpacket
	);

	Computer_System_mm_interconnect_1_router_002 router_014 (
		.sink_ready         (nn_from_fpga_s1_agent_rp_ready),                //      sink.ready
		.sink_valid         (nn_from_fpga_s1_agent_rp_valid),                //          .valid
		.sink_data          (nn_from_fpga_s1_agent_rp_data),                 //          .data
		.sink_startofpacket (nn_from_fpga_s1_agent_rp_startofpacket),        //          .startofpacket
		.sink_endofpacket   (nn_from_fpga_s1_agent_rp_endofpacket),          //          .endofpacket
		.clk                (System_PLL_sys_clk_clk),                        //       clk.clk
		.reset              (n0_from_hps_reset_reset_bridge_in_reset_reset), // clk_reset.reset
		.src_ready          (router_014_src_ready),                          //       src.ready
		.src_valid          (router_014_src_valid),                          //          .valid
		.src_data           (router_014_src_data),                           //          .data
		.src_channel        (router_014_src_channel),                        //          .channel
		.src_startofpacket  (router_014_src_startofpacket),                  //          .startofpacket
		.src_endofpacket    (router_014_src_endofpacket)                     //          .endofpacket
	);

	Computer_System_mm_interconnect_1_router_002 router_015 (
		.sink_ready         (ns_from_fpga_s1_agent_rp_ready),                //      sink.ready
		.sink_valid         (ns_from_fpga_s1_agent_rp_valid),                //          .valid
		.sink_data          (ns_from_fpga_s1_agent_rp_data),                 //          .data
		.sink_startofpacket (ns_from_fpga_s1_agent_rp_startofpacket),        //          .startofpacket
		.sink_endofpacket   (ns_from_fpga_s1_agent_rp_endofpacket),          //          .endofpacket
		.clk                (System_PLL_sys_clk_clk),                        //       clk.clk
		.reset              (n0_from_hps_reset_reset_bridge_in_reset_reset), // clk_reset.reset
		.src_ready          (router_015_src_ready),                          //       src.ready
		.src_valid          (router_015_src_valid),                          //          .valid
		.src_data           (router_015_src_data),                           //          .data
		.src_channel        (router_015_src_channel),                        //          .channel
		.src_startofpacket  (router_015_src_startofpacket),                  //          .startofpacket
		.src_endofpacket    (router_015_src_endofpacket)                     //          .endofpacket
	);

	Computer_System_mm_interconnect_1_router_002 router_016 (
		.sink_ready         (nw_from_fpga_s1_agent_rp_ready),                //      sink.ready
		.sink_valid         (nw_from_fpga_s1_agent_rp_valid),                //          .valid
		.sink_data          (nw_from_fpga_s1_agent_rp_data),                 //          .data
		.sink_startofpacket (nw_from_fpga_s1_agent_rp_startofpacket),        //          .startofpacket
		.sink_endofpacket   (nw_from_fpga_s1_agent_rp_endofpacket),          //          .endofpacket
		.clk                (System_PLL_sys_clk_clk),                        //       clk.clk
		.reset              (n0_from_hps_reset_reset_bridge_in_reset_reset), // clk_reset.reset
		.src_ready          (router_016_src_ready),                          //       src.ready
		.src_valid          (router_016_src_valid),                          //          .valid
		.src_data           (router_016_src_data),                           //          .data
		.src_channel        (router_016_src_channel),                        //          .channel
		.src_startofpacket  (router_016_src_startofpacket),                  //          .startofpacket
		.src_endofpacket    (router_016_src_endofpacket)                     //          .endofpacket
	);

	Computer_System_mm_interconnect_1_router_002 router_017 (
		.sink_ready         (ne_from_fpga_s1_agent_rp_ready),                //      sink.ready
		.sink_valid         (ne_from_fpga_s1_agent_rp_valid),                //          .valid
		.sink_data          (ne_from_fpga_s1_agent_rp_data),                 //          .data
		.sink_startofpacket (ne_from_fpga_s1_agent_rp_startofpacket),        //          .startofpacket
		.sink_endofpacket   (ne_from_fpga_s1_agent_rp_endofpacket),          //          .endofpacket
		.clk                (System_PLL_sys_clk_clk),                        //       clk.clk
		.reset              (n0_from_hps_reset_reset_bridge_in_reset_reset), // clk_reset.reset
		.src_ready          (router_017_src_ready),                          //       src.ready
		.src_valid          (router_017_src_valid),                          //          .valid
		.src_data           (router_017_src_data),                           //          .data
		.src_channel        (router_017_src_channel),                        //          .channel
		.src_startofpacket  (router_017_src_startofpacket),                  //          .startofpacket
		.src_endofpacket    (router_017_src_endofpacket)                     //          .endofpacket
	);

	Computer_System_mm_interconnect_1_router_002 router_018 (
		.sink_ready         (nnw_from_fpga_s1_agent_rp_ready),               //      sink.ready
		.sink_valid         (nnw_from_fpga_s1_agent_rp_valid),               //          .valid
		.sink_data          (nnw_from_fpga_s1_agent_rp_data),                //          .data
		.sink_startofpacket (nnw_from_fpga_s1_agent_rp_startofpacket),       //          .startofpacket
		.sink_endofpacket   (nnw_from_fpga_s1_agent_rp_endofpacket),         //          .endofpacket
		.clk                (System_PLL_sys_clk_clk),                        //       clk.clk
		.reset              (n0_from_hps_reset_reset_bridge_in_reset_reset), // clk_reset.reset
		.src_ready          (router_018_src_ready),                          //       src.ready
		.src_valid          (router_018_src_valid),                          //          .valid
		.src_data           (router_018_src_data),                           //          .data
		.src_channel        (router_018_src_channel),                        //          .channel
		.src_startofpacket  (router_018_src_startofpacket),                  //          .startofpacket
		.src_endofpacket    (router_018_src_endofpacket)                     //          .endofpacket
	);

	Computer_System_mm_interconnect_1_router_002 router_019 (
		.sink_ready         (nne_from_fpga_s1_agent_rp_ready),               //      sink.ready
		.sink_valid         (nne_from_fpga_s1_agent_rp_valid),               //          .valid
		.sink_data          (nne_from_fpga_s1_agent_rp_data),                //          .data
		.sink_startofpacket (nne_from_fpga_s1_agent_rp_startofpacket),       //          .startofpacket
		.sink_endofpacket   (nne_from_fpga_s1_agent_rp_endofpacket),         //          .endofpacket
		.clk                (System_PLL_sys_clk_clk),                        //       clk.clk
		.reset              (n0_from_hps_reset_reset_bridge_in_reset_reset), // clk_reset.reset
		.src_ready          (router_019_src_ready),                          //       src.ready
		.src_valid          (router_019_src_valid),                          //          .valid
		.src_data           (router_019_src_data),                           //          .data
		.src_channel        (router_019_src_channel),                        //          .channel
		.src_startofpacket  (router_019_src_startofpacket),                  //          .startofpacket
		.src_endofpacket    (router_019_src_endofpacket)                     //          .endofpacket
	);

	Computer_System_mm_interconnect_1_router_002 router_020 (
		.sink_ready         (nsw_from_fpga_s1_agent_rp_ready),               //      sink.ready
		.sink_valid         (nsw_from_fpga_s1_agent_rp_valid),               //          .valid
		.sink_data          (nsw_from_fpga_s1_agent_rp_data),                //          .data
		.sink_startofpacket (nsw_from_fpga_s1_agent_rp_startofpacket),       //          .startofpacket
		.sink_endofpacket   (nsw_from_fpga_s1_agent_rp_endofpacket),         //          .endofpacket
		.clk                (System_PLL_sys_clk_clk),                        //       clk.clk
		.reset              (n0_from_hps_reset_reset_bridge_in_reset_reset), // clk_reset.reset
		.src_ready          (router_020_src_ready),                          //       src.ready
		.src_valid          (router_020_src_valid),                          //          .valid
		.src_data           (router_020_src_data),                           //          .data
		.src_channel        (router_020_src_channel),                        //          .channel
		.src_startofpacket  (router_020_src_startofpacket),                  //          .startofpacket
		.src_endofpacket    (router_020_src_endofpacket)                     //          .endofpacket
	);

	Computer_System_mm_interconnect_1_router_002 router_021 (
		.sink_ready         (nse_from_fpga_s1_agent_rp_ready),               //      sink.ready
		.sink_valid         (nse_from_fpga_s1_agent_rp_valid),               //          .valid
		.sink_data          (nse_from_fpga_s1_agent_rp_data),                //          .data
		.sink_startofpacket (nse_from_fpga_s1_agent_rp_startofpacket),       //          .startofpacket
		.sink_endofpacket   (nse_from_fpga_s1_agent_rp_endofpacket),         //          .endofpacket
		.clk                (System_PLL_sys_clk_clk),                        //       clk.clk
		.reset              (n0_from_hps_reset_reset_bridge_in_reset_reset), // clk_reset.reset
		.src_ready          (router_021_src_ready),                          //       src.ready
		.src_valid          (router_021_src_valid),                          //          .valid
		.src_data           (router_021_src_data),                           //          .data
		.src_channel        (router_021_src_channel),                        //          .channel
		.src_startofpacket  (router_021_src_startofpacket),                  //          .startofpacket
		.src_endofpacket    (router_021_src_endofpacket)                     //          .endofpacket
	);

	Computer_System_mm_interconnect_1_router_002 router_022 (
		.sink_ready         (one9th_s1_agent_rp_ready),                      //      sink.ready
		.sink_valid         (one9th_s1_agent_rp_valid),                      //          .valid
		.sink_data          (one9th_s1_agent_rp_data),                       //          .data
		.sink_startofpacket (one9th_s1_agent_rp_startofpacket),              //          .startofpacket
		.sink_endofpacket   (one9th_s1_agent_rp_endofpacket),                //          .endofpacket
		.clk                (System_PLL_sys_clk_clk),                        //       clk.clk
		.reset              (n0_from_hps_reset_reset_bridge_in_reset_reset), // clk_reset.reset
		.src_ready          (router_022_src_ready),                          //       src.ready
		.src_valid          (router_022_src_valid),                          //          .valid
		.src_data           (router_022_src_data),                           //          .data
		.src_channel        (router_022_src_channel),                        //          .channel
		.src_startofpacket  (router_022_src_startofpacket),                  //          .startofpacket
		.src_endofpacket    (router_022_src_endofpacket)                     //          .endofpacket
	);

	Computer_System_mm_interconnect_1_router_002 router_023 (
		.sink_ready         (one36th_s1_agent_rp_ready),                     //      sink.ready
		.sink_valid         (one36th_s1_agent_rp_valid),                     //          .valid
		.sink_data          (one36th_s1_agent_rp_data),                      //          .data
		.sink_startofpacket (one36th_s1_agent_rp_startofpacket),             //          .startofpacket
		.sink_endofpacket   (one36th_s1_agent_rp_endofpacket),               //          .endofpacket
		.clk                (System_PLL_sys_clk_clk),                        //       clk.clk
		.reset              (n0_from_hps_reset_reset_bridge_in_reset_reset), // clk_reset.reset
		.src_ready          (router_023_src_ready),                          //       src.ready
		.src_valid          (router_023_src_valid),                          //          .valid
		.src_data           (router_023_src_data),                           //          .data
		.src_channel        (router_023_src_channel),                        //          .channel
		.src_startofpacket  (router_023_src_startofpacket),                  //          .startofpacket
		.src_endofpacket    (router_023_src_endofpacket)                     //          .endofpacket
	);

	Computer_System_mm_interconnect_1_router_002 router_024 (
		.sink_ready         (omega_s1_agent_rp_ready),                       //      sink.ready
		.sink_valid         (omega_s1_agent_rp_valid),                       //          .valid
		.sink_data          (omega_s1_agent_rp_data),                        //          .data
		.sink_startofpacket (omega_s1_agent_rp_startofpacket),               //          .startofpacket
		.sink_endofpacket   (omega_s1_agent_rp_endofpacket),                 //          .endofpacket
		.clk                (System_PLL_sys_clk_clk),                        //       clk.clk
		.reset              (n0_from_hps_reset_reset_bridge_in_reset_reset), // clk_reset.reset
		.src_ready          (router_024_src_ready),                          //       src.ready
		.src_valid          (router_024_src_valid),                          //          .valid
		.src_data           (router_024_src_data),                           //          .data
		.src_channel        (router_024_src_channel),                        //          .channel
		.src_startofpacket  (router_024_src_startofpacket),                  //          .startofpacket
		.src_endofpacket    (router_024_src_endofpacket)                     //          .endofpacket
	);

	Computer_System_mm_interconnect_1_router_002 router_025 (
		.sink_ready         (ux_s1_agent_rp_ready),                          //      sink.ready
		.sink_valid         (ux_s1_agent_rp_valid),                          //          .valid
		.sink_data          (ux_s1_agent_rp_data),                           //          .data
		.sink_startofpacket (ux_s1_agent_rp_startofpacket),                  //          .startofpacket
		.sink_endofpacket   (ux_s1_agent_rp_endofpacket),                    //          .endofpacket
		.clk                (System_PLL_sys_clk_clk),                        //       clk.clk
		.reset              (n0_from_hps_reset_reset_bridge_in_reset_reset), // clk_reset.reset
		.src_ready          (router_025_src_ready),                          //       src.ready
		.src_valid          (router_025_src_valid),                          //          .valid
		.src_data           (router_025_src_data),                           //          .data
		.src_channel        (router_025_src_channel),                        //          .channel
		.src_startofpacket  (router_025_src_startofpacket),                  //          .startofpacket
		.src_endofpacket    (router_025_src_endofpacket)                     //          .endofpacket
	);

	Computer_System_mm_interconnect_1_router_002 router_026 (
		.sink_ready         (uy_s1_agent_rp_ready),                          //      sink.ready
		.sink_valid         (uy_s1_agent_rp_valid),                          //          .valid
		.sink_data          (uy_s1_agent_rp_data),                           //          .data
		.sink_startofpacket (uy_s1_agent_rp_startofpacket),                  //          .startofpacket
		.sink_endofpacket   (uy_s1_agent_rp_endofpacket),                    //          .endofpacket
		.clk                (System_PLL_sys_clk_clk),                        //       clk.clk
		.reset              (n0_from_hps_reset_reset_bridge_in_reset_reset), // clk_reset.reset
		.src_ready          (router_026_src_ready),                          //       src.ready
		.src_valid          (router_026_src_valid),                          //          .valid
		.src_data           (router_026_src_data),                           //          .data
		.src_channel        (router_026_src_channel),                        //          .channel
		.src_startofpacket  (router_026_src_startofpacket),                  //          .startofpacket
		.src_endofpacket    (router_026_src_endofpacket)                     //          .endofpacket
	);

	Computer_System_mm_interconnect_1_router_002 router_027 (
		.sink_ready         (pipes_s1_agent_rp_ready),                       //      sink.ready
		.sink_valid         (pipes_s1_agent_rp_valid),                       //          .valid
		.sink_data          (pipes_s1_agent_rp_data),                        //          .data
		.sink_startofpacket (pipes_s1_agent_rp_startofpacket),               //          .startofpacket
		.sink_endofpacket   (pipes_s1_agent_rp_endofpacket),                 //          .endofpacket
		.clk                (System_PLL_sys_clk_clk),                        //       clk.clk
		.reset              (n0_from_hps_reset_reset_bridge_in_reset_reset), // clk_reset.reset
		.src_ready          (router_027_src_ready),                          //       src.ready
		.src_valid          (router_027_src_valid),                          //          .valid
		.src_data           (router_027_src_data),                           //          .data
		.src_channel        (router_027_src_channel),                        //          .channel
		.src_startofpacket  (router_027_src_startofpacket),                  //          .startofpacket
		.src_endofpacket    (router_027_src_endofpacket)                     //          .endofpacket
	);

	Computer_System_mm_interconnect_1_router_002 router_028 (
		.sink_ready         (pixel_dma_addr_translation_slave_agent_rp_ready),         //      sink.ready
		.sink_valid         (pixel_dma_addr_translation_slave_agent_rp_valid),         //          .valid
		.sink_data          (pixel_dma_addr_translation_slave_agent_rp_data),          //          .data
		.sink_startofpacket (pixel_dma_addr_translation_slave_agent_rp_startofpacket), //          .startofpacket
		.sink_endofpacket   (pixel_dma_addr_translation_slave_agent_rp_endofpacket),   //          .endofpacket
		.clk                (System_PLL_sys_clk_clk),                                  //       clk.clk
		.reset              (AV_Config_reset_reset_bridge_in_reset_reset),             // clk_reset.reset
		.src_ready          (router_028_src_ready),                                    //       src.ready
		.src_valid          (router_028_src_valid),                                    //          .valid
		.src_data           (router_028_src_data),                                     //          .data
		.src_channel        (router_028_src_channel),                                  //          .channel
		.src_startofpacket  (router_028_src_startofpacket),                            //          .startofpacket
		.src_endofpacket    (router_028_src_endofpacket)                               //          .endofpacket
	);

	altera_merlin_traffic_limiter #(
		.PKT_DEST_ID_H             (95),
		.PKT_DEST_ID_L             (91),
		.PKT_SRC_ID_H              (90),
		.PKT_SRC_ID_L              (86),
		.PKT_BYTE_CNT_H            (69),
		.PKT_BYTE_CNT_L            (63),
		.PKT_BYTEEN_H              (35),
		.PKT_BYTEEN_L              (32),
		.PKT_TRANS_POSTED          (58),
		.PKT_TRANS_WRITE           (59),
		.MAX_OUTSTANDING_RESPONSES (3),
		.PIPELINED                 (0),
		.ST_DATA_W                 (120),
		.ST_CHANNEL_W              (27),
		.VALID_WIDTH               (27),
		.ENFORCE_ORDER             (1),
		.PREVENT_HAZARDS           (0),
		.SUPPORTS_POSTED_WRITES    (1),
		.SUPPORTS_NONPOSTED_WRITES (0),
		.REORDER                   (0)
	) arm_a9_hps_h2f_lw_axi_master_wr_limiter (
		.clk                    (System_PLL_sys_clk_clk),                                                   //       clk.clk
		.reset                  (ARM_A9_HPS_h2f_lw_axi_master_agent_clk_reset_reset_bridge_in_reset_reset), // clk_reset.reset
		.cmd_sink_ready         (router_src_ready),                                                         //  cmd_sink.ready
		.cmd_sink_valid         (router_src_valid),                                                         //          .valid
		.cmd_sink_data          (router_src_data),                                                          //          .data
		.cmd_sink_channel       (router_src_channel),                                                       //          .channel
		.cmd_sink_startofpacket (router_src_startofpacket),                                                 //          .startofpacket
		.cmd_sink_endofpacket   (router_src_endofpacket),                                                   //          .endofpacket
		.cmd_src_ready          (arm_a9_hps_h2f_lw_axi_master_wr_limiter_cmd_src_ready),                    //   cmd_src.ready
		.cmd_src_data           (arm_a9_hps_h2f_lw_axi_master_wr_limiter_cmd_src_data),                     //          .data
		.cmd_src_channel        (arm_a9_hps_h2f_lw_axi_master_wr_limiter_cmd_src_channel),                  //          .channel
		.cmd_src_startofpacket  (arm_a9_hps_h2f_lw_axi_master_wr_limiter_cmd_src_startofpacket),            //          .startofpacket
		.cmd_src_endofpacket    (arm_a9_hps_h2f_lw_axi_master_wr_limiter_cmd_src_endofpacket),              //          .endofpacket
		.rsp_sink_ready         (rsp_mux_src_ready),                                                        //  rsp_sink.ready
		.rsp_sink_valid         (rsp_mux_src_valid),                                                        //          .valid
		.rsp_sink_channel       (rsp_mux_src_channel),                                                      //          .channel
		.rsp_sink_data          (rsp_mux_src_data),                                                         //          .data
		.rsp_sink_startofpacket (rsp_mux_src_startofpacket),                                                //          .startofpacket
		.rsp_sink_endofpacket   (rsp_mux_src_endofpacket),                                                  //          .endofpacket
		.rsp_src_ready          (arm_a9_hps_h2f_lw_axi_master_wr_limiter_rsp_src_ready),                    //   rsp_src.ready
		.rsp_src_valid          (arm_a9_hps_h2f_lw_axi_master_wr_limiter_rsp_src_valid),                    //          .valid
		.rsp_src_data           (arm_a9_hps_h2f_lw_axi_master_wr_limiter_rsp_src_data),                     //          .data
		.rsp_src_channel        (arm_a9_hps_h2f_lw_axi_master_wr_limiter_rsp_src_channel),                  //          .channel
		.rsp_src_startofpacket  (arm_a9_hps_h2f_lw_axi_master_wr_limiter_rsp_src_startofpacket),            //          .startofpacket
		.rsp_src_endofpacket    (arm_a9_hps_h2f_lw_axi_master_wr_limiter_rsp_src_endofpacket),              //          .endofpacket
		.cmd_src_valid          (arm_a9_hps_h2f_lw_axi_master_wr_limiter_cmd_valid_data)                    // cmd_valid.data
	);

	altera_merlin_traffic_limiter #(
		.PKT_DEST_ID_H             (95),
		.PKT_DEST_ID_L             (91),
		.PKT_SRC_ID_H              (90),
		.PKT_SRC_ID_L              (86),
		.PKT_BYTE_CNT_H            (69),
		.PKT_BYTE_CNT_L            (63),
		.PKT_BYTEEN_H              (35),
		.PKT_BYTEEN_L              (32),
		.PKT_TRANS_POSTED          (58),
		.PKT_TRANS_WRITE           (59),
		.MAX_OUTSTANDING_RESPONSES (3),
		.PIPELINED                 (0),
		.ST_DATA_W                 (120),
		.ST_CHANNEL_W              (27),
		.VALID_WIDTH               (27),
		.ENFORCE_ORDER             (1),
		.PREVENT_HAZARDS           (0),
		.SUPPORTS_POSTED_WRITES    (1),
		.SUPPORTS_NONPOSTED_WRITES (0),
		.REORDER                   (0)
	) arm_a9_hps_h2f_lw_axi_master_rd_limiter (
		.clk                    (System_PLL_sys_clk_clk),                                                   //       clk.clk
		.reset                  (ARM_A9_HPS_h2f_lw_axi_master_agent_clk_reset_reset_bridge_in_reset_reset), // clk_reset.reset
		.cmd_sink_ready         (router_001_src_ready),                                                     //  cmd_sink.ready
		.cmd_sink_valid         (router_001_src_valid),                                                     //          .valid
		.cmd_sink_data          (router_001_src_data),                                                      //          .data
		.cmd_sink_channel       (router_001_src_channel),                                                   //          .channel
		.cmd_sink_startofpacket (router_001_src_startofpacket),                                             //          .startofpacket
		.cmd_sink_endofpacket   (router_001_src_endofpacket),                                               //          .endofpacket
		.cmd_src_ready          (arm_a9_hps_h2f_lw_axi_master_rd_limiter_cmd_src_ready),                    //   cmd_src.ready
		.cmd_src_data           (arm_a9_hps_h2f_lw_axi_master_rd_limiter_cmd_src_data),                     //          .data
		.cmd_src_channel        (arm_a9_hps_h2f_lw_axi_master_rd_limiter_cmd_src_channel),                  //          .channel
		.cmd_src_startofpacket  (arm_a9_hps_h2f_lw_axi_master_rd_limiter_cmd_src_startofpacket),            //          .startofpacket
		.cmd_src_endofpacket    (arm_a9_hps_h2f_lw_axi_master_rd_limiter_cmd_src_endofpacket),              //          .endofpacket
		.rsp_sink_ready         (rsp_mux_001_src_ready),                                                    //  rsp_sink.ready
		.rsp_sink_valid         (rsp_mux_001_src_valid),                                                    //          .valid
		.rsp_sink_channel       (rsp_mux_001_src_channel),                                                  //          .channel
		.rsp_sink_data          (rsp_mux_001_src_data),                                                     //          .data
		.rsp_sink_startofpacket (rsp_mux_001_src_startofpacket),                                            //          .startofpacket
		.rsp_sink_endofpacket   (rsp_mux_001_src_endofpacket),                                              //          .endofpacket
		.rsp_src_ready          (arm_a9_hps_h2f_lw_axi_master_rd_limiter_rsp_src_ready),                    //   rsp_src.ready
		.rsp_src_valid          (arm_a9_hps_h2f_lw_axi_master_rd_limiter_rsp_src_valid),                    //          .valid
		.rsp_src_data           (arm_a9_hps_h2f_lw_axi_master_rd_limiter_rsp_src_data),                     //          .data
		.rsp_src_channel        (arm_a9_hps_h2f_lw_axi_master_rd_limiter_rsp_src_channel),                  //          .channel
		.rsp_src_startofpacket  (arm_a9_hps_h2f_lw_axi_master_rd_limiter_rsp_src_startofpacket),            //          .startofpacket
		.rsp_src_endofpacket    (arm_a9_hps_h2f_lw_axi_master_rd_limiter_rsp_src_endofpacket),              //          .endofpacket
		.cmd_src_valid          (arm_a9_hps_h2f_lw_axi_master_rd_limiter_cmd_valid_data)                    // cmd_valid.data
	);

	altera_merlin_burst_adapter #(
		.PKT_ADDR_H                (56),
		.PKT_ADDR_L                (36),
		.PKT_BEGIN_BURST           (84),
		.PKT_BYTE_CNT_H            (69),
		.PKT_BYTE_CNT_L            (63),
		.PKT_BYTEEN_H              (35),
		.PKT_BYTEEN_L              (32),
		.PKT_BURST_SIZE_H          (79),
		.PKT_BURST_SIZE_L          (77),
		.PKT_BURST_TYPE_H          (81),
		.PKT_BURST_TYPE_L          (80),
		.PKT_BURSTWRAP_H           (76),
		.PKT_BURSTWRAP_L           (70),
		.PKT_TRANS_COMPRESSED_READ (57),
		.PKT_TRANS_WRITE           (59),
		.PKT_TRANS_READ            (60),
		.OUT_NARROW_SIZE           (0),
		.IN_NARROW_SIZE            (1),
		.OUT_FIXED                 (0),
		.OUT_COMPLETE_WRAP         (0),
		.ST_DATA_W                 (120),
		.ST_CHANNEL_W              (27),
		.OUT_BYTE_CNT_H            (65),
		.OUT_BURSTWRAP_H           (76),
		.COMPRESSED_READ_SUPPORT   (1),
		.BYTEENABLE_SYNTHESIS      (1),
		.PIPE_INPUTS               (0),
		.NO_WRAP_SUPPORT           (0),
		.INCOMPLETE_WRAP_SUPPORT   (0),
		.BURSTWRAP_CONST_MASK      (0),
		.BURSTWRAP_CONST_VALUE     (0),
		.ADAPTER_VERSION           ("13.1")
	) av_config_avalon_av_config_slave_burst_adapter (
		.clk                   (System_PLL_sys_clk_clk),                                               //       cr0.clk
		.reset                 (AV_Config_reset_reset_bridge_in_reset_reset),                          // cr0_reset.reset
		.sink0_valid           (cmd_mux_src_valid),                                                    //     sink0.valid
		.sink0_data            (cmd_mux_src_data),                                                     //          .data
		.sink0_channel         (cmd_mux_src_channel),                                                  //          .channel
		.sink0_startofpacket   (cmd_mux_src_startofpacket),                                            //          .startofpacket
		.sink0_endofpacket     (cmd_mux_src_endofpacket),                                              //          .endofpacket
		.sink0_ready           (cmd_mux_src_ready),                                                    //          .ready
		.source0_valid         (av_config_avalon_av_config_slave_burst_adapter_source0_valid),         //   source0.valid
		.source0_data          (av_config_avalon_av_config_slave_burst_adapter_source0_data),          //          .data
		.source0_channel       (av_config_avalon_av_config_slave_burst_adapter_source0_channel),       //          .channel
		.source0_startofpacket (av_config_avalon_av_config_slave_burst_adapter_source0_startofpacket), //          .startofpacket
		.source0_endofpacket   (av_config_avalon_av_config_slave_burst_adapter_source0_endofpacket),   //          .endofpacket
		.source0_ready         (av_config_avalon_av_config_slave_burst_adapter_source0_ready)          //          .ready
	);

	altera_merlin_burst_adapter #(
		.PKT_ADDR_H                (56),
		.PKT_ADDR_L                (36),
		.PKT_BEGIN_BURST           (84),
		.PKT_BYTE_CNT_H            (69),
		.PKT_BYTE_CNT_L            (63),
		.PKT_BYTEEN_H              (35),
		.PKT_BYTEEN_L              (32),
		.PKT_BURST_SIZE_H          (79),
		.PKT_BURST_SIZE_L          (77),
		.PKT_BURST_TYPE_H          (81),
		.PKT_BURST_TYPE_L          (80),
		.PKT_BURSTWRAP_H           (76),
		.PKT_BURSTWRAP_L           (70),
		.PKT_TRANS_COMPRESSED_READ (57),
		.PKT_TRANS_WRITE           (59),
		.PKT_TRANS_READ            (60),
		.OUT_NARROW_SIZE           (0),
		.IN_NARROW_SIZE            (1),
		.OUT_FIXED                 (0),
		.OUT_COMPLETE_WRAP         (0),
		.ST_DATA_W                 (120),
		.ST_CHANNEL_W              (27),
		.OUT_BYTE_CNT_H            (65),
		.OUT_BURSTWRAP_H           (76),
		.COMPRESSED_READ_SUPPORT   (1),
		.BYTEENABLE_SYNTHESIS      (1),
		.PIPE_INPUTS               (0),
		.NO_WRAP_SUPPORT           (0),
		.INCOMPLETE_WRAP_SUPPORT   (0),
		.BURSTWRAP_CONST_MASK      (0),
		.BURSTWRAP_CONST_VALUE     (0),
		.ADAPTER_VERSION           ("13.1")
	) vga_subsystem_char_buffer_control_slave_burst_adapter (
		.clk                   (System_PLL_sys_clk_clk),                                                      //       cr0.clk
		.reset                 (AV_Config_reset_reset_bridge_in_reset_reset),                                 // cr0_reset.reset
		.sink0_valid           (cmd_mux_001_src_valid),                                                       //     sink0.valid
		.sink0_data            (cmd_mux_001_src_data),                                                        //          .data
		.sink0_channel         (cmd_mux_001_src_channel),                                                     //          .channel
		.sink0_startofpacket   (cmd_mux_001_src_startofpacket),                                               //          .startofpacket
		.sink0_endofpacket     (cmd_mux_001_src_endofpacket),                                                 //          .endofpacket
		.sink0_ready           (cmd_mux_001_src_ready),                                                       //          .ready
		.source0_valid         (vga_subsystem_char_buffer_control_slave_burst_adapter_source0_valid),         //   source0.valid
		.source0_data          (vga_subsystem_char_buffer_control_slave_burst_adapter_source0_data),          //          .data
		.source0_channel       (vga_subsystem_char_buffer_control_slave_burst_adapter_source0_channel),       //          .channel
		.source0_startofpacket (vga_subsystem_char_buffer_control_slave_burst_adapter_source0_startofpacket), //          .startofpacket
		.source0_endofpacket   (vga_subsystem_char_buffer_control_slave_burst_adapter_source0_endofpacket),   //          .endofpacket
		.source0_ready         (vga_subsystem_char_buffer_control_slave_burst_adapter_source0_ready)          //          .ready
	);

	altera_merlin_burst_adapter #(
		.PKT_ADDR_H                (56),
		.PKT_ADDR_L                (36),
		.PKT_BEGIN_BURST           (84),
		.PKT_BYTE_CNT_H            (69),
		.PKT_BYTE_CNT_L            (63),
		.PKT_BYTEEN_H              (35),
		.PKT_BYTEEN_L              (32),
		.PKT_BURST_SIZE_H          (79),
		.PKT_BURST_SIZE_L          (77),
		.PKT_BURST_TYPE_H          (81),
		.PKT_BURST_TYPE_L          (80),
		.PKT_BURSTWRAP_H           (76),
		.PKT_BURSTWRAP_L           (70),
		.PKT_TRANS_COMPRESSED_READ (57),
		.PKT_TRANS_WRITE           (59),
		.PKT_TRANS_READ            (60),
		.OUT_NARROW_SIZE           (0),
		.IN_NARROW_SIZE            (1),
		.OUT_FIXED                 (0),
		.OUT_COMPLETE_WRAP         (0),
		.ST_DATA_W                 (120),
		.ST_CHANNEL_W              (27),
		.OUT_BYTE_CNT_H            (65),
		.OUT_BURSTWRAP_H           (76),
		.COMPRESSED_READ_SUPPORT   (1),
		.BYTEENABLE_SYNTHESIS      (1),
		.PIPE_INPUTS               (0),
		.NO_WRAP_SUPPORT           (0),
		.INCOMPLETE_WRAP_SUPPORT   (0),
		.BURSTWRAP_CONST_MASK      (0),
		.BURSTWRAP_CONST_VALUE     (0),
		.ADAPTER_VERSION           ("13.1")
	) n0_from_hps_s1_burst_adapter (
		.clk                   (System_PLL_sys_clk_clk),                             //       cr0.clk
		.reset                 (n0_from_hps_reset_reset_bridge_in_reset_reset),      // cr0_reset.reset
		.sink0_valid           (cmd_mux_002_src_valid),                              //     sink0.valid
		.sink0_data            (cmd_mux_002_src_data),                               //          .data
		.sink0_channel         (cmd_mux_002_src_channel),                            //          .channel
		.sink0_startofpacket   (cmd_mux_002_src_startofpacket),                      //          .startofpacket
		.sink0_endofpacket     (cmd_mux_002_src_endofpacket),                        //          .endofpacket
		.sink0_ready           (cmd_mux_002_src_ready),                              //          .ready
		.source0_valid         (n0_from_hps_s1_burst_adapter_source0_valid),         //   source0.valid
		.source0_data          (n0_from_hps_s1_burst_adapter_source0_data),          //          .data
		.source0_channel       (n0_from_hps_s1_burst_adapter_source0_channel),       //          .channel
		.source0_startofpacket (n0_from_hps_s1_burst_adapter_source0_startofpacket), //          .startofpacket
		.source0_endofpacket   (n0_from_hps_s1_burst_adapter_source0_endofpacket),   //          .endofpacket
		.source0_ready         (n0_from_hps_s1_burst_adapter_source0_ready)          //          .ready
	);

	altera_merlin_burst_adapter #(
		.PKT_ADDR_H                (56),
		.PKT_ADDR_L                (36),
		.PKT_BEGIN_BURST           (84),
		.PKT_BYTE_CNT_H            (69),
		.PKT_BYTE_CNT_L            (63),
		.PKT_BYTEEN_H              (35),
		.PKT_BYTEEN_L              (32),
		.PKT_BURST_SIZE_H          (79),
		.PKT_BURST_SIZE_L          (77),
		.PKT_BURST_TYPE_H          (81),
		.PKT_BURST_TYPE_L          (80),
		.PKT_BURSTWRAP_H           (76),
		.PKT_BURSTWRAP_L           (70),
		.PKT_TRANS_COMPRESSED_READ (57),
		.PKT_TRANS_WRITE           (59),
		.PKT_TRANS_READ            (60),
		.OUT_NARROW_SIZE           (0),
		.IN_NARROW_SIZE            (1),
		.OUT_FIXED                 (0),
		.OUT_COMPLETE_WRAP         (0),
		.ST_DATA_W                 (120),
		.ST_CHANNEL_W              (27),
		.OUT_BYTE_CNT_H            (65),
		.OUT_BURSTWRAP_H           (76),
		.COMPRESSED_READ_SUPPORT   (1),
		.BYTEENABLE_SYNTHESIS      (1),
		.PIPE_INPUTS               (0),
		.NO_WRAP_SUPPORT           (0),
		.INCOMPLETE_WRAP_SUPPORT   (0),
		.BURSTWRAP_CONST_MASK      (0),
		.BURSTWRAP_CONST_VALUE     (0),
		.ADAPTER_VERSION           ("13.1")
	) nn_from_hps_s1_burst_adapter (
		.clk                   (System_PLL_sys_clk_clk),                             //       cr0.clk
		.reset                 (n0_from_hps_reset_reset_bridge_in_reset_reset),      // cr0_reset.reset
		.sink0_valid           (cmd_mux_003_src_valid),                              //     sink0.valid
		.sink0_data            (cmd_mux_003_src_data),                               //          .data
		.sink0_channel         (cmd_mux_003_src_channel),                            //          .channel
		.sink0_startofpacket   (cmd_mux_003_src_startofpacket),                      //          .startofpacket
		.sink0_endofpacket     (cmd_mux_003_src_endofpacket),                        //          .endofpacket
		.sink0_ready           (cmd_mux_003_src_ready),                              //          .ready
		.source0_valid         (nn_from_hps_s1_burst_adapter_source0_valid),         //   source0.valid
		.source0_data          (nn_from_hps_s1_burst_adapter_source0_data),          //          .data
		.source0_channel       (nn_from_hps_s1_burst_adapter_source0_channel),       //          .channel
		.source0_startofpacket (nn_from_hps_s1_burst_adapter_source0_startofpacket), //          .startofpacket
		.source0_endofpacket   (nn_from_hps_s1_burst_adapter_source0_endofpacket),   //          .endofpacket
		.source0_ready         (nn_from_hps_s1_burst_adapter_source0_ready)          //          .ready
	);

	altera_merlin_burst_adapter #(
		.PKT_ADDR_H                (56),
		.PKT_ADDR_L                (36),
		.PKT_BEGIN_BURST           (84),
		.PKT_BYTE_CNT_H            (69),
		.PKT_BYTE_CNT_L            (63),
		.PKT_BYTEEN_H              (35),
		.PKT_BYTEEN_L              (32),
		.PKT_BURST_SIZE_H          (79),
		.PKT_BURST_SIZE_L          (77),
		.PKT_BURST_TYPE_H          (81),
		.PKT_BURST_TYPE_L          (80),
		.PKT_BURSTWRAP_H           (76),
		.PKT_BURSTWRAP_L           (70),
		.PKT_TRANS_COMPRESSED_READ (57),
		.PKT_TRANS_WRITE           (59),
		.PKT_TRANS_READ            (60),
		.OUT_NARROW_SIZE           (0),
		.IN_NARROW_SIZE            (1),
		.OUT_FIXED                 (0),
		.OUT_COMPLETE_WRAP         (0),
		.ST_DATA_W                 (120),
		.ST_CHANNEL_W              (27),
		.OUT_BYTE_CNT_H            (65),
		.OUT_BURSTWRAP_H           (76),
		.COMPRESSED_READ_SUPPORT   (1),
		.BYTEENABLE_SYNTHESIS      (1),
		.PIPE_INPUTS               (0),
		.NO_WRAP_SUPPORT           (0),
		.INCOMPLETE_WRAP_SUPPORT   (0),
		.BURSTWRAP_CONST_MASK      (0),
		.BURSTWRAP_CONST_VALUE     (0),
		.ADAPTER_VERSION           ("13.1")
	) ns_from_hps_s1_burst_adapter (
		.clk                   (System_PLL_sys_clk_clk),                             //       cr0.clk
		.reset                 (n0_from_hps_reset_reset_bridge_in_reset_reset),      // cr0_reset.reset
		.sink0_valid           (cmd_mux_004_src_valid),                              //     sink0.valid
		.sink0_data            (cmd_mux_004_src_data),                               //          .data
		.sink0_channel         (cmd_mux_004_src_channel),                            //          .channel
		.sink0_startofpacket   (cmd_mux_004_src_startofpacket),                      //          .startofpacket
		.sink0_endofpacket     (cmd_mux_004_src_endofpacket),                        //          .endofpacket
		.sink0_ready           (cmd_mux_004_src_ready),                              //          .ready
		.source0_valid         (ns_from_hps_s1_burst_adapter_source0_valid),         //   source0.valid
		.source0_data          (ns_from_hps_s1_burst_adapter_source0_data),          //          .data
		.source0_channel       (ns_from_hps_s1_burst_adapter_source0_channel),       //          .channel
		.source0_startofpacket (ns_from_hps_s1_burst_adapter_source0_startofpacket), //          .startofpacket
		.source0_endofpacket   (ns_from_hps_s1_burst_adapter_source0_endofpacket),   //          .endofpacket
		.source0_ready         (ns_from_hps_s1_burst_adapter_source0_ready)          //          .ready
	);

	altera_merlin_burst_adapter #(
		.PKT_ADDR_H                (56),
		.PKT_ADDR_L                (36),
		.PKT_BEGIN_BURST           (84),
		.PKT_BYTE_CNT_H            (69),
		.PKT_BYTE_CNT_L            (63),
		.PKT_BYTEEN_H              (35),
		.PKT_BYTEEN_L              (32),
		.PKT_BURST_SIZE_H          (79),
		.PKT_BURST_SIZE_L          (77),
		.PKT_BURST_TYPE_H          (81),
		.PKT_BURST_TYPE_L          (80),
		.PKT_BURSTWRAP_H           (76),
		.PKT_BURSTWRAP_L           (70),
		.PKT_TRANS_COMPRESSED_READ (57),
		.PKT_TRANS_WRITE           (59),
		.PKT_TRANS_READ            (60),
		.OUT_NARROW_SIZE           (0),
		.IN_NARROW_SIZE            (1),
		.OUT_FIXED                 (0),
		.OUT_COMPLETE_WRAP         (0),
		.ST_DATA_W                 (120),
		.ST_CHANNEL_W              (27),
		.OUT_BYTE_CNT_H            (65),
		.OUT_BURSTWRAP_H           (76),
		.COMPRESSED_READ_SUPPORT   (1),
		.BYTEENABLE_SYNTHESIS      (1),
		.PIPE_INPUTS               (0),
		.NO_WRAP_SUPPORT           (0),
		.INCOMPLETE_WRAP_SUPPORT   (0),
		.BURSTWRAP_CONST_MASK      (0),
		.BURSTWRAP_CONST_VALUE     (0),
		.ADAPTER_VERSION           ("13.1")
	) nw_from_hps_s1_burst_adapter (
		.clk                   (System_PLL_sys_clk_clk),                             //       cr0.clk
		.reset                 (n0_from_hps_reset_reset_bridge_in_reset_reset),      // cr0_reset.reset
		.sink0_valid           (cmd_mux_005_src_valid),                              //     sink0.valid
		.sink0_data            (cmd_mux_005_src_data),                               //          .data
		.sink0_channel         (cmd_mux_005_src_channel),                            //          .channel
		.sink0_startofpacket   (cmd_mux_005_src_startofpacket),                      //          .startofpacket
		.sink0_endofpacket     (cmd_mux_005_src_endofpacket),                        //          .endofpacket
		.sink0_ready           (cmd_mux_005_src_ready),                              //          .ready
		.source0_valid         (nw_from_hps_s1_burst_adapter_source0_valid),         //   source0.valid
		.source0_data          (nw_from_hps_s1_burst_adapter_source0_data),          //          .data
		.source0_channel       (nw_from_hps_s1_burst_adapter_source0_channel),       //          .channel
		.source0_startofpacket (nw_from_hps_s1_burst_adapter_source0_startofpacket), //          .startofpacket
		.source0_endofpacket   (nw_from_hps_s1_burst_adapter_source0_endofpacket),   //          .endofpacket
		.source0_ready         (nw_from_hps_s1_burst_adapter_source0_ready)          //          .ready
	);

	altera_merlin_burst_adapter #(
		.PKT_ADDR_H                (56),
		.PKT_ADDR_L                (36),
		.PKT_BEGIN_BURST           (84),
		.PKT_BYTE_CNT_H            (69),
		.PKT_BYTE_CNT_L            (63),
		.PKT_BYTEEN_H              (35),
		.PKT_BYTEEN_L              (32),
		.PKT_BURST_SIZE_H          (79),
		.PKT_BURST_SIZE_L          (77),
		.PKT_BURST_TYPE_H          (81),
		.PKT_BURST_TYPE_L          (80),
		.PKT_BURSTWRAP_H           (76),
		.PKT_BURSTWRAP_L           (70),
		.PKT_TRANS_COMPRESSED_READ (57),
		.PKT_TRANS_WRITE           (59),
		.PKT_TRANS_READ            (60),
		.OUT_NARROW_SIZE           (0),
		.IN_NARROW_SIZE            (1),
		.OUT_FIXED                 (0),
		.OUT_COMPLETE_WRAP         (0),
		.ST_DATA_W                 (120),
		.ST_CHANNEL_W              (27),
		.OUT_BYTE_CNT_H            (65),
		.OUT_BURSTWRAP_H           (76),
		.COMPRESSED_READ_SUPPORT   (1),
		.BYTEENABLE_SYNTHESIS      (1),
		.PIPE_INPUTS               (0),
		.NO_WRAP_SUPPORT           (0),
		.INCOMPLETE_WRAP_SUPPORT   (0),
		.BURSTWRAP_CONST_MASK      (0),
		.BURSTWRAP_CONST_VALUE     (0),
		.ADAPTER_VERSION           ("13.1")
	) ne_from_hps_s1_burst_adapter (
		.clk                   (System_PLL_sys_clk_clk),                             //       cr0.clk
		.reset                 (n0_from_hps_reset_reset_bridge_in_reset_reset),      // cr0_reset.reset
		.sink0_valid           (cmd_mux_006_src_valid),                              //     sink0.valid
		.sink0_data            (cmd_mux_006_src_data),                               //          .data
		.sink0_channel         (cmd_mux_006_src_channel),                            //          .channel
		.sink0_startofpacket   (cmd_mux_006_src_startofpacket),                      //          .startofpacket
		.sink0_endofpacket     (cmd_mux_006_src_endofpacket),                        //          .endofpacket
		.sink0_ready           (cmd_mux_006_src_ready),                              //          .ready
		.source0_valid         (ne_from_hps_s1_burst_adapter_source0_valid),         //   source0.valid
		.source0_data          (ne_from_hps_s1_burst_adapter_source0_data),          //          .data
		.source0_channel       (ne_from_hps_s1_burst_adapter_source0_channel),       //          .channel
		.source0_startofpacket (ne_from_hps_s1_burst_adapter_source0_startofpacket), //          .startofpacket
		.source0_endofpacket   (ne_from_hps_s1_burst_adapter_source0_endofpacket),   //          .endofpacket
		.source0_ready         (ne_from_hps_s1_burst_adapter_source0_ready)          //          .ready
	);

	altera_merlin_burst_adapter #(
		.PKT_ADDR_H                (56),
		.PKT_ADDR_L                (36),
		.PKT_BEGIN_BURST           (84),
		.PKT_BYTE_CNT_H            (69),
		.PKT_BYTE_CNT_L            (63),
		.PKT_BYTEEN_H              (35),
		.PKT_BYTEEN_L              (32),
		.PKT_BURST_SIZE_H          (79),
		.PKT_BURST_SIZE_L          (77),
		.PKT_BURST_TYPE_H          (81),
		.PKT_BURST_TYPE_L          (80),
		.PKT_BURSTWRAP_H           (76),
		.PKT_BURSTWRAP_L           (70),
		.PKT_TRANS_COMPRESSED_READ (57),
		.PKT_TRANS_WRITE           (59),
		.PKT_TRANS_READ            (60),
		.OUT_NARROW_SIZE           (0),
		.IN_NARROW_SIZE            (1),
		.OUT_FIXED                 (0),
		.OUT_COMPLETE_WRAP         (0),
		.ST_DATA_W                 (120),
		.ST_CHANNEL_W              (27),
		.OUT_BYTE_CNT_H            (65),
		.OUT_BURSTWRAP_H           (76),
		.COMPRESSED_READ_SUPPORT   (1),
		.BYTEENABLE_SYNTHESIS      (1),
		.PIPE_INPUTS               (0),
		.NO_WRAP_SUPPORT           (0),
		.INCOMPLETE_WRAP_SUPPORT   (0),
		.BURSTWRAP_CONST_MASK      (0),
		.BURSTWRAP_CONST_VALUE     (0),
		.ADAPTER_VERSION           ("13.1")
	) nnw_from_hps_s1_burst_adapter (
		.clk                   (System_PLL_sys_clk_clk),                              //       cr0.clk
		.reset                 (n0_from_hps_reset_reset_bridge_in_reset_reset),       // cr0_reset.reset
		.sink0_valid           (cmd_mux_007_src_valid),                               //     sink0.valid
		.sink0_data            (cmd_mux_007_src_data),                                //          .data
		.sink0_channel         (cmd_mux_007_src_channel),                             //          .channel
		.sink0_startofpacket   (cmd_mux_007_src_startofpacket),                       //          .startofpacket
		.sink0_endofpacket     (cmd_mux_007_src_endofpacket),                         //          .endofpacket
		.sink0_ready           (cmd_mux_007_src_ready),                               //          .ready
		.source0_valid         (nnw_from_hps_s1_burst_adapter_source0_valid),         //   source0.valid
		.source0_data          (nnw_from_hps_s1_burst_adapter_source0_data),          //          .data
		.source0_channel       (nnw_from_hps_s1_burst_adapter_source0_channel),       //          .channel
		.source0_startofpacket (nnw_from_hps_s1_burst_adapter_source0_startofpacket), //          .startofpacket
		.source0_endofpacket   (nnw_from_hps_s1_burst_adapter_source0_endofpacket),   //          .endofpacket
		.source0_ready         (nnw_from_hps_s1_burst_adapter_source0_ready)          //          .ready
	);

	altera_merlin_burst_adapter #(
		.PKT_ADDR_H                (56),
		.PKT_ADDR_L                (36),
		.PKT_BEGIN_BURST           (84),
		.PKT_BYTE_CNT_H            (69),
		.PKT_BYTE_CNT_L            (63),
		.PKT_BYTEEN_H              (35),
		.PKT_BYTEEN_L              (32),
		.PKT_BURST_SIZE_H          (79),
		.PKT_BURST_SIZE_L          (77),
		.PKT_BURST_TYPE_H          (81),
		.PKT_BURST_TYPE_L          (80),
		.PKT_BURSTWRAP_H           (76),
		.PKT_BURSTWRAP_L           (70),
		.PKT_TRANS_COMPRESSED_READ (57),
		.PKT_TRANS_WRITE           (59),
		.PKT_TRANS_READ            (60),
		.OUT_NARROW_SIZE           (0),
		.IN_NARROW_SIZE            (1),
		.OUT_FIXED                 (0),
		.OUT_COMPLETE_WRAP         (0),
		.ST_DATA_W                 (120),
		.ST_CHANNEL_W              (27),
		.OUT_BYTE_CNT_H            (65),
		.OUT_BURSTWRAP_H           (76),
		.COMPRESSED_READ_SUPPORT   (1),
		.BYTEENABLE_SYNTHESIS      (1),
		.PIPE_INPUTS               (0),
		.NO_WRAP_SUPPORT           (0),
		.INCOMPLETE_WRAP_SUPPORT   (0),
		.BURSTWRAP_CONST_MASK      (0),
		.BURSTWRAP_CONST_VALUE     (0),
		.ADAPTER_VERSION           ("13.1")
	) nne_from_hps_s1_burst_adapter (
		.clk                   (System_PLL_sys_clk_clk),                              //       cr0.clk
		.reset                 (n0_from_hps_reset_reset_bridge_in_reset_reset),       // cr0_reset.reset
		.sink0_valid           (cmd_mux_008_src_valid),                               //     sink0.valid
		.sink0_data            (cmd_mux_008_src_data),                                //          .data
		.sink0_channel         (cmd_mux_008_src_channel),                             //          .channel
		.sink0_startofpacket   (cmd_mux_008_src_startofpacket),                       //          .startofpacket
		.sink0_endofpacket     (cmd_mux_008_src_endofpacket),                         //          .endofpacket
		.sink0_ready           (cmd_mux_008_src_ready),                               //          .ready
		.source0_valid         (nne_from_hps_s1_burst_adapter_source0_valid),         //   source0.valid
		.source0_data          (nne_from_hps_s1_burst_adapter_source0_data),          //          .data
		.source0_channel       (nne_from_hps_s1_burst_adapter_source0_channel),       //          .channel
		.source0_startofpacket (nne_from_hps_s1_burst_adapter_source0_startofpacket), //          .startofpacket
		.source0_endofpacket   (nne_from_hps_s1_burst_adapter_source0_endofpacket),   //          .endofpacket
		.source0_ready         (nne_from_hps_s1_burst_adapter_source0_ready)          //          .ready
	);

	altera_merlin_burst_adapter #(
		.PKT_ADDR_H                (56),
		.PKT_ADDR_L                (36),
		.PKT_BEGIN_BURST           (84),
		.PKT_BYTE_CNT_H            (69),
		.PKT_BYTE_CNT_L            (63),
		.PKT_BYTEEN_H              (35),
		.PKT_BYTEEN_L              (32),
		.PKT_BURST_SIZE_H          (79),
		.PKT_BURST_SIZE_L          (77),
		.PKT_BURST_TYPE_H          (81),
		.PKT_BURST_TYPE_L          (80),
		.PKT_BURSTWRAP_H           (76),
		.PKT_BURSTWRAP_L           (70),
		.PKT_TRANS_COMPRESSED_READ (57),
		.PKT_TRANS_WRITE           (59),
		.PKT_TRANS_READ            (60),
		.OUT_NARROW_SIZE           (0),
		.IN_NARROW_SIZE            (1),
		.OUT_FIXED                 (0),
		.OUT_COMPLETE_WRAP         (0),
		.ST_DATA_W                 (120),
		.ST_CHANNEL_W              (27),
		.OUT_BYTE_CNT_H            (65),
		.OUT_BURSTWRAP_H           (76),
		.COMPRESSED_READ_SUPPORT   (1),
		.BYTEENABLE_SYNTHESIS      (1),
		.PIPE_INPUTS               (0),
		.NO_WRAP_SUPPORT           (0),
		.INCOMPLETE_WRAP_SUPPORT   (0),
		.BURSTWRAP_CONST_MASK      (0),
		.BURSTWRAP_CONST_VALUE     (0),
		.ADAPTER_VERSION           ("13.1")
	) nsw_from_hps_s1_burst_adapter (
		.clk                   (System_PLL_sys_clk_clk),                              //       cr0.clk
		.reset                 (n0_from_hps_reset_reset_bridge_in_reset_reset),       // cr0_reset.reset
		.sink0_valid           (cmd_mux_009_src_valid),                               //     sink0.valid
		.sink0_data            (cmd_mux_009_src_data),                                //          .data
		.sink0_channel         (cmd_mux_009_src_channel),                             //          .channel
		.sink0_startofpacket   (cmd_mux_009_src_startofpacket),                       //          .startofpacket
		.sink0_endofpacket     (cmd_mux_009_src_endofpacket),                         //          .endofpacket
		.sink0_ready           (cmd_mux_009_src_ready),                               //          .ready
		.source0_valid         (nsw_from_hps_s1_burst_adapter_source0_valid),         //   source0.valid
		.source0_data          (nsw_from_hps_s1_burst_adapter_source0_data),          //          .data
		.source0_channel       (nsw_from_hps_s1_burst_adapter_source0_channel),       //          .channel
		.source0_startofpacket (nsw_from_hps_s1_burst_adapter_source0_startofpacket), //          .startofpacket
		.source0_endofpacket   (nsw_from_hps_s1_burst_adapter_source0_endofpacket),   //          .endofpacket
		.source0_ready         (nsw_from_hps_s1_burst_adapter_source0_ready)          //          .ready
	);

	altera_merlin_burst_adapter #(
		.PKT_ADDR_H                (56),
		.PKT_ADDR_L                (36),
		.PKT_BEGIN_BURST           (84),
		.PKT_BYTE_CNT_H            (69),
		.PKT_BYTE_CNT_L            (63),
		.PKT_BYTEEN_H              (35),
		.PKT_BYTEEN_L              (32),
		.PKT_BURST_SIZE_H          (79),
		.PKT_BURST_SIZE_L          (77),
		.PKT_BURST_TYPE_H          (81),
		.PKT_BURST_TYPE_L          (80),
		.PKT_BURSTWRAP_H           (76),
		.PKT_BURSTWRAP_L           (70),
		.PKT_TRANS_COMPRESSED_READ (57),
		.PKT_TRANS_WRITE           (59),
		.PKT_TRANS_READ            (60),
		.OUT_NARROW_SIZE           (0),
		.IN_NARROW_SIZE            (1),
		.OUT_FIXED                 (0),
		.OUT_COMPLETE_WRAP         (0),
		.ST_DATA_W                 (120),
		.ST_CHANNEL_W              (27),
		.OUT_BYTE_CNT_H            (65),
		.OUT_BURSTWRAP_H           (76),
		.COMPRESSED_READ_SUPPORT   (1),
		.BYTEENABLE_SYNTHESIS      (1),
		.PIPE_INPUTS               (0),
		.NO_WRAP_SUPPORT           (0),
		.INCOMPLETE_WRAP_SUPPORT   (0),
		.BURSTWRAP_CONST_MASK      (0),
		.BURSTWRAP_CONST_VALUE     (0),
		.ADAPTER_VERSION           ("13.1")
	) nse_from_hps_s1_burst_adapter (
		.clk                   (System_PLL_sys_clk_clk),                              //       cr0.clk
		.reset                 (n0_from_hps_reset_reset_bridge_in_reset_reset),       // cr0_reset.reset
		.sink0_valid           (cmd_mux_010_src_valid),                               //     sink0.valid
		.sink0_data            (cmd_mux_010_src_data),                                //          .data
		.sink0_channel         (cmd_mux_010_src_channel),                             //          .channel
		.sink0_startofpacket   (cmd_mux_010_src_startofpacket),                       //          .startofpacket
		.sink0_endofpacket     (cmd_mux_010_src_endofpacket),                         //          .endofpacket
		.sink0_ready           (cmd_mux_010_src_ready),                               //          .ready
		.source0_valid         (nse_from_hps_s1_burst_adapter_source0_valid),         //   source0.valid
		.source0_data          (nse_from_hps_s1_burst_adapter_source0_data),          //          .data
		.source0_channel       (nse_from_hps_s1_burst_adapter_source0_channel),       //          .channel
		.source0_startofpacket (nse_from_hps_s1_burst_adapter_source0_startofpacket), //          .startofpacket
		.source0_endofpacket   (nse_from_hps_s1_burst_adapter_source0_endofpacket),   //          .endofpacket
		.source0_ready         (nse_from_hps_s1_burst_adapter_source0_ready)          //          .ready
	);

	altera_merlin_burst_adapter #(
		.PKT_ADDR_H                (56),
		.PKT_ADDR_L                (36),
		.PKT_BEGIN_BURST           (84),
		.PKT_BYTE_CNT_H            (69),
		.PKT_BYTE_CNT_L            (63),
		.PKT_BYTEEN_H              (35),
		.PKT_BYTEEN_L              (32),
		.PKT_BURST_SIZE_H          (79),
		.PKT_BURST_SIZE_L          (77),
		.PKT_BURST_TYPE_H          (81),
		.PKT_BURST_TYPE_L          (80),
		.PKT_BURSTWRAP_H           (76),
		.PKT_BURSTWRAP_L           (70),
		.PKT_TRANS_COMPRESSED_READ (57),
		.PKT_TRANS_WRITE           (59),
		.PKT_TRANS_READ            (60),
		.OUT_NARROW_SIZE           (0),
		.IN_NARROW_SIZE            (1),
		.OUT_FIXED                 (0),
		.OUT_COMPLETE_WRAP         (0),
		.ST_DATA_W                 (120),
		.ST_CHANNEL_W              (27),
		.OUT_BYTE_CNT_H            (65),
		.OUT_BURSTWRAP_H           (76),
		.COMPRESSED_READ_SUPPORT   (1),
		.BYTEENABLE_SYNTHESIS      (1),
		.PIPE_INPUTS               (0),
		.NO_WRAP_SUPPORT           (0),
		.INCOMPLETE_WRAP_SUPPORT   (0),
		.BURSTWRAP_CONST_MASK      (0),
		.BURSTWRAP_CONST_VALUE     (0),
		.ADAPTER_VERSION           ("13.1")
	) n0_from_fpga_s1_burst_adapter (
		.clk                   (System_PLL_sys_clk_clk),                              //       cr0.clk
		.reset                 (n0_from_hps_reset_reset_bridge_in_reset_reset),       // cr0_reset.reset
		.sink0_valid           (cmd_mux_011_src_valid),                               //     sink0.valid
		.sink0_data            (cmd_mux_011_src_data),                                //          .data
		.sink0_channel         (cmd_mux_011_src_channel),                             //          .channel
		.sink0_startofpacket   (cmd_mux_011_src_startofpacket),                       //          .startofpacket
		.sink0_endofpacket     (cmd_mux_011_src_endofpacket),                         //          .endofpacket
		.sink0_ready           (cmd_mux_011_src_ready),                               //          .ready
		.source0_valid         (n0_from_fpga_s1_burst_adapter_source0_valid),         //   source0.valid
		.source0_data          (n0_from_fpga_s1_burst_adapter_source0_data),          //          .data
		.source0_channel       (n0_from_fpga_s1_burst_adapter_source0_channel),       //          .channel
		.source0_startofpacket (n0_from_fpga_s1_burst_adapter_source0_startofpacket), //          .startofpacket
		.source0_endofpacket   (n0_from_fpga_s1_burst_adapter_source0_endofpacket),   //          .endofpacket
		.source0_ready         (n0_from_fpga_s1_burst_adapter_source0_ready)          //          .ready
	);

	altera_merlin_burst_adapter #(
		.PKT_ADDR_H                (56),
		.PKT_ADDR_L                (36),
		.PKT_BEGIN_BURST           (84),
		.PKT_BYTE_CNT_H            (69),
		.PKT_BYTE_CNT_L            (63),
		.PKT_BYTEEN_H              (35),
		.PKT_BYTEEN_L              (32),
		.PKT_BURST_SIZE_H          (79),
		.PKT_BURST_SIZE_L          (77),
		.PKT_BURST_TYPE_H          (81),
		.PKT_BURST_TYPE_L          (80),
		.PKT_BURSTWRAP_H           (76),
		.PKT_BURSTWRAP_L           (70),
		.PKT_TRANS_COMPRESSED_READ (57),
		.PKT_TRANS_WRITE           (59),
		.PKT_TRANS_READ            (60),
		.OUT_NARROW_SIZE           (0),
		.IN_NARROW_SIZE            (1),
		.OUT_FIXED                 (0),
		.OUT_COMPLETE_WRAP         (0),
		.ST_DATA_W                 (120),
		.ST_CHANNEL_W              (27),
		.OUT_BYTE_CNT_H            (65),
		.OUT_BURSTWRAP_H           (76),
		.COMPRESSED_READ_SUPPORT   (1),
		.BYTEENABLE_SYNTHESIS      (1),
		.PIPE_INPUTS               (0),
		.NO_WRAP_SUPPORT           (0),
		.INCOMPLETE_WRAP_SUPPORT   (0),
		.BURSTWRAP_CONST_MASK      (0),
		.BURSTWRAP_CONST_VALUE     (0),
		.ADAPTER_VERSION           ("13.1")
	) nn_from_fpga_s1_burst_adapter (
		.clk                   (System_PLL_sys_clk_clk),                              //       cr0.clk
		.reset                 (n0_from_hps_reset_reset_bridge_in_reset_reset),       // cr0_reset.reset
		.sink0_valid           (cmd_mux_012_src_valid),                               //     sink0.valid
		.sink0_data            (cmd_mux_012_src_data),                                //          .data
		.sink0_channel         (cmd_mux_012_src_channel),                             //          .channel
		.sink0_startofpacket   (cmd_mux_012_src_startofpacket),                       //          .startofpacket
		.sink0_endofpacket     (cmd_mux_012_src_endofpacket),                         //          .endofpacket
		.sink0_ready           (cmd_mux_012_src_ready),                               //          .ready
		.source0_valid         (nn_from_fpga_s1_burst_adapter_source0_valid),         //   source0.valid
		.source0_data          (nn_from_fpga_s1_burst_adapter_source0_data),          //          .data
		.source0_channel       (nn_from_fpga_s1_burst_adapter_source0_channel),       //          .channel
		.source0_startofpacket (nn_from_fpga_s1_burst_adapter_source0_startofpacket), //          .startofpacket
		.source0_endofpacket   (nn_from_fpga_s1_burst_adapter_source0_endofpacket),   //          .endofpacket
		.source0_ready         (nn_from_fpga_s1_burst_adapter_source0_ready)          //          .ready
	);

	altera_merlin_burst_adapter #(
		.PKT_ADDR_H                (56),
		.PKT_ADDR_L                (36),
		.PKT_BEGIN_BURST           (84),
		.PKT_BYTE_CNT_H            (69),
		.PKT_BYTE_CNT_L            (63),
		.PKT_BYTEEN_H              (35),
		.PKT_BYTEEN_L              (32),
		.PKT_BURST_SIZE_H          (79),
		.PKT_BURST_SIZE_L          (77),
		.PKT_BURST_TYPE_H          (81),
		.PKT_BURST_TYPE_L          (80),
		.PKT_BURSTWRAP_H           (76),
		.PKT_BURSTWRAP_L           (70),
		.PKT_TRANS_COMPRESSED_READ (57),
		.PKT_TRANS_WRITE           (59),
		.PKT_TRANS_READ            (60),
		.OUT_NARROW_SIZE           (0),
		.IN_NARROW_SIZE            (1),
		.OUT_FIXED                 (0),
		.OUT_COMPLETE_WRAP         (0),
		.ST_DATA_W                 (120),
		.ST_CHANNEL_W              (27),
		.OUT_BYTE_CNT_H            (65),
		.OUT_BURSTWRAP_H           (76),
		.COMPRESSED_READ_SUPPORT   (1),
		.BYTEENABLE_SYNTHESIS      (1),
		.PIPE_INPUTS               (0),
		.NO_WRAP_SUPPORT           (0),
		.INCOMPLETE_WRAP_SUPPORT   (0),
		.BURSTWRAP_CONST_MASK      (0),
		.BURSTWRAP_CONST_VALUE     (0),
		.ADAPTER_VERSION           ("13.1")
	) ns_from_fpga_s1_burst_adapter (
		.clk                   (System_PLL_sys_clk_clk),                              //       cr0.clk
		.reset                 (n0_from_hps_reset_reset_bridge_in_reset_reset),       // cr0_reset.reset
		.sink0_valid           (cmd_mux_013_src_valid),                               //     sink0.valid
		.sink0_data            (cmd_mux_013_src_data),                                //          .data
		.sink0_channel         (cmd_mux_013_src_channel),                             //          .channel
		.sink0_startofpacket   (cmd_mux_013_src_startofpacket),                       //          .startofpacket
		.sink0_endofpacket     (cmd_mux_013_src_endofpacket),                         //          .endofpacket
		.sink0_ready           (cmd_mux_013_src_ready),                               //          .ready
		.source0_valid         (ns_from_fpga_s1_burst_adapter_source0_valid),         //   source0.valid
		.source0_data          (ns_from_fpga_s1_burst_adapter_source0_data),          //          .data
		.source0_channel       (ns_from_fpga_s1_burst_adapter_source0_channel),       //          .channel
		.source0_startofpacket (ns_from_fpga_s1_burst_adapter_source0_startofpacket), //          .startofpacket
		.source0_endofpacket   (ns_from_fpga_s1_burst_adapter_source0_endofpacket),   //          .endofpacket
		.source0_ready         (ns_from_fpga_s1_burst_adapter_source0_ready)          //          .ready
	);

	altera_merlin_burst_adapter #(
		.PKT_ADDR_H                (56),
		.PKT_ADDR_L                (36),
		.PKT_BEGIN_BURST           (84),
		.PKT_BYTE_CNT_H            (69),
		.PKT_BYTE_CNT_L            (63),
		.PKT_BYTEEN_H              (35),
		.PKT_BYTEEN_L              (32),
		.PKT_BURST_SIZE_H          (79),
		.PKT_BURST_SIZE_L          (77),
		.PKT_BURST_TYPE_H          (81),
		.PKT_BURST_TYPE_L          (80),
		.PKT_BURSTWRAP_H           (76),
		.PKT_BURSTWRAP_L           (70),
		.PKT_TRANS_COMPRESSED_READ (57),
		.PKT_TRANS_WRITE           (59),
		.PKT_TRANS_READ            (60),
		.OUT_NARROW_SIZE           (0),
		.IN_NARROW_SIZE            (1),
		.OUT_FIXED                 (0),
		.OUT_COMPLETE_WRAP         (0),
		.ST_DATA_W                 (120),
		.ST_CHANNEL_W              (27),
		.OUT_BYTE_CNT_H            (65),
		.OUT_BURSTWRAP_H           (76),
		.COMPRESSED_READ_SUPPORT   (1),
		.BYTEENABLE_SYNTHESIS      (1),
		.PIPE_INPUTS               (0),
		.NO_WRAP_SUPPORT           (0),
		.INCOMPLETE_WRAP_SUPPORT   (0),
		.BURSTWRAP_CONST_MASK      (0),
		.BURSTWRAP_CONST_VALUE     (0),
		.ADAPTER_VERSION           ("13.1")
	) nw_from_fpga_s1_burst_adapter (
		.clk                   (System_PLL_sys_clk_clk),                              //       cr0.clk
		.reset                 (n0_from_hps_reset_reset_bridge_in_reset_reset),       // cr0_reset.reset
		.sink0_valid           (cmd_mux_014_src_valid),                               //     sink0.valid
		.sink0_data            (cmd_mux_014_src_data),                                //          .data
		.sink0_channel         (cmd_mux_014_src_channel),                             //          .channel
		.sink0_startofpacket   (cmd_mux_014_src_startofpacket),                       //          .startofpacket
		.sink0_endofpacket     (cmd_mux_014_src_endofpacket),                         //          .endofpacket
		.sink0_ready           (cmd_mux_014_src_ready),                               //          .ready
		.source0_valid         (nw_from_fpga_s1_burst_adapter_source0_valid),         //   source0.valid
		.source0_data          (nw_from_fpga_s1_burst_adapter_source0_data),          //          .data
		.source0_channel       (nw_from_fpga_s1_burst_adapter_source0_channel),       //          .channel
		.source0_startofpacket (nw_from_fpga_s1_burst_adapter_source0_startofpacket), //          .startofpacket
		.source0_endofpacket   (nw_from_fpga_s1_burst_adapter_source0_endofpacket),   //          .endofpacket
		.source0_ready         (nw_from_fpga_s1_burst_adapter_source0_ready)          //          .ready
	);

	altera_merlin_burst_adapter #(
		.PKT_ADDR_H                (56),
		.PKT_ADDR_L                (36),
		.PKT_BEGIN_BURST           (84),
		.PKT_BYTE_CNT_H            (69),
		.PKT_BYTE_CNT_L            (63),
		.PKT_BYTEEN_H              (35),
		.PKT_BYTEEN_L              (32),
		.PKT_BURST_SIZE_H          (79),
		.PKT_BURST_SIZE_L          (77),
		.PKT_BURST_TYPE_H          (81),
		.PKT_BURST_TYPE_L          (80),
		.PKT_BURSTWRAP_H           (76),
		.PKT_BURSTWRAP_L           (70),
		.PKT_TRANS_COMPRESSED_READ (57),
		.PKT_TRANS_WRITE           (59),
		.PKT_TRANS_READ            (60),
		.OUT_NARROW_SIZE           (0),
		.IN_NARROW_SIZE            (1),
		.OUT_FIXED                 (0),
		.OUT_COMPLETE_WRAP         (0),
		.ST_DATA_W                 (120),
		.ST_CHANNEL_W              (27),
		.OUT_BYTE_CNT_H            (65),
		.OUT_BURSTWRAP_H           (76),
		.COMPRESSED_READ_SUPPORT   (1),
		.BYTEENABLE_SYNTHESIS      (1),
		.PIPE_INPUTS               (0),
		.NO_WRAP_SUPPORT           (0),
		.INCOMPLETE_WRAP_SUPPORT   (0),
		.BURSTWRAP_CONST_MASK      (0),
		.BURSTWRAP_CONST_VALUE     (0),
		.ADAPTER_VERSION           ("13.1")
	) ne_from_fpga_s1_burst_adapter (
		.clk                   (System_PLL_sys_clk_clk),                              //       cr0.clk
		.reset                 (n0_from_hps_reset_reset_bridge_in_reset_reset),       // cr0_reset.reset
		.sink0_valid           (cmd_mux_015_src_valid),                               //     sink0.valid
		.sink0_data            (cmd_mux_015_src_data),                                //          .data
		.sink0_channel         (cmd_mux_015_src_channel),                             //          .channel
		.sink0_startofpacket   (cmd_mux_015_src_startofpacket),                       //          .startofpacket
		.sink0_endofpacket     (cmd_mux_015_src_endofpacket),                         //          .endofpacket
		.sink0_ready           (cmd_mux_015_src_ready),                               //          .ready
		.source0_valid         (ne_from_fpga_s1_burst_adapter_source0_valid),         //   source0.valid
		.source0_data          (ne_from_fpga_s1_burst_adapter_source0_data),          //          .data
		.source0_channel       (ne_from_fpga_s1_burst_adapter_source0_channel),       //          .channel
		.source0_startofpacket (ne_from_fpga_s1_burst_adapter_source0_startofpacket), //          .startofpacket
		.source0_endofpacket   (ne_from_fpga_s1_burst_adapter_source0_endofpacket),   //          .endofpacket
		.source0_ready         (ne_from_fpga_s1_burst_adapter_source0_ready)          //          .ready
	);

	altera_merlin_burst_adapter #(
		.PKT_ADDR_H                (56),
		.PKT_ADDR_L                (36),
		.PKT_BEGIN_BURST           (84),
		.PKT_BYTE_CNT_H            (69),
		.PKT_BYTE_CNT_L            (63),
		.PKT_BYTEEN_H              (35),
		.PKT_BYTEEN_L              (32),
		.PKT_BURST_SIZE_H          (79),
		.PKT_BURST_SIZE_L          (77),
		.PKT_BURST_TYPE_H          (81),
		.PKT_BURST_TYPE_L          (80),
		.PKT_BURSTWRAP_H           (76),
		.PKT_BURSTWRAP_L           (70),
		.PKT_TRANS_COMPRESSED_READ (57),
		.PKT_TRANS_WRITE           (59),
		.PKT_TRANS_READ            (60),
		.OUT_NARROW_SIZE           (0),
		.IN_NARROW_SIZE            (1),
		.OUT_FIXED                 (0),
		.OUT_COMPLETE_WRAP         (0),
		.ST_DATA_W                 (120),
		.ST_CHANNEL_W              (27),
		.OUT_BYTE_CNT_H            (65),
		.OUT_BURSTWRAP_H           (76),
		.COMPRESSED_READ_SUPPORT   (1),
		.BYTEENABLE_SYNTHESIS      (1),
		.PIPE_INPUTS               (0),
		.NO_WRAP_SUPPORT           (0),
		.INCOMPLETE_WRAP_SUPPORT   (0),
		.BURSTWRAP_CONST_MASK      (0),
		.BURSTWRAP_CONST_VALUE     (0),
		.ADAPTER_VERSION           ("13.1")
	) nnw_from_fpga_s1_burst_adapter (
		.clk                   (System_PLL_sys_clk_clk),                               //       cr0.clk
		.reset                 (n0_from_hps_reset_reset_bridge_in_reset_reset),        // cr0_reset.reset
		.sink0_valid           (cmd_mux_016_src_valid),                                //     sink0.valid
		.sink0_data            (cmd_mux_016_src_data),                                 //          .data
		.sink0_channel         (cmd_mux_016_src_channel),                              //          .channel
		.sink0_startofpacket   (cmd_mux_016_src_startofpacket),                        //          .startofpacket
		.sink0_endofpacket     (cmd_mux_016_src_endofpacket),                          //          .endofpacket
		.sink0_ready           (cmd_mux_016_src_ready),                                //          .ready
		.source0_valid         (nnw_from_fpga_s1_burst_adapter_source0_valid),         //   source0.valid
		.source0_data          (nnw_from_fpga_s1_burst_adapter_source0_data),          //          .data
		.source0_channel       (nnw_from_fpga_s1_burst_adapter_source0_channel),       //          .channel
		.source0_startofpacket (nnw_from_fpga_s1_burst_adapter_source0_startofpacket), //          .startofpacket
		.source0_endofpacket   (nnw_from_fpga_s1_burst_adapter_source0_endofpacket),   //          .endofpacket
		.source0_ready         (nnw_from_fpga_s1_burst_adapter_source0_ready)          //          .ready
	);

	altera_merlin_burst_adapter #(
		.PKT_ADDR_H                (56),
		.PKT_ADDR_L                (36),
		.PKT_BEGIN_BURST           (84),
		.PKT_BYTE_CNT_H            (69),
		.PKT_BYTE_CNT_L            (63),
		.PKT_BYTEEN_H              (35),
		.PKT_BYTEEN_L              (32),
		.PKT_BURST_SIZE_H          (79),
		.PKT_BURST_SIZE_L          (77),
		.PKT_BURST_TYPE_H          (81),
		.PKT_BURST_TYPE_L          (80),
		.PKT_BURSTWRAP_H           (76),
		.PKT_BURSTWRAP_L           (70),
		.PKT_TRANS_COMPRESSED_READ (57),
		.PKT_TRANS_WRITE           (59),
		.PKT_TRANS_READ            (60),
		.OUT_NARROW_SIZE           (0),
		.IN_NARROW_SIZE            (1),
		.OUT_FIXED                 (0),
		.OUT_COMPLETE_WRAP         (0),
		.ST_DATA_W                 (120),
		.ST_CHANNEL_W              (27),
		.OUT_BYTE_CNT_H            (65),
		.OUT_BURSTWRAP_H           (76),
		.COMPRESSED_READ_SUPPORT   (1),
		.BYTEENABLE_SYNTHESIS      (1),
		.PIPE_INPUTS               (0),
		.NO_WRAP_SUPPORT           (0),
		.INCOMPLETE_WRAP_SUPPORT   (0),
		.BURSTWRAP_CONST_MASK      (0),
		.BURSTWRAP_CONST_VALUE     (0),
		.ADAPTER_VERSION           ("13.1")
	) nne_from_fpga_s1_burst_adapter (
		.clk                   (System_PLL_sys_clk_clk),                               //       cr0.clk
		.reset                 (n0_from_hps_reset_reset_bridge_in_reset_reset),        // cr0_reset.reset
		.sink0_valid           (cmd_mux_017_src_valid),                                //     sink0.valid
		.sink0_data            (cmd_mux_017_src_data),                                 //          .data
		.sink0_channel         (cmd_mux_017_src_channel),                              //          .channel
		.sink0_startofpacket   (cmd_mux_017_src_startofpacket),                        //          .startofpacket
		.sink0_endofpacket     (cmd_mux_017_src_endofpacket),                          //          .endofpacket
		.sink0_ready           (cmd_mux_017_src_ready),                                //          .ready
		.source0_valid         (nne_from_fpga_s1_burst_adapter_source0_valid),         //   source0.valid
		.source0_data          (nne_from_fpga_s1_burst_adapter_source0_data),          //          .data
		.source0_channel       (nne_from_fpga_s1_burst_adapter_source0_channel),       //          .channel
		.source0_startofpacket (nne_from_fpga_s1_burst_adapter_source0_startofpacket), //          .startofpacket
		.source0_endofpacket   (nne_from_fpga_s1_burst_adapter_source0_endofpacket),   //          .endofpacket
		.source0_ready         (nne_from_fpga_s1_burst_adapter_source0_ready)          //          .ready
	);

	altera_merlin_burst_adapter #(
		.PKT_ADDR_H                (56),
		.PKT_ADDR_L                (36),
		.PKT_BEGIN_BURST           (84),
		.PKT_BYTE_CNT_H            (69),
		.PKT_BYTE_CNT_L            (63),
		.PKT_BYTEEN_H              (35),
		.PKT_BYTEEN_L              (32),
		.PKT_BURST_SIZE_H          (79),
		.PKT_BURST_SIZE_L          (77),
		.PKT_BURST_TYPE_H          (81),
		.PKT_BURST_TYPE_L          (80),
		.PKT_BURSTWRAP_H           (76),
		.PKT_BURSTWRAP_L           (70),
		.PKT_TRANS_COMPRESSED_READ (57),
		.PKT_TRANS_WRITE           (59),
		.PKT_TRANS_READ            (60),
		.OUT_NARROW_SIZE           (0),
		.IN_NARROW_SIZE            (1),
		.OUT_FIXED                 (0),
		.OUT_COMPLETE_WRAP         (0),
		.ST_DATA_W                 (120),
		.ST_CHANNEL_W              (27),
		.OUT_BYTE_CNT_H            (65),
		.OUT_BURSTWRAP_H           (76),
		.COMPRESSED_READ_SUPPORT   (1),
		.BYTEENABLE_SYNTHESIS      (1),
		.PIPE_INPUTS               (0),
		.NO_WRAP_SUPPORT           (0),
		.INCOMPLETE_WRAP_SUPPORT   (0),
		.BURSTWRAP_CONST_MASK      (0),
		.BURSTWRAP_CONST_VALUE     (0),
		.ADAPTER_VERSION           ("13.1")
	) nsw_from_fpga_s1_burst_adapter (
		.clk                   (System_PLL_sys_clk_clk),                               //       cr0.clk
		.reset                 (n0_from_hps_reset_reset_bridge_in_reset_reset),        // cr0_reset.reset
		.sink0_valid           (cmd_mux_018_src_valid),                                //     sink0.valid
		.sink0_data            (cmd_mux_018_src_data),                                 //          .data
		.sink0_channel         (cmd_mux_018_src_channel),                              //          .channel
		.sink0_startofpacket   (cmd_mux_018_src_startofpacket),                        //          .startofpacket
		.sink0_endofpacket     (cmd_mux_018_src_endofpacket),                          //          .endofpacket
		.sink0_ready           (cmd_mux_018_src_ready),                                //          .ready
		.source0_valid         (nsw_from_fpga_s1_burst_adapter_source0_valid),         //   source0.valid
		.source0_data          (nsw_from_fpga_s1_burst_adapter_source0_data),          //          .data
		.source0_channel       (nsw_from_fpga_s1_burst_adapter_source0_channel),       //          .channel
		.source0_startofpacket (nsw_from_fpga_s1_burst_adapter_source0_startofpacket), //          .startofpacket
		.source0_endofpacket   (nsw_from_fpga_s1_burst_adapter_source0_endofpacket),   //          .endofpacket
		.source0_ready         (nsw_from_fpga_s1_burst_adapter_source0_ready)          //          .ready
	);

	altera_merlin_burst_adapter #(
		.PKT_ADDR_H                (56),
		.PKT_ADDR_L                (36),
		.PKT_BEGIN_BURST           (84),
		.PKT_BYTE_CNT_H            (69),
		.PKT_BYTE_CNT_L            (63),
		.PKT_BYTEEN_H              (35),
		.PKT_BYTEEN_L              (32),
		.PKT_BURST_SIZE_H          (79),
		.PKT_BURST_SIZE_L          (77),
		.PKT_BURST_TYPE_H          (81),
		.PKT_BURST_TYPE_L          (80),
		.PKT_BURSTWRAP_H           (76),
		.PKT_BURSTWRAP_L           (70),
		.PKT_TRANS_COMPRESSED_READ (57),
		.PKT_TRANS_WRITE           (59),
		.PKT_TRANS_READ            (60),
		.OUT_NARROW_SIZE           (0),
		.IN_NARROW_SIZE            (1),
		.OUT_FIXED                 (0),
		.OUT_COMPLETE_WRAP         (0),
		.ST_DATA_W                 (120),
		.ST_CHANNEL_W              (27),
		.OUT_BYTE_CNT_H            (65),
		.OUT_BURSTWRAP_H           (76),
		.COMPRESSED_READ_SUPPORT   (1),
		.BYTEENABLE_SYNTHESIS      (1),
		.PIPE_INPUTS               (0),
		.NO_WRAP_SUPPORT           (0),
		.INCOMPLETE_WRAP_SUPPORT   (0),
		.BURSTWRAP_CONST_MASK      (0),
		.BURSTWRAP_CONST_VALUE     (0),
		.ADAPTER_VERSION           ("13.1")
	) nse_from_fpga_s1_burst_adapter (
		.clk                   (System_PLL_sys_clk_clk),                               //       cr0.clk
		.reset                 (n0_from_hps_reset_reset_bridge_in_reset_reset),        // cr0_reset.reset
		.sink0_valid           (cmd_mux_019_src_valid),                                //     sink0.valid
		.sink0_data            (cmd_mux_019_src_data),                                 //          .data
		.sink0_channel         (cmd_mux_019_src_channel),                              //          .channel
		.sink0_startofpacket   (cmd_mux_019_src_startofpacket),                        //          .startofpacket
		.sink0_endofpacket     (cmd_mux_019_src_endofpacket),                          //          .endofpacket
		.sink0_ready           (cmd_mux_019_src_ready),                                //          .ready
		.source0_valid         (nse_from_fpga_s1_burst_adapter_source0_valid),         //   source0.valid
		.source0_data          (nse_from_fpga_s1_burst_adapter_source0_data),          //          .data
		.source0_channel       (nse_from_fpga_s1_burst_adapter_source0_channel),       //          .channel
		.source0_startofpacket (nse_from_fpga_s1_burst_adapter_source0_startofpacket), //          .startofpacket
		.source0_endofpacket   (nse_from_fpga_s1_burst_adapter_source0_endofpacket),   //          .endofpacket
		.source0_ready         (nse_from_fpga_s1_burst_adapter_source0_ready)          //          .ready
	);

	altera_merlin_burst_adapter #(
		.PKT_ADDR_H                (56),
		.PKT_ADDR_L                (36),
		.PKT_BEGIN_BURST           (84),
		.PKT_BYTE_CNT_H            (69),
		.PKT_BYTE_CNT_L            (63),
		.PKT_BYTEEN_H              (35),
		.PKT_BYTEEN_L              (32),
		.PKT_BURST_SIZE_H          (79),
		.PKT_BURST_SIZE_L          (77),
		.PKT_BURST_TYPE_H          (81),
		.PKT_BURST_TYPE_L          (80),
		.PKT_BURSTWRAP_H           (76),
		.PKT_BURSTWRAP_L           (70),
		.PKT_TRANS_COMPRESSED_READ (57),
		.PKT_TRANS_WRITE           (59),
		.PKT_TRANS_READ            (60),
		.OUT_NARROW_SIZE           (0),
		.IN_NARROW_SIZE            (1),
		.OUT_FIXED                 (0),
		.OUT_COMPLETE_WRAP         (0),
		.ST_DATA_W                 (120),
		.ST_CHANNEL_W              (27),
		.OUT_BYTE_CNT_H            (65),
		.OUT_BURSTWRAP_H           (76),
		.COMPRESSED_READ_SUPPORT   (1),
		.BYTEENABLE_SYNTHESIS      (1),
		.PIPE_INPUTS               (0),
		.NO_WRAP_SUPPORT           (0),
		.INCOMPLETE_WRAP_SUPPORT   (0),
		.BURSTWRAP_CONST_MASK      (0),
		.BURSTWRAP_CONST_VALUE     (0),
		.ADAPTER_VERSION           ("13.1")
	) one9th_s1_burst_adapter (
		.clk                   (System_PLL_sys_clk_clk),                        //       cr0.clk
		.reset                 (n0_from_hps_reset_reset_bridge_in_reset_reset), // cr0_reset.reset
		.sink0_valid           (cmd_mux_020_src_valid),                         //     sink0.valid
		.sink0_data            (cmd_mux_020_src_data),                          //          .data
		.sink0_channel         (cmd_mux_020_src_channel),                       //          .channel
		.sink0_startofpacket   (cmd_mux_020_src_startofpacket),                 //          .startofpacket
		.sink0_endofpacket     (cmd_mux_020_src_endofpacket),                   //          .endofpacket
		.sink0_ready           (cmd_mux_020_src_ready),                         //          .ready
		.source0_valid         (one9th_s1_burst_adapter_source0_valid),         //   source0.valid
		.source0_data          (one9th_s1_burst_adapter_source0_data),          //          .data
		.source0_channel       (one9th_s1_burst_adapter_source0_channel),       //          .channel
		.source0_startofpacket (one9th_s1_burst_adapter_source0_startofpacket), //          .startofpacket
		.source0_endofpacket   (one9th_s1_burst_adapter_source0_endofpacket),   //          .endofpacket
		.source0_ready         (one9th_s1_burst_adapter_source0_ready)          //          .ready
	);

	altera_merlin_burst_adapter #(
		.PKT_ADDR_H                (56),
		.PKT_ADDR_L                (36),
		.PKT_BEGIN_BURST           (84),
		.PKT_BYTE_CNT_H            (69),
		.PKT_BYTE_CNT_L            (63),
		.PKT_BYTEEN_H              (35),
		.PKT_BYTEEN_L              (32),
		.PKT_BURST_SIZE_H          (79),
		.PKT_BURST_SIZE_L          (77),
		.PKT_BURST_TYPE_H          (81),
		.PKT_BURST_TYPE_L          (80),
		.PKT_BURSTWRAP_H           (76),
		.PKT_BURSTWRAP_L           (70),
		.PKT_TRANS_COMPRESSED_READ (57),
		.PKT_TRANS_WRITE           (59),
		.PKT_TRANS_READ            (60),
		.OUT_NARROW_SIZE           (0),
		.IN_NARROW_SIZE            (1),
		.OUT_FIXED                 (0),
		.OUT_COMPLETE_WRAP         (0),
		.ST_DATA_W                 (120),
		.ST_CHANNEL_W              (27),
		.OUT_BYTE_CNT_H            (65),
		.OUT_BURSTWRAP_H           (76),
		.COMPRESSED_READ_SUPPORT   (1),
		.BYTEENABLE_SYNTHESIS      (1),
		.PIPE_INPUTS               (0),
		.NO_WRAP_SUPPORT           (0),
		.INCOMPLETE_WRAP_SUPPORT   (0),
		.BURSTWRAP_CONST_MASK      (0),
		.BURSTWRAP_CONST_VALUE     (0),
		.ADAPTER_VERSION           ("13.1")
	) one36th_s1_burst_adapter (
		.clk                   (System_PLL_sys_clk_clk),                         //       cr0.clk
		.reset                 (n0_from_hps_reset_reset_bridge_in_reset_reset),  // cr0_reset.reset
		.sink0_valid           (cmd_mux_021_src_valid),                          //     sink0.valid
		.sink0_data            (cmd_mux_021_src_data),                           //          .data
		.sink0_channel         (cmd_mux_021_src_channel),                        //          .channel
		.sink0_startofpacket   (cmd_mux_021_src_startofpacket),                  //          .startofpacket
		.sink0_endofpacket     (cmd_mux_021_src_endofpacket),                    //          .endofpacket
		.sink0_ready           (cmd_mux_021_src_ready),                          //          .ready
		.source0_valid         (one36th_s1_burst_adapter_source0_valid),         //   source0.valid
		.source0_data          (one36th_s1_burst_adapter_source0_data),          //          .data
		.source0_channel       (one36th_s1_burst_adapter_source0_channel),       //          .channel
		.source0_startofpacket (one36th_s1_burst_adapter_source0_startofpacket), //          .startofpacket
		.source0_endofpacket   (one36th_s1_burst_adapter_source0_endofpacket),   //          .endofpacket
		.source0_ready         (one36th_s1_burst_adapter_source0_ready)          //          .ready
	);

	altera_merlin_burst_adapter #(
		.PKT_ADDR_H                (56),
		.PKT_ADDR_L                (36),
		.PKT_BEGIN_BURST           (84),
		.PKT_BYTE_CNT_H            (69),
		.PKT_BYTE_CNT_L            (63),
		.PKT_BYTEEN_H              (35),
		.PKT_BYTEEN_L              (32),
		.PKT_BURST_SIZE_H          (79),
		.PKT_BURST_SIZE_L          (77),
		.PKT_BURST_TYPE_H          (81),
		.PKT_BURST_TYPE_L          (80),
		.PKT_BURSTWRAP_H           (76),
		.PKT_BURSTWRAP_L           (70),
		.PKT_TRANS_COMPRESSED_READ (57),
		.PKT_TRANS_WRITE           (59),
		.PKT_TRANS_READ            (60),
		.OUT_NARROW_SIZE           (0),
		.IN_NARROW_SIZE            (1),
		.OUT_FIXED                 (0),
		.OUT_COMPLETE_WRAP         (0),
		.ST_DATA_W                 (120),
		.ST_CHANNEL_W              (27),
		.OUT_BYTE_CNT_H            (65),
		.OUT_BURSTWRAP_H           (76),
		.COMPRESSED_READ_SUPPORT   (1),
		.BYTEENABLE_SYNTHESIS      (1),
		.PIPE_INPUTS               (0),
		.NO_WRAP_SUPPORT           (0),
		.INCOMPLETE_WRAP_SUPPORT   (0),
		.BURSTWRAP_CONST_MASK      (0),
		.BURSTWRAP_CONST_VALUE     (0),
		.ADAPTER_VERSION           ("13.1")
	) omega_s1_burst_adapter (
		.clk                   (System_PLL_sys_clk_clk),                        //       cr0.clk
		.reset                 (n0_from_hps_reset_reset_bridge_in_reset_reset), // cr0_reset.reset
		.sink0_valid           (cmd_mux_022_src_valid),                         //     sink0.valid
		.sink0_data            (cmd_mux_022_src_data),                          //          .data
		.sink0_channel         (cmd_mux_022_src_channel),                       //          .channel
		.sink0_startofpacket   (cmd_mux_022_src_startofpacket),                 //          .startofpacket
		.sink0_endofpacket     (cmd_mux_022_src_endofpacket),                   //          .endofpacket
		.sink0_ready           (cmd_mux_022_src_ready),                         //          .ready
		.source0_valid         (omega_s1_burst_adapter_source0_valid),          //   source0.valid
		.source0_data          (omega_s1_burst_adapter_source0_data),           //          .data
		.source0_channel       (omega_s1_burst_adapter_source0_channel),        //          .channel
		.source0_startofpacket (omega_s1_burst_adapter_source0_startofpacket),  //          .startofpacket
		.source0_endofpacket   (omega_s1_burst_adapter_source0_endofpacket),    //          .endofpacket
		.source0_ready         (omega_s1_burst_adapter_source0_ready)           //          .ready
	);

	altera_merlin_burst_adapter #(
		.PKT_ADDR_H                (56),
		.PKT_ADDR_L                (36),
		.PKT_BEGIN_BURST           (84),
		.PKT_BYTE_CNT_H            (69),
		.PKT_BYTE_CNT_L            (63),
		.PKT_BYTEEN_H              (35),
		.PKT_BYTEEN_L              (32),
		.PKT_BURST_SIZE_H          (79),
		.PKT_BURST_SIZE_L          (77),
		.PKT_BURST_TYPE_H          (81),
		.PKT_BURST_TYPE_L          (80),
		.PKT_BURSTWRAP_H           (76),
		.PKT_BURSTWRAP_L           (70),
		.PKT_TRANS_COMPRESSED_READ (57),
		.PKT_TRANS_WRITE           (59),
		.PKT_TRANS_READ            (60),
		.OUT_NARROW_SIZE           (0),
		.IN_NARROW_SIZE            (1),
		.OUT_FIXED                 (0),
		.OUT_COMPLETE_WRAP         (0),
		.ST_DATA_W                 (120),
		.ST_CHANNEL_W              (27),
		.OUT_BYTE_CNT_H            (65),
		.OUT_BURSTWRAP_H           (76),
		.COMPRESSED_READ_SUPPORT   (1),
		.BYTEENABLE_SYNTHESIS      (1),
		.PIPE_INPUTS               (0),
		.NO_WRAP_SUPPORT           (0),
		.INCOMPLETE_WRAP_SUPPORT   (0),
		.BURSTWRAP_CONST_MASK      (0),
		.BURSTWRAP_CONST_VALUE     (0),
		.ADAPTER_VERSION           ("13.1")
	) ux_s1_burst_adapter (
		.clk                   (System_PLL_sys_clk_clk),                        //       cr0.clk
		.reset                 (n0_from_hps_reset_reset_bridge_in_reset_reset), // cr0_reset.reset
		.sink0_valid           (cmd_mux_023_src_valid),                         //     sink0.valid
		.sink0_data            (cmd_mux_023_src_data),                          //          .data
		.sink0_channel         (cmd_mux_023_src_channel),                       //          .channel
		.sink0_startofpacket   (cmd_mux_023_src_startofpacket),                 //          .startofpacket
		.sink0_endofpacket     (cmd_mux_023_src_endofpacket),                   //          .endofpacket
		.sink0_ready           (cmd_mux_023_src_ready),                         //          .ready
		.source0_valid         (ux_s1_burst_adapter_source0_valid),             //   source0.valid
		.source0_data          (ux_s1_burst_adapter_source0_data),              //          .data
		.source0_channel       (ux_s1_burst_adapter_source0_channel),           //          .channel
		.source0_startofpacket (ux_s1_burst_adapter_source0_startofpacket),     //          .startofpacket
		.source0_endofpacket   (ux_s1_burst_adapter_source0_endofpacket),       //          .endofpacket
		.source0_ready         (ux_s1_burst_adapter_source0_ready)              //          .ready
	);

	altera_merlin_burst_adapter #(
		.PKT_ADDR_H                (56),
		.PKT_ADDR_L                (36),
		.PKT_BEGIN_BURST           (84),
		.PKT_BYTE_CNT_H            (69),
		.PKT_BYTE_CNT_L            (63),
		.PKT_BYTEEN_H              (35),
		.PKT_BYTEEN_L              (32),
		.PKT_BURST_SIZE_H          (79),
		.PKT_BURST_SIZE_L          (77),
		.PKT_BURST_TYPE_H          (81),
		.PKT_BURST_TYPE_L          (80),
		.PKT_BURSTWRAP_H           (76),
		.PKT_BURSTWRAP_L           (70),
		.PKT_TRANS_COMPRESSED_READ (57),
		.PKT_TRANS_WRITE           (59),
		.PKT_TRANS_READ            (60),
		.OUT_NARROW_SIZE           (0),
		.IN_NARROW_SIZE            (1),
		.OUT_FIXED                 (0),
		.OUT_COMPLETE_WRAP         (0),
		.ST_DATA_W                 (120),
		.ST_CHANNEL_W              (27),
		.OUT_BYTE_CNT_H            (65),
		.OUT_BURSTWRAP_H           (76),
		.COMPRESSED_READ_SUPPORT   (1),
		.BYTEENABLE_SYNTHESIS      (1),
		.PIPE_INPUTS               (0),
		.NO_WRAP_SUPPORT           (0),
		.INCOMPLETE_WRAP_SUPPORT   (0),
		.BURSTWRAP_CONST_MASK      (0),
		.BURSTWRAP_CONST_VALUE     (0),
		.ADAPTER_VERSION           ("13.1")
	) uy_s1_burst_adapter (
		.clk                   (System_PLL_sys_clk_clk),                        //       cr0.clk
		.reset                 (n0_from_hps_reset_reset_bridge_in_reset_reset), // cr0_reset.reset
		.sink0_valid           (cmd_mux_024_src_valid),                         //     sink0.valid
		.sink0_data            (cmd_mux_024_src_data),                          //          .data
		.sink0_channel         (cmd_mux_024_src_channel),                       //          .channel
		.sink0_startofpacket   (cmd_mux_024_src_startofpacket),                 //          .startofpacket
		.sink0_endofpacket     (cmd_mux_024_src_endofpacket),                   //          .endofpacket
		.sink0_ready           (cmd_mux_024_src_ready),                         //          .ready
		.source0_valid         (uy_s1_burst_adapter_source0_valid),             //   source0.valid
		.source0_data          (uy_s1_burst_adapter_source0_data),              //          .data
		.source0_channel       (uy_s1_burst_adapter_source0_channel),           //          .channel
		.source0_startofpacket (uy_s1_burst_adapter_source0_startofpacket),     //          .startofpacket
		.source0_endofpacket   (uy_s1_burst_adapter_source0_endofpacket),       //          .endofpacket
		.source0_ready         (uy_s1_burst_adapter_source0_ready)              //          .ready
	);

	altera_merlin_burst_adapter #(
		.PKT_ADDR_H                (56),
		.PKT_ADDR_L                (36),
		.PKT_BEGIN_BURST           (84),
		.PKT_BYTE_CNT_H            (69),
		.PKT_BYTE_CNT_L            (63),
		.PKT_BYTEEN_H              (35),
		.PKT_BYTEEN_L              (32),
		.PKT_BURST_SIZE_H          (79),
		.PKT_BURST_SIZE_L          (77),
		.PKT_BURST_TYPE_H          (81),
		.PKT_BURST_TYPE_L          (80),
		.PKT_BURSTWRAP_H           (76),
		.PKT_BURSTWRAP_L           (70),
		.PKT_TRANS_COMPRESSED_READ (57),
		.PKT_TRANS_WRITE           (59),
		.PKT_TRANS_READ            (60),
		.OUT_NARROW_SIZE           (0),
		.IN_NARROW_SIZE            (1),
		.OUT_FIXED                 (0),
		.OUT_COMPLETE_WRAP         (0),
		.ST_DATA_W                 (120),
		.ST_CHANNEL_W              (27),
		.OUT_BYTE_CNT_H            (65),
		.OUT_BURSTWRAP_H           (76),
		.COMPRESSED_READ_SUPPORT   (1),
		.BYTEENABLE_SYNTHESIS      (1),
		.PIPE_INPUTS               (0),
		.NO_WRAP_SUPPORT           (0),
		.INCOMPLETE_WRAP_SUPPORT   (0),
		.BURSTWRAP_CONST_MASK      (0),
		.BURSTWRAP_CONST_VALUE     (0),
		.ADAPTER_VERSION           ("13.1")
	) pipes_s1_burst_adapter (
		.clk                   (System_PLL_sys_clk_clk),                        //       cr0.clk
		.reset                 (n0_from_hps_reset_reset_bridge_in_reset_reset), // cr0_reset.reset
		.sink0_valid           (cmd_mux_025_src_valid),                         //     sink0.valid
		.sink0_data            (cmd_mux_025_src_data),                          //          .data
		.sink0_channel         (cmd_mux_025_src_channel),                       //          .channel
		.sink0_startofpacket   (cmd_mux_025_src_startofpacket),                 //          .startofpacket
		.sink0_endofpacket     (cmd_mux_025_src_endofpacket),                   //          .endofpacket
		.sink0_ready           (cmd_mux_025_src_ready),                         //          .ready
		.source0_valid         (pipes_s1_burst_adapter_source0_valid),          //   source0.valid
		.source0_data          (pipes_s1_burst_adapter_source0_data),           //          .data
		.source0_channel       (pipes_s1_burst_adapter_source0_channel),        //          .channel
		.source0_startofpacket (pipes_s1_burst_adapter_source0_startofpacket),  //          .startofpacket
		.source0_endofpacket   (pipes_s1_burst_adapter_source0_endofpacket),    //          .endofpacket
		.source0_ready         (pipes_s1_burst_adapter_source0_ready)           //          .ready
	);

	altera_merlin_burst_adapter #(
		.PKT_ADDR_H                (56),
		.PKT_ADDR_L                (36),
		.PKT_BEGIN_BURST           (84),
		.PKT_BYTE_CNT_H            (69),
		.PKT_BYTE_CNT_L            (63),
		.PKT_BYTEEN_H              (35),
		.PKT_BYTEEN_L              (32),
		.PKT_BURST_SIZE_H          (79),
		.PKT_BURST_SIZE_L          (77),
		.PKT_BURST_TYPE_H          (81),
		.PKT_BURST_TYPE_L          (80),
		.PKT_BURSTWRAP_H           (76),
		.PKT_BURSTWRAP_L           (70),
		.PKT_TRANS_COMPRESSED_READ (57),
		.PKT_TRANS_WRITE           (59),
		.PKT_TRANS_READ            (60),
		.OUT_NARROW_SIZE           (0),
		.IN_NARROW_SIZE            (1),
		.OUT_FIXED                 (0),
		.OUT_COMPLETE_WRAP         (0),
		.ST_DATA_W                 (120),
		.ST_CHANNEL_W              (27),
		.OUT_BYTE_CNT_H            (65),
		.OUT_BURSTWRAP_H           (76),
		.COMPRESSED_READ_SUPPORT   (1),
		.BYTEENABLE_SYNTHESIS      (1),
		.PIPE_INPUTS               (0),
		.NO_WRAP_SUPPORT           (0),
		.INCOMPLETE_WRAP_SUPPORT   (0),
		.BURSTWRAP_CONST_MASK      (0),
		.BURSTWRAP_CONST_VALUE     (0),
		.ADAPTER_VERSION           ("13.1")
	) pixel_dma_addr_translation_slave_burst_adapter (
		.clk                   (System_PLL_sys_clk_clk),                                               //       cr0.clk
		.reset                 (AV_Config_reset_reset_bridge_in_reset_reset),                          // cr0_reset.reset
		.sink0_valid           (cmd_mux_026_src_valid),                                                //     sink0.valid
		.sink0_data            (cmd_mux_026_src_data),                                                 //          .data
		.sink0_channel         (cmd_mux_026_src_channel),                                              //          .channel
		.sink0_startofpacket   (cmd_mux_026_src_startofpacket),                                        //          .startofpacket
		.sink0_endofpacket     (cmd_mux_026_src_endofpacket),                                          //          .endofpacket
		.sink0_ready           (cmd_mux_026_src_ready),                                                //          .ready
		.source0_valid         (pixel_dma_addr_translation_slave_burst_adapter_source0_valid),         //   source0.valid
		.source0_data          (pixel_dma_addr_translation_slave_burst_adapter_source0_data),          //          .data
		.source0_channel       (pixel_dma_addr_translation_slave_burst_adapter_source0_channel),       //          .channel
		.source0_startofpacket (pixel_dma_addr_translation_slave_burst_adapter_source0_startofpacket), //          .startofpacket
		.source0_endofpacket   (pixel_dma_addr_translation_slave_burst_adapter_source0_endofpacket),   //          .endofpacket
		.source0_ready         (pixel_dma_addr_translation_slave_burst_adapter_source0_ready)          //          .ready
	);

	Computer_System_mm_interconnect_1_cmd_demux cmd_demux (
		.clk                 (System_PLL_sys_clk_clk),                                                   //        clk.clk
		.reset               (ARM_A9_HPS_h2f_lw_axi_master_agent_clk_reset_reset_bridge_in_reset_reset), //  clk_reset.reset
		.sink_ready          (arm_a9_hps_h2f_lw_axi_master_wr_limiter_cmd_src_ready),                    //       sink.ready
		.sink_channel        (arm_a9_hps_h2f_lw_axi_master_wr_limiter_cmd_src_channel),                  //           .channel
		.sink_data           (arm_a9_hps_h2f_lw_axi_master_wr_limiter_cmd_src_data),                     //           .data
		.sink_startofpacket  (arm_a9_hps_h2f_lw_axi_master_wr_limiter_cmd_src_startofpacket),            //           .startofpacket
		.sink_endofpacket    (arm_a9_hps_h2f_lw_axi_master_wr_limiter_cmd_src_endofpacket),              //           .endofpacket
		.sink_valid          (arm_a9_hps_h2f_lw_axi_master_wr_limiter_cmd_valid_data),                   // sink_valid.data
		.src0_ready          (cmd_demux_src0_ready),                                                     //       src0.ready
		.src0_valid          (cmd_demux_src0_valid),                                                     //           .valid
		.src0_data           (cmd_demux_src0_data),                                                      //           .data
		.src0_channel        (cmd_demux_src0_channel),                                                   //           .channel
		.src0_startofpacket  (cmd_demux_src0_startofpacket),                                             //           .startofpacket
		.src0_endofpacket    (cmd_demux_src0_endofpacket),                                               //           .endofpacket
		.src1_ready          (cmd_demux_src1_ready),                                                     //       src1.ready
		.src1_valid          (cmd_demux_src1_valid),                                                     //           .valid
		.src1_data           (cmd_demux_src1_data),                                                      //           .data
		.src1_channel        (cmd_demux_src1_channel),                                                   //           .channel
		.src1_startofpacket  (cmd_demux_src1_startofpacket),                                             //           .startofpacket
		.src1_endofpacket    (cmd_demux_src1_endofpacket),                                               //           .endofpacket
		.src2_ready          (cmd_demux_src2_ready),                                                     //       src2.ready
		.src2_valid          (cmd_demux_src2_valid),                                                     //           .valid
		.src2_data           (cmd_demux_src2_data),                                                      //           .data
		.src2_channel        (cmd_demux_src2_channel),                                                   //           .channel
		.src2_startofpacket  (cmd_demux_src2_startofpacket),                                             //           .startofpacket
		.src2_endofpacket    (cmd_demux_src2_endofpacket),                                               //           .endofpacket
		.src3_ready          (cmd_demux_src3_ready),                                                     //       src3.ready
		.src3_valid          (cmd_demux_src3_valid),                                                     //           .valid
		.src3_data           (cmd_demux_src3_data),                                                      //           .data
		.src3_channel        (cmd_demux_src3_channel),                                                   //           .channel
		.src3_startofpacket  (cmd_demux_src3_startofpacket),                                             //           .startofpacket
		.src3_endofpacket    (cmd_demux_src3_endofpacket),                                               //           .endofpacket
		.src4_ready          (cmd_demux_src4_ready),                                                     //       src4.ready
		.src4_valid          (cmd_demux_src4_valid),                                                     //           .valid
		.src4_data           (cmd_demux_src4_data),                                                      //           .data
		.src4_channel        (cmd_demux_src4_channel),                                                   //           .channel
		.src4_startofpacket  (cmd_demux_src4_startofpacket),                                             //           .startofpacket
		.src4_endofpacket    (cmd_demux_src4_endofpacket),                                               //           .endofpacket
		.src5_ready          (cmd_demux_src5_ready),                                                     //       src5.ready
		.src5_valid          (cmd_demux_src5_valid),                                                     //           .valid
		.src5_data           (cmd_demux_src5_data),                                                      //           .data
		.src5_channel        (cmd_demux_src5_channel),                                                   //           .channel
		.src5_startofpacket  (cmd_demux_src5_startofpacket),                                             //           .startofpacket
		.src5_endofpacket    (cmd_demux_src5_endofpacket),                                               //           .endofpacket
		.src6_ready          (cmd_demux_src6_ready),                                                     //       src6.ready
		.src6_valid          (cmd_demux_src6_valid),                                                     //           .valid
		.src6_data           (cmd_demux_src6_data),                                                      //           .data
		.src6_channel        (cmd_demux_src6_channel),                                                   //           .channel
		.src6_startofpacket  (cmd_demux_src6_startofpacket),                                             //           .startofpacket
		.src6_endofpacket    (cmd_demux_src6_endofpacket),                                               //           .endofpacket
		.src7_ready          (cmd_demux_src7_ready),                                                     //       src7.ready
		.src7_valid          (cmd_demux_src7_valid),                                                     //           .valid
		.src7_data           (cmd_demux_src7_data),                                                      //           .data
		.src7_channel        (cmd_demux_src7_channel),                                                   //           .channel
		.src7_startofpacket  (cmd_demux_src7_startofpacket),                                             //           .startofpacket
		.src7_endofpacket    (cmd_demux_src7_endofpacket),                                               //           .endofpacket
		.src8_ready          (cmd_demux_src8_ready),                                                     //       src8.ready
		.src8_valid          (cmd_demux_src8_valid),                                                     //           .valid
		.src8_data           (cmd_demux_src8_data),                                                      //           .data
		.src8_channel        (cmd_demux_src8_channel),                                                   //           .channel
		.src8_startofpacket  (cmd_demux_src8_startofpacket),                                             //           .startofpacket
		.src8_endofpacket    (cmd_demux_src8_endofpacket),                                               //           .endofpacket
		.src9_ready          (cmd_demux_src9_ready),                                                     //       src9.ready
		.src9_valid          (cmd_demux_src9_valid),                                                     //           .valid
		.src9_data           (cmd_demux_src9_data),                                                      //           .data
		.src9_channel        (cmd_demux_src9_channel),                                                   //           .channel
		.src9_startofpacket  (cmd_demux_src9_startofpacket),                                             //           .startofpacket
		.src9_endofpacket    (cmd_demux_src9_endofpacket),                                               //           .endofpacket
		.src10_ready         (cmd_demux_src10_ready),                                                    //      src10.ready
		.src10_valid         (cmd_demux_src10_valid),                                                    //           .valid
		.src10_data          (cmd_demux_src10_data),                                                     //           .data
		.src10_channel       (cmd_demux_src10_channel),                                                  //           .channel
		.src10_startofpacket (cmd_demux_src10_startofpacket),                                            //           .startofpacket
		.src10_endofpacket   (cmd_demux_src10_endofpacket),                                              //           .endofpacket
		.src11_ready         (cmd_demux_src11_ready),                                                    //      src11.ready
		.src11_valid         (cmd_demux_src11_valid),                                                    //           .valid
		.src11_data          (cmd_demux_src11_data),                                                     //           .data
		.src11_channel       (cmd_demux_src11_channel),                                                  //           .channel
		.src11_startofpacket (cmd_demux_src11_startofpacket),                                            //           .startofpacket
		.src11_endofpacket   (cmd_demux_src11_endofpacket),                                              //           .endofpacket
		.src12_ready         (cmd_demux_src12_ready),                                                    //      src12.ready
		.src12_valid         (cmd_demux_src12_valid),                                                    //           .valid
		.src12_data          (cmd_demux_src12_data),                                                     //           .data
		.src12_channel       (cmd_demux_src12_channel),                                                  //           .channel
		.src12_startofpacket (cmd_demux_src12_startofpacket),                                            //           .startofpacket
		.src12_endofpacket   (cmd_demux_src12_endofpacket),                                              //           .endofpacket
		.src13_ready         (cmd_demux_src13_ready),                                                    //      src13.ready
		.src13_valid         (cmd_demux_src13_valid),                                                    //           .valid
		.src13_data          (cmd_demux_src13_data),                                                     //           .data
		.src13_channel       (cmd_demux_src13_channel),                                                  //           .channel
		.src13_startofpacket (cmd_demux_src13_startofpacket),                                            //           .startofpacket
		.src13_endofpacket   (cmd_demux_src13_endofpacket),                                              //           .endofpacket
		.src14_ready         (cmd_demux_src14_ready),                                                    //      src14.ready
		.src14_valid         (cmd_demux_src14_valid),                                                    //           .valid
		.src14_data          (cmd_demux_src14_data),                                                     //           .data
		.src14_channel       (cmd_demux_src14_channel),                                                  //           .channel
		.src14_startofpacket (cmd_demux_src14_startofpacket),                                            //           .startofpacket
		.src14_endofpacket   (cmd_demux_src14_endofpacket),                                              //           .endofpacket
		.src15_ready         (cmd_demux_src15_ready),                                                    //      src15.ready
		.src15_valid         (cmd_demux_src15_valid),                                                    //           .valid
		.src15_data          (cmd_demux_src15_data),                                                     //           .data
		.src15_channel       (cmd_demux_src15_channel),                                                  //           .channel
		.src15_startofpacket (cmd_demux_src15_startofpacket),                                            //           .startofpacket
		.src15_endofpacket   (cmd_demux_src15_endofpacket),                                              //           .endofpacket
		.src16_ready         (cmd_demux_src16_ready),                                                    //      src16.ready
		.src16_valid         (cmd_demux_src16_valid),                                                    //           .valid
		.src16_data          (cmd_demux_src16_data),                                                     //           .data
		.src16_channel       (cmd_demux_src16_channel),                                                  //           .channel
		.src16_startofpacket (cmd_demux_src16_startofpacket),                                            //           .startofpacket
		.src16_endofpacket   (cmd_demux_src16_endofpacket),                                              //           .endofpacket
		.src17_ready         (cmd_demux_src17_ready),                                                    //      src17.ready
		.src17_valid         (cmd_demux_src17_valid),                                                    //           .valid
		.src17_data          (cmd_demux_src17_data),                                                     //           .data
		.src17_channel       (cmd_demux_src17_channel),                                                  //           .channel
		.src17_startofpacket (cmd_demux_src17_startofpacket),                                            //           .startofpacket
		.src17_endofpacket   (cmd_demux_src17_endofpacket),                                              //           .endofpacket
		.src18_ready         (cmd_demux_src18_ready),                                                    //      src18.ready
		.src18_valid         (cmd_demux_src18_valid),                                                    //           .valid
		.src18_data          (cmd_demux_src18_data),                                                     //           .data
		.src18_channel       (cmd_demux_src18_channel),                                                  //           .channel
		.src18_startofpacket (cmd_demux_src18_startofpacket),                                            //           .startofpacket
		.src18_endofpacket   (cmd_demux_src18_endofpacket),                                              //           .endofpacket
		.src19_ready         (cmd_demux_src19_ready),                                                    //      src19.ready
		.src19_valid         (cmd_demux_src19_valid),                                                    //           .valid
		.src19_data          (cmd_demux_src19_data),                                                     //           .data
		.src19_channel       (cmd_demux_src19_channel),                                                  //           .channel
		.src19_startofpacket (cmd_demux_src19_startofpacket),                                            //           .startofpacket
		.src19_endofpacket   (cmd_demux_src19_endofpacket),                                              //           .endofpacket
		.src20_ready         (cmd_demux_src20_ready),                                                    //      src20.ready
		.src20_valid         (cmd_demux_src20_valid),                                                    //           .valid
		.src20_data          (cmd_demux_src20_data),                                                     //           .data
		.src20_channel       (cmd_demux_src20_channel),                                                  //           .channel
		.src20_startofpacket (cmd_demux_src20_startofpacket),                                            //           .startofpacket
		.src20_endofpacket   (cmd_demux_src20_endofpacket),                                              //           .endofpacket
		.src21_ready         (cmd_demux_src21_ready),                                                    //      src21.ready
		.src21_valid         (cmd_demux_src21_valid),                                                    //           .valid
		.src21_data          (cmd_demux_src21_data),                                                     //           .data
		.src21_channel       (cmd_demux_src21_channel),                                                  //           .channel
		.src21_startofpacket (cmd_demux_src21_startofpacket),                                            //           .startofpacket
		.src21_endofpacket   (cmd_demux_src21_endofpacket),                                              //           .endofpacket
		.src22_ready         (cmd_demux_src22_ready),                                                    //      src22.ready
		.src22_valid         (cmd_demux_src22_valid),                                                    //           .valid
		.src22_data          (cmd_demux_src22_data),                                                     //           .data
		.src22_channel       (cmd_demux_src22_channel),                                                  //           .channel
		.src22_startofpacket (cmd_demux_src22_startofpacket),                                            //           .startofpacket
		.src22_endofpacket   (cmd_demux_src22_endofpacket),                                              //           .endofpacket
		.src23_ready         (cmd_demux_src23_ready),                                                    //      src23.ready
		.src23_valid         (cmd_demux_src23_valid),                                                    //           .valid
		.src23_data          (cmd_demux_src23_data),                                                     //           .data
		.src23_channel       (cmd_demux_src23_channel),                                                  //           .channel
		.src23_startofpacket (cmd_demux_src23_startofpacket),                                            //           .startofpacket
		.src23_endofpacket   (cmd_demux_src23_endofpacket),                                              //           .endofpacket
		.src24_ready         (cmd_demux_src24_ready),                                                    //      src24.ready
		.src24_valid         (cmd_demux_src24_valid),                                                    //           .valid
		.src24_data          (cmd_demux_src24_data),                                                     //           .data
		.src24_channel       (cmd_demux_src24_channel),                                                  //           .channel
		.src24_startofpacket (cmd_demux_src24_startofpacket),                                            //           .startofpacket
		.src24_endofpacket   (cmd_demux_src24_endofpacket),                                              //           .endofpacket
		.src25_ready         (cmd_demux_src25_ready),                                                    //      src25.ready
		.src25_valid         (cmd_demux_src25_valid),                                                    //           .valid
		.src25_data          (cmd_demux_src25_data),                                                     //           .data
		.src25_channel       (cmd_demux_src25_channel),                                                  //           .channel
		.src25_startofpacket (cmd_demux_src25_startofpacket),                                            //           .startofpacket
		.src25_endofpacket   (cmd_demux_src25_endofpacket),                                              //           .endofpacket
		.src26_ready         (cmd_demux_src26_ready),                                                    //      src26.ready
		.src26_valid         (cmd_demux_src26_valid),                                                    //           .valid
		.src26_data          (cmd_demux_src26_data),                                                     //           .data
		.src26_channel       (cmd_demux_src26_channel),                                                  //           .channel
		.src26_startofpacket (cmd_demux_src26_startofpacket),                                            //           .startofpacket
		.src26_endofpacket   (cmd_demux_src26_endofpacket)                                               //           .endofpacket
	);

	Computer_System_mm_interconnect_1_cmd_demux cmd_demux_001 (
		.clk                 (System_PLL_sys_clk_clk),                                                   //        clk.clk
		.reset               (ARM_A9_HPS_h2f_lw_axi_master_agent_clk_reset_reset_bridge_in_reset_reset), //  clk_reset.reset
		.sink_ready          (arm_a9_hps_h2f_lw_axi_master_rd_limiter_cmd_src_ready),                    //       sink.ready
		.sink_channel        (arm_a9_hps_h2f_lw_axi_master_rd_limiter_cmd_src_channel),                  //           .channel
		.sink_data           (arm_a9_hps_h2f_lw_axi_master_rd_limiter_cmd_src_data),                     //           .data
		.sink_startofpacket  (arm_a9_hps_h2f_lw_axi_master_rd_limiter_cmd_src_startofpacket),            //           .startofpacket
		.sink_endofpacket    (arm_a9_hps_h2f_lw_axi_master_rd_limiter_cmd_src_endofpacket),              //           .endofpacket
		.sink_valid          (arm_a9_hps_h2f_lw_axi_master_rd_limiter_cmd_valid_data),                   // sink_valid.data
		.src0_ready          (cmd_demux_001_src0_ready),                                                 //       src0.ready
		.src0_valid          (cmd_demux_001_src0_valid),                                                 //           .valid
		.src0_data           (cmd_demux_001_src0_data),                                                  //           .data
		.src0_channel        (cmd_demux_001_src0_channel),                                               //           .channel
		.src0_startofpacket  (cmd_demux_001_src0_startofpacket),                                         //           .startofpacket
		.src0_endofpacket    (cmd_demux_001_src0_endofpacket),                                           //           .endofpacket
		.src1_ready          (cmd_demux_001_src1_ready),                                                 //       src1.ready
		.src1_valid          (cmd_demux_001_src1_valid),                                                 //           .valid
		.src1_data           (cmd_demux_001_src1_data),                                                  //           .data
		.src1_channel        (cmd_demux_001_src1_channel),                                               //           .channel
		.src1_startofpacket  (cmd_demux_001_src1_startofpacket),                                         //           .startofpacket
		.src1_endofpacket    (cmd_demux_001_src1_endofpacket),                                           //           .endofpacket
		.src2_ready          (cmd_demux_001_src2_ready),                                                 //       src2.ready
		.src2_valid          (cmd_demux_001_src2_valid),                                                 //           .valid
		.src2_data           (cmd_demux_001_src2_data),                                                  //           .data
		.src2_channel        (cmd_demux_001_src2_channel),                                               //           .channel
		.src2_startofpacket  (cmd_demux_001_src2_startofpacket),                                         //           .startofpacket
		.src2_endofpacket    (cmd_demux_001_src2_endofpacket),                                           //           .endofpacket
		.src3_ready          (cmd_demux_001_src3_ready),                                                 //       src3.ready
		.src3_valid          (cmd_demux_001_src3_valid),                                                 //           .valid
		.src3_data           (cmd_demux_001_src3_data),                                                  //           .data
		.src3_channel        (cmd_demux_001_src3_channel),                                               //           .channel
		.src3_startofpacket  (cmd_demux_001_src3_startofpacket),                                         //           .startofpacket
		.src3_endofpacket    (cmd_demux_001_src3_endofpacket),                                           //           .endofpacket
		.src4_ready          (cmd_demux_001_src4_ready),                                                 //       src4.ready
		.src4_valid          (cmd_demux_001_src4_valid),                                                 //           .valid
		.src4_data           (cmd_demux_001_src4_data),                                                  //           .data
		.src4_channel        (cmd_demux_001_src4_channel),                                               //           .channel
		.src4_startofpacket  (cmd_demux_001_src4_startofpacket),                                         //           .startofpacket
		.src4_endofpacket    (cmd_demux_001_src4_endofpacket),                                           //           .endofpacket
		.src5_ready          (cmd_demux_001_src5_ready),                                                 //       src5.ready
		.src5_valid          (cmd_demux_001_src5_valid),                                                 //           .valid
		.src5_data           (cmd_demux_001_src5_data),                                                  //           .data
		.src5_channel        (cmd_demux_001_src5_channel),                                               //           .channel
		.src5_startofpacket  (cmd_demux_001_src5_startofpacket),                                         //           .startofpacket
		.src5_endofpacket    (cmd_demux_001_src5_endofpacket),                                           //           .endofpacket
		.src6_ready          (cmd_demux_001_src6_ready),                                                 //       src6.ready
		.src6_valid          (cmd_demux_001_src6_valid),                                                 //           .valid
		.src6_data           (cmd_demux_001_src6_data),                                                  //           .data
		.src6_channel        (cmd_demux_001_src6_channel),                                               //           .channel
		.src6_startofpacket  (cmd_demux_001_src6_startofpacket),                                         //           .startofpacket
		.src6_endofpacket    (cmd_demux_001_src6_endofpacket),                                           //           .endofpacket
		.src7_ready          (cmd_demux_001_src7_ready),                                                 //       src7.ready
		.src7_valid          (cmd_demux_001_src7_valid),                                                 //           .valid
		.src7_data           (cmd_demux_001_src7_data),                                                  //           .data
		.src7_channel        (cmd_demux_001_src7_channel),                                               //           .channel
		.src7_startofpacket  (cmd_demux_001_src7_startofpacket),                                         //           .startofpacket
		.src7_endofpacket    (cmd_demux_001_src7_endofpacket),                                           //           .endofpacket
		.src8_ready          (cmd_demux_001_src8_ready),                                                 //       src8.ready
		.src8_valid          (cmd_demux_001_src8_valid),                                                 //           .valid
		.src8_data           (cmd_demux_001_src8_data),                                                  //           .data
		.src8_channel        (cmd_demux_001_src8_channel),                                               //           .channel
		.src8_startofpacket  (cmd_demux_001_src8_startofpacket),                                         //           .startofpacket
		.src8_endofpacket    (cmd_demux_001_src8_endofpacket),                                           //           .endofpacket
		.src9_ready          (cmd_demux_001_src9_ready),                                                 //       src9.ready
		.src9_valid          (cmd_demux_001_src9_valid),                                                 //           .valid
		.src9_data           (cmd_demux_001_src9_data),                                                  //           .data
		.src9_channel        (cmd_demux_001_src9_channel),                                               //           .channel
		.src9_startofpacket  (cmd_demux_001_src9_startofpacket),                                         //           .startofpacket
		.src9_endofpacket    (cmd_demux_001_src9_endofpacket),                                           //           .endofpacket
		.src10_ready         (cmd_demux_001_src10_ready),                                                //      src10.ready
		.src10_valid         (cmd_demux_001_src10_valid),                                                //           .valid
		.src10_data          (cmd_demux_001_src10_data),                                                 //           .data
		.src10_channel       (cmd_demux_001_src10_channel),                                              //           .channel
		.src10_startofpacket (cmd_demux_001_src10_startofpacket),                                        //           .startofpacket
		.src10_endofpacket   (cmd_demux_001_src10_endofpacket),                                          //           .endofpacket
		.src11_ready         (cmd_demux_001_src11_ready),                                                //      src11.ready
		.src11_valid         (cmd_demux_001_src11_valid),                                                //           .valid
		.src11_data          (cmd_demux_001_src11_data),                                                 //           .data
		.src11_channel       (cmd_demux_001_src11_channel),                                              //           .channel
		.src11_startofpacket (cmd_demux_001_src11_startofpacket),                                        //           .startofpacket
		.src11_endofpacket   (cmd_demux_001_src11_endofpacket),                                          //           .endofpacket
		.src12_ready         (cmd_demux_001_src12_ready),                                                //      src12.ready
		.src12_valid         (cmd_demux_001_src12_valid),                                                //           .valid
		.src12_data          (cmd_demux_001_src12_data),                                                 //           .data
		.src12_channel       (cmd_demux_001_src12_channel),                                              //           .channel
		.src12_startofpacket (cmd_demux_001_src12_startofpacket),                                        //           .startofpacket
		.src12_endofpacket   (cmd_demux_001_src12_endofpacket),                                          //           .endofpacket
		.src13_ready         (cmd_demux_001_src13_ready),                                                //      src13.ready
		.src13_valid         (cmd_demux_001_src13_valid),                                                //           .valid
		.src13_data          (cmd_demux_001_src13_data),                                                 //           .data
		.src13_channel       (cmd_demux_001_src13_channel),                                              //           .channel
		.src13_startofpacket (cmd_demux_001_src13_startofpacket),                                        //           .startofpacket
		.src13_endofpacket   (cmd_demux_001_src13_endofpacket),                                          //           .endofpacket
		.src14_ready         (cmd_demux_001_src14_ready),                                                //      src14.ready
		.src14_valid         (cmd_demux_001_src14_valid),                                                //           .valid
		.src14_data          (cmd_demux_001_src14_data),                                                 //           .data
		.src14_channel       (cmd_demux_001_src14_channel),                                              //           .channel
		.src14_startofpacket (cmd_demux_001_src14_startofpacket),                                        //           .startofpacket
		.src14_endofpacket   (cmd_demux_001_src14_endofpacket),                                          //           .endofpacket
		.src15_ready         (cmd_demux_001_src15_ready),                                                //      src15.ready
		.src15_valid         (cmd_demux_001_src15_valid),                                                //           .valid
		.src15_data          (cmd_demux_001_src15_data),                                                 //           .data
		.src15_channel       (cmd_demux_001_src15_channel),                                              //           .channel
		.src15_startofpacket (cmd_demux_001_src15_startofpacket),                                        //           .startofpacket
		.src15_endofpacket   (cmd_demux_001_src15_endofpacket),                                          //           .endofpacket
		.src16_ready         (cmd_demux_001_src16_ready),                                                //      src16.ready
		.src16_valid         (cmd_demux_001_src16_valid),                                                //           .valid
		.src16_data          (cmd_demux_001_src16_data),                                                 //           .data
		.src16_channel       (cmd_demux_001_src16_channel),                                              //           .channel
		.src16_startofpacket (cmd_demux_001_src16_startofpacket),                                        //           .startofpacket
		.src16_endofpacket   (cmd_demux_001_src16_endofpacket),                                          //           .endofpacket
		.src17_ready         (cmd_demux_001_src17_ready),                                                //      src17.ready
		.src17_valid         (cmd_demux_001_src17_valid),                                                //           .valid
		.src17_data          (cmd_demux_001_src17_data),                                                 //           .data
		.src17_channel       (cmd_demux_001_src17_channel),                                              //           .channel
		.src17_startofpacket (cmd_demux_001_src17_startofpacket),                                        //           .startofpacket
		.src17_endofpacket   (cmd_demux_001_src17_endofpacket),                                          //           .endofpacket
		.src18_ready         (cmd_demux_001_src18_ready),                                                //      src18.ready
		.src18_valid         (cmd_demux_001_src18_valid),                                                //           .valid
		.src18_data          (cmd_demux_001_src18_data),                                                 //           .data
		.src18_channel       (cmd_demux_001_src18_channel),                                              //           .channel
		.src18_startofpacket (cmd_demux_001_src18_startofpacket),                                        //           .startofpacket
		.src18_endofpacket   (cmd_demux_001_src18_endofpacket),                                          //           .endofpacket
		.src19_ready         (cmd_demux_001_src19_ready),                                                //      src19.ready
		.src19_valid         (cmd_demux_001_src19_valid),                                                //           .valid
		.src19_data          (cmd_demux_001_src19_data),                                                 //           .data
		.src19_channel       (cmd_demux_001_src19_channel),                                              //           .channel
		.src19_startofpacket (cmd_demux_001_src19_startofpacket),                                        //           .startofpacket
		.src19_endofpacket   (cmd_demux_001_src19_endofpacket),                                          //           .endofpacket
		.src20_ready         (cmd_demux_001_src20_ready),                                                //      src20.ready
		.src20_valid         (cmd_demux_001_src20_valid),                                                //           .valid
		.src20_data          (cmd_demux_001_src20_data),                                                 //           .data
		.src20_channel       (cmd_demux_001_src20_channel),                                              //           .channel
		.src20_startofpacket (cmd_demux_001_src20_startofpacket),                                        //           .startofpacket
		.src20_endofpacket   (cmd_demux_001_src20_endofpacket),                                          //           .endofpacket
		.src21_ready         (cmd_demux_001_src21_ready),                                                //      src21.ready
		.src21_valid         (cmd_demux_001_src21_valid),                                                //           .valid
		.src21_data          (cmd_demux_001_src21_data),                                                 //           .data
		.src21_channel       (cmd_demux_001_src21_channel),                                              //           .channel
		.src21_startofpacket (cmd_demux_001_src21_startofpacket),                                        //           .startofpacket
		.src21_endofpacket   (cmd_demux_001_src21_endofpacket),                                          //           .endofpacket
		.src22_ready         (cmd_demux_001_src22_ready),                                                //      src22.ready
		.src22_valid         (cmd_demux_001_src22_valid),                                                //           .valid
		.src22_data          (cmd_demux_001_src22_data),                                                 //           .data
		.src22_channel       (cmd_demux_001_src22_channel),                                              //           .channel
		.src22_startofpacket (cmd_demux_001_src22_startofpacket),                                        //           .startofpacket
		.src22_endofpacket   (cmd_demux_001_src22_endofpacket),                                          //           .endofpacket
		.src23_ready         (cmd_demux_001_src23_ready),                                                //      src23.ready
		.src23_valid         (cmd_demux_001_src23_valid),                                                //           .valid
		.src23_data          (cmd_demux_001_src23_data),                                                 //           .data
		.src23_channel       (cmd_demux_001_src23_channel),                                              //           .channel
		.src23_startofpacket (cmd_demux_001_src23_startofpacket),                                        //           .startofpacket
		.src23_endofpacket   (cmd_demux_001_src23_endofpacket),                                          //           .endofpacket
		.src24_ready         (cmd_demux_001_src24_ready),                                                //      src24.ready
		.src24_valid         (cmd_demux_001_src24_valid),                                                //           .valid
		.src24_data          (cmd_demux_001_src24_data),                                                 //           .data
		.src24_channel       (cmd_demux_001_src24_channel),                                              //           .channel
		.src24_startofpacket (cmd_demux_001_src24_startofpacket),                                        //           .startofpacket
		.src24_endofpacket   (cmd_demux_001_src24_endofpacket),                                          //           .endofpacket
		.src25_ready         (cmd_demux_001_src25_ready),                                                //      src25.ready
		.src25_valid         (cmd_demux_001_src25_valid),                                                //           .valid
		.src25_data          (cmd_demux_001_src25_data),                                                 //           .data
		.src25_channel       (cmd_demux_001_src25_channel),                                              //           .channel
		.src25_startofpacket (cmd_demux_001_src25_startofpacket),                                        //           .startofpacket
		.src25_endofpacket   (cmd_demux_001_src25_endofpacket),                                          //           .endofpacket
		.src26_ready         (cmd_demux_001_src26_ready),                                                //      src26.ready
		.src26_valid         (cmd_demux_001_src26_valid),                                                //           .valid
		.src26_data          (cmd_demux_001_src26_data),                                                 //           .data
		.src26_channel       (cmd_demux_001_src26_channel),                                              //           .channel
		.src26_startofpacket (cmd_demux_001_src26_startofpacket),                                        //           .startofpacket
		.src26_endofpacket   (cmd_demux_001_src26_endofpacket)                                           //           .endofpacket
	);

	Computer_System_mm_interconnect_1_cmd_mux cmd_mux (
		.clk                 (System_PLL_sys_clk_clk),                      //       clk.clk
		.reset               (AV_Config_reset_reset_bridge_in_reset_reset), // clk_reset.reset
		.src_ready           (cmd_mux_src_ready),                           //       src.ready
		.src_valid           (cmd_mux_src_valid),                           //          .valid
		.src_data            (cmd_mux_src_data),                            //          .data
		.src_channel         (cmd_mux_src_channel),                         //          .channel
		.src_startofpacket   (cmd_mux_src_startofpacket),                   //          .startofpacket
		.src_endofpacket     (cmd_mux_src_endofpacket),                     //          .endofpacket
		.sink0_ready         (cmd_demux_src0_ready),                        //     sink0.ready
		.sink0_valid         (cmd_demux_src0_valid),                        //          .valid
		.sink0_channel       (cmd_demux_src0_channel),                      //          .channel
		.sink0_data          (cmd_demux_src0_data),                         //          .data
		.sink0_startofpacket (cmd_demux_src0_startofpacket),                //          .startofpacket
		.sink0_endofpacket   (cmd_demux_src0_endofpacket),                  //          .endofpacket
		.sink1_ready         (cmd_demux_001_src0_ready),                    //     sink1.ready
		.sink1_valid         (cmd_demux_001_src0_valid),                    //          .valid
		.sink1_channel       (cmd_demux_001_src0_channel),                  //          .channel
		.sink1_data          (cmd_demux_001_src0_data),                     //          .data
		.sink1_startofpacket (cmd_demux_001_src0_startofpacket),            //          .startofpacket
		.sink1_endofpacket   (cmd_demux_001_src0_endofpacket)               //          .endofpacket
	);

	Computer_System_mm_interconnect_1_cmd_mux cmd_mux_001 (
		.clk                 (System_PLL_sys_clk_clk),                      //       clk.clk
		.reset               (AV_Config_reset_reset_bridge_in_reset_reset), // clk_reset.reset
		.src_ready           (cmd_mux_001_src_ready),                       //       src.ready
		.src_valid           (cmd_mux_001_src_valid),                       //          .valid
		.src_data            (cmd_mux_001_src_data),                        //          .data
		.src_channel         (cmd_mux_001_src_channel),                     //          .channel
		.src_startofpacket   (cmd_mux_001_src_startofpacket),               //          .startofpacket
		.src_endofpacket     (cmd_mux_001_src_endofpacket),                 //          .endofpacket
		.sink0_ready         (cmd_demux_src1_ready),                        //     sink0.ready
		.sink0_valid         (cmd_demux_src1_valid),                        //          .valid
		.sink0_channel       (cmd_demux_src1_channel),                      //          .channel
		.sink0_data          (cmd_demux_src1_data),                         //          .data
		.sink0_startofpacket (cmd_demux_src1_startofpacket),                //          .startofpacket
		.sink0_endofpacket   (cmd_demux_src1_endofpacket),                  //          .endofpacket
		.sink1_ready         (cmd_demux_001_src1_ready),                    //     sink1.ready
		.sink1_valid         (cmd_demux_001_src1_valid),                    //          .valid
		.sink1_channel       (cmd_demux_001_src1_channel),                  //          .channel
		.sink1_data          (cmd_demux_001_src1_data),                     //          .data
		.sink1_startofpacket (cmd_demux_001_src1_startofpacket),            //          .startofpacket
		.sink1_endofpacket   (cmd_demux_001_src1_endofpacket)               //          .endofpacket
	);

	Computer_System_mm_interconnect_1_cmd_mux cmd_mux_002 (
		.clk                 (System_PLL_sys_clk_clk),                        //       clk.clk
		.reset               (n0_from_hps_reset_reset_bridge_in_reset_reset), // clk_reset.reset
		.src_ready           (cmd_mux_002_src_ready),                         //       src.ready
		.src_valid           (cmd_mux_002_src_valid),                         //          .valid
		.src_data            (cmd_mux_002_src_data),                          //          .data
		.src_channel         (cmd_mux_002_src_channel),                       //          .channel
		.src_startofpacket   (cmd_mux_002_src_startofpacket),                 //          .startofpacket
		.src_endofpacket     (cmd_mux_002_src_endofpacket),                   //          .endofpacket
		.sink0_ready         (cmd_demux_src2_ready),                          //     sink0.ready
		.sink0_valid         (cmd_demux_src2_valid),                          //          .valid
		.sink0_channel       (cmd_demux_src2_channel),                        //          .channel
		.sink0_data          (cmd_demux_src2_data),                           //          .data
		.sink0_startofpacket (cmd_demux_src2_startofpacket),                  //          .startofpacket
		.sink0_endofpacket   (cmd_demux_src2_endofpacket),                    //          .endofpacket
		.sink1_ready         (cmd_demux_001_src2_ready),                      //     sink1.ready
		.sink1_valid         (cmd_demux_001_src2_valid),                      //          .valid
		.sink1_channel       (cmd_demux_001_src2_channel),                    //          .channel
		.sink1_data          (cmd_demux_001_src2_data),                       //          .data
		.sink1_startofpacket (cmd_demux_001_src2_startofpacket),              //          .startofpacket
		.sink1_endofpacket   (cmd_demux_001_src2_endofpacket)                 //          .endofpacket
	);

	Computer_System_mm_interconnect_1_cmd_mux cmd_mux_003 (
		.clk                 (System_PLL_sys_clk_clk),                        //       clk.clk
		.reset               (n0_from_hps_reset_reset_bridge_in_reset_reset), // clk_reset.reset
		.src_ready           (cmd_mux_003_src_ready),                         //       src.ready
		.src_valid           (cmd_mux_003_src_valid),                         //          .valid
		.src_data            (cmd_mux_003_src_data),                          //          .data
		.src_channel         (cmd_mux_003_src_channel),                       //          .channel
		.src_startofpacket   (cmd_mux_003_src_startofpacket),                 //          .startofpacket
		.src_endofpacket     (cmd_mux_003_src_endofpacket),                   //          .endofpacket
		.sink0_ready         (cmd_demux_src3_ready),                          //     sink0.ready
		.sink0_valid         (cmd_demux_src3_valid),                          //          .valid
		.sink0_channel       (cmd_demux_src3_channel),                        //          .channel
		.sink0_data          (cmd_demux_src3_data),                           //          .data
		.sink0_startofpacket (cmd_demux_src3_startofpacket),                  //          .startofpacket
		.sink0_endofpacket   (cmd_demux_src3_endofpacket),                    //          .endofpacket
		.sink1_ready         (cmd_demux_001_src3_ready),                      //     sink1.ready
		.sink1_valid         (cmd_demux_001_src3_valid),                      //          .valid
		.sink1_channel       (cmd_demux_001_src3_channel),                    //          .channel
		.sink1_data          (cmd_demux_001_src3_data),                       //          .data
		.sink1_startofpacket (cmd_demux_001_src3_startofpacket),              //          .startofpacket
		.sink1_endofpacket   (cmd_demux_001_src3_endofpacket)                 //          .endofpacket
	);

	Computer_System_mm_interconnect_1_cmd_mux cmd_mux_004 (
		.clk                 (System_PLL_sys_clk_clk),                        //       clk.clk
		.reset               (n0_from_hps_reset_reset_bridge_in_reset_reset), // clk_reset.reset
		.src_ready           (cmd_mux_004_src_ready),                         //       src.ready
		.src_valid           (cmd_mux_004_src_valid),                         //          .valid
		.src_data            (cmd_mux_004_src_data),                          //          .data
		.src_channel         (cmd_mux_004_src_channel),                       //          .channel
		.src_startofpacket   (cmd_mux_004_src_startofpacket),                 //          .startofpacket
		.src_endofpacket     (cmd_mux_004_src_endofpacket),                   //          .endofpacket
		.sink0_ready         (cmd_demux_src4_ready),                          //     sink0.ready
		.sink0_valid         (cmd_demux_src4_valid),                          //          .valid
		.sink0_channel       (cmd_demux_src4_channel),                        //          .channel
		.sink0_data          (cmd_demux_src4_data),                           //          .data
		.sink0_startofpacket (cmd_demux_src4_startofpacket),                  //          .startofpacket
		.sink0_endofpacket   (cmd_demux_src4_endofpacket),                    //          .endofpacket
		.sink1_ready         (cmd_demux_001_src4_ready),                      //     sink1.ready
		.sink1_valid         (cmd_demux_001_src4_valid),                      //          .valid
		.sink1_channel       (cmd_demux_001_src4_channel),                    //          .channel
		.sink1_data          (cmd_demux_001_src4_data),                       //          .data
		.sink1_startofpacket (cmd_demux_001_src4_startofpacket),              //          .startofpacket
		.sink1_endofpacket   (cmd_demux_001_src4_endofpacket)                 //          .endofpacket
	);

	Computer_System_mm_interconnect_1_cmd_mux cmd_mux_005 (
		.clk                 (System_PLL_sys_clk_clk),                        //       clk.clk
		.reset               (n0_from_hps_reset_reset_bridge_in_reset_reset), // clk_reset.reset
		.src_ready           (cmd_mux_005_src_ready),                         //       src.ready
		.src_valid           (cmd_mux_005_src_valid),                         //          .valid
		.src_data            (cmd_mux_005_src_data),                          //          .data
		.src_channel         (cmd_mux_005_src_channel),                       //          .channel
		.src_startofpacket   (cmd_mux_005_src_startofpacket),                 //          .startofpacket
		.src_endofpacket     (cmd_mux_005_src_endofpacket),                   //          .endofpacket
		.sink0_ready         (cmd_demux_src5_ready),                          //     sink0.ready
		.sink0_valid         (cmd_demux_src5_valid),                          //          .valid
		.sink0_channel       (cmd_demux_src5_channel),                        //          .channel
		.sink0_data          (cmd_demux_src5_data),                           //          .data
		.sink0_startofpacket (cmd_demux_src5_startofpacket),                  //          .startofpacket
		.sink0_endofpacket   (cmd_demux_src5_endofpacket),                    //          .endofpacket
		.sink1_ready         (cmd_demux_001_src5_ready),                      //     sink1.ready
		.sink1_valid         (cmd_demux_001_src5_valid),                      //          .valid
		.sink1_channel       (cmd_demux_001_src5_channel),                    //          .channel
		.sink1_data          (cmd_demux_001_src5_data),                       //          .data
		.sink1_startofpacket (cmd_demux_001_src5_startofpacket),              //          .startofpacket
		.sink1_endofpacket   (cmd_demux_001_src5_endofpacket)                 //          .endofpacket
	);

	Computer_System_mm_interconnect_1_cmd_mux cmd_mux_006 (
		.clk                 (System_PLL_sys_clk_clk),                        //       clk.clk
		.reset               (n0_from_hps_reset_reset_bridge_in_reset_reset), // clk_reset.reset
		.src_ready           (cmd_mux_006_src_ready),                         //       src.ready
		.src_valid           (cmd_mux_006_src_valid),                         //          .valid
		.src_data            (cmd_mux_006_src_data),                          //          .data
		.src_channel         (cmd_mux_006_src_channel),                       //          .channel
		.src_startofpacket   (cmd_mux_006_src_startofpacket),                 //          .startofpacket
		.src_endofpacket     (cmd_mux_006_src_endofpacket),                   //          .endofpacket
		.sink0_ready         (cmd_demux_src6_ready),                          //     sink0.ready
		.sink0_valid         (cmd_demux_src6_valid),                          //          .valid
		.sink0_channel       (cmd_demux_src6_channel),                        //          .channel
		.sink0_data          (cmd_demux_src6_data),                           //          .data
		.sink0_startofpacket (cmd_demux_src6_startofpacket),                  //          .startofpacket
		.sink0_endofpacket   (cmd_demux_src6_endofpacket),                    //          .endofpacket
		.sink1_ready         (cmd_demux_001_src6_ready),                      //     sink1.ready
		.sink1_valid         (cmd_demux_001_src6_valid),                      //          .valid
		.sink1_channel       (cmd_demux_001_src6_channel),                    //          .channel
		.sink1_data          (cmd_demux_001_src6_data),                       //          .data
		.sink1_startofpacket (cmd_demux_001_src6_startofpacket),              //          .startofpacket
		.sink1_endofpacket   (cmd_demux_001_src6_endofpacket)                 //          .endofpacket
	);

	Computer_System_mm_interconnect_1_cmd_mux cmd_mux_007 (
		.clk                 (System_PLL_sys_clk_clk),                        //       clk.clk
		.reset               (n0_from_hps_reset_reset_bridge_in_reset_reset), // clk_reset.reset
		.src_ready           (cmd_mux_007_src_ready),                         //       src.ready
		.src_valid           (cmd_mux_007_src_valid),                         //          .valid
		.src_data            (cmd_mux_007_src_data),                          //          .data
		.src_channel         (cmd_mux_007_src_channel),                       //          .channel
		.src_startofpacket   (cmd_mux_007_src_startofpacket),                 //          .startofpacket
		.src_endofpacket     (cmd_mux_007_src_endofpacket),                   //          .endofpacket
		.sink0_ready         (cmd_demux_src7_ready),                          //     sink0.ready
		.sink0_valid         (cmd_demux_src7_valid),                          //          .valid
		.sink0_channel       (cmd_demux_src7_channel),                        //          .channel
		.sink0_data          (cmd_demux_src7_data),                           //          .data
		.sink0_startofpacket (cmd_demux_src7_startofpacket),                  //          .startofpacket
		.sink0_endofpacket   (cmd_demux_src7_endofpacket),                    //          .endofpacket
		.sink1_ready         (cmd_demux_001_src7_ready),                      //     sink1.ready
		.sink1_valid         (cmd_demux_001_src7_valid),                      //          .valid
		.sink1_channel       (cmd_demux_001_src7_channel),                    //          .channel
		.sink1_data          (cmd_demux_001_src7_data),                       //          .data
		.sink1_startofpacket (cmd_demux_001_src7_startofpacket),              //          .startofpacket
		.sink1_endofpacket   (cmd_demux_001_src7_endofpacket)                 //          .endofpacket
	);

	Computer_System_mm_interconnect_1_cmd_mux cmd_mux_008 (
		.clk                 (System_PLL_sys_clk_clk),                        //       clk.clk
		.reset               (n0_from_hps_reset_reset_bridge_in_reset_reset), // clk_reset.reset
		.src_ready           (cmd_mux_008_src_ready),                         //       src.ready
		.src_valid           (cmd_mux_008_src_valid),                         //          .valid
		.src_data            (cmd_mux_008_src_data),                          //          .data
		.src_channel         (cmd_mux_008_src_channel),                       //          .channel
		.src_startofpacket   (cmd_mux_008_src_startofpacket),                 //          .startofpacket
		.src_endofpacket     (cmd_mux_008_src_endofpacket),                   //          .endofpacket
		.sink0_ready         (cmd_demux_src8_ready),                          //     sink0.ready
		.sink0_valid         (cmd_demux_src8_valid),                          //          .valid
		.sink0_channel       (cmd_demux_src8_channel),                        //          .channel
		.sink0_data          (cmd_demux_src8_data),                           //          .data
		.sink0_startofpacket (cmd_demux_src8_startofpacket),                  //          .startofpacket
		.sink0_endofpacket   (cmd_demux_src8_endofpacket),                    //          .endofpacket
		.sink1_ready         (cmd_demux_001_src8_ready),                      //     sink1.ready
		.sink1_valid         (cmd_demux_001_src8_valid),                      //          .valid
		.sink1_channel       (cmd_demux_001_src8_channel),                    //          .channel
		.sink1_data          (cmd_demux_001_src8_data),                       //          .data
		.sink1_startofpacket (cmd_demux_001_src8_startofpacket),              //          .startofpacket
		.sink1_endofpacket   (cmd_demux_001_src8_endofpacket)                 //          .endofpacket
	);

	Computer_System_mm_interconnect_1_cmd_mux cmd_mux_009 (
		.clk                 (System_PLL_sys_clk_clk),                        //       clk.clk
		.reset               (n0_from_hps_reset_reset_bridge_in_reset_reset), // clk_reset.reset
		.src_ready           (cmd_mux_009_src_ready),                         //       src.ready
		.src_valid           (cmd_mux_009_src_valid),                         //          .valid
		.src_data            (cmd_mux_009_src_data),                          //          .data
		.src_channel         (cmd_mux_009_src_channel),                       //          .channel
		.src_startofpacket   (cmd_mux_009_src_startofpacket),                 //          .startofpacket
		.src_endofpacket     (cmd_mux_009_src_endofpacket),                   //          .endofpacket
		.sink0_ready         (cmd_demux_src9_ready),                          //     sink0.ready
		.sink0_valid         (cmd_demux_src9_valid),                          //          .valid
		.sink0_channel       (cmd_demux_src9_channel),                        //          .channel
		.sink0_data          (cmd_demux_src9_data),                           //          .data
		.sink0_startofpacket (cmd_demux_src9_startofpacket),                  //          .startofpacket
		.sink0_endofpacket   (cmd_demux_src9_endofpacket),                    //          .endofpacket
		.sink1_ready         (cmd_demux_001_src9_ready),                      //     sink1.ready
		.sink1_valid         (cmd_demux_001_src9_valid),                      //          .valid
		.sink1_channel       (cmd_demux_001_src9_channel),                    //          .channel
		.sink1_data          (cmd_demux_001_src9_data),                       //          .data
		.sink1_startofpacket (cmd_demux_001_src9_startofpacket),              //          .startofpacket
		.sink1_endofpacket   (cmd_demux_001_src9_endofpacket)                 //          .endofpacket
	);

	Computer_System_mm_interconnect_1_cmd_mux cmd_mux_010 (
		.clk                 (System_PLL_sys_clk_clk),                        //       clk.clk
		.reset               (n0_from_hps_reset_reset_bridge_in_reset_reset), // clk_reset.reset
		.src_ready           (cmd_mux_010_src_ready),                         //       src.ready
		.src_valid           (cmd_mux_010_src_valid),                         //          .valid
		.src_data            (cmd_mux_010_src_data),                          //          .data
		.src_channel         (cmd_mux_010_src_channel),                       //          .channel
		.src_startofpacket   (cmd_mux_010_src_startofpacket),                 //          .startofpacket
		.src_endofpacket     (cmd_mux_010_src_endofpacket),                   //          .endofpacket
		.sink0_ready         (cmd_demux_src10_ready),                         //     sink0.ready
		.sink0_valid         (cmd_demux_src10_valid),                         //          .valid
		.sink0_channel       (cmd_demux_src10_channel),                       //          .channel
		.sink0_data          (cmd_demux_src10_data),                          //          .data
		.sink0_startofpacket (cmd_demux_src10_startofpacket),                 //          .startofpacket
		.sink0_endofpacket   (cmd_demux_src10_endofpacket),                   //          .endofpacket
		.sink1_ready         (cmd_demux_001_src10_ready),                     //     sink1.ready
		.sink1_valid         (cmd_demux_001_src10_valid),                     //          .valid
		.sink1_channel       (cmd_demux_001_src10_channel),                   //          .channel
		.sink1_data          (cmd_demux_001_src10_data),                      //          .data
		.sink1_startofpacket (cmd_demux_001_src10_startofpacket),             //          .startofpacket
		.sink1_endofpacket   (cmd_demux_001_src10_endofpacket)                //          .endofpacket
	);

	Computer_System_mm_interconnect_1_cmd_mux cmd_mux_011 (
		.clk                 (System_PLL_sys_clk_clk),                        //       clk.clk
		.reset               (n0_from_hps_reset_reset_bridge_in_reset_reset), // clk_reset.reset
		.src_ready           (cmd_mux_011_src_ready),                         //       src.ready
		.src_valid           (cmd_mux_011_src_valid),                         //          .valid
		.src_data            (cmd_mux_011_src_data),                          //          .data
		.src_channel         (cmd_mux_011_src_channel),                       //          .channel
		.src_startofpacket   (cmd_mux_011_src_startofpacket),                 //          .startofpacket
		.src_endofpacket     (cmd_mux_011_src_endofpacket),                   //          .endofpacket
		.sink0_ready         (cmd_demux_src11_ready),                         //     sink0.ready
		.sink0_valid         (cmd_demux_src11_valid),                         //          .valid
		.sink0_channel       (cmd_demux_src11_channel),                       //          .channel
		.sink0_data          (cmd_demux_src11_data),                          //          .data
		.sink0_startofpacket (cmd_demux_src11_startofpacket),                 //          .startofpacket
		.sink0_endofpacket   (cmd_demux_src11_endofpacket),                   //          .endofpacket
		.sink1_ready         (cmd_demux_001_src11_ready),                     //     sink1.ready
		.sink1_valid         (cmd_demux_001_src11_valid),                     //          .valid
		.sink1_channel       (cmd_demux_001_src11_channel),                   //          .channel
		.sink1_data          (cmd_demux_001_src11_data),                      //          .data
		.sink1_startofpacket (cmd_demux_001_src11_startofpacket),             //          .startofpacket
		.sink1_endofpacket   (cmd_demux_001_src11_endofpacket)                //          .endofpacket
	);

	Computer_System_mm_interconnect_1_cmd_mux cmd_mux_012 (
		.clk                 (System_PLL_sys_clk_clk),                        //       clk.clk
		.reset               (n0_from_hps_reset_reset_bridge_in_reset_reset), // clk_reset.reset
		.src_ready           (cmd_mux_012_src_ready),                         //       src.ready
		.src_valid           (cmd_mux_012_src_valid),                         //          .valid
		.src_data            (cmd_mux_012_src_data),                          //          .data
		.src_channel         (cmd_mux_012_src_channel),                       //          .channel
		.src_startofpacket   (cmd_mux_012_src_startofpacket),                 //          .startofpacket
		.src_endofpacket     (cmd_mux_012_src_endofpacket),                   //          .endofpacket
		.sink0_ready         (cmd_demux_src12_ready),                         //     sink0.ready
		.sink0_valid         (cmd_demux_src12_valid),                         //          .valid
		.sink0_channel       (cmd_demux_src12_channel),                       //          .channel
		.sink0_data          (cmd_demux_src12_data),                          //          .data
		.sink0_startofpacket (cmd_demux_src12_startofpacket),                 //          .startofpacket
		.sink0_endofpacket   (cmd_demux_src12_endofpacket),                   //          .endofpacket
		.sink1_ready         (cmd_demux_001_src12_ready),                     //     sink1.ready
		.sink1_valid         (cmd_demux_001_src12_valid),                     //          .valid
		.sink1_channel       (cmd_demux_001_src12_channel),                   //          .channel
		.sink1_data          (cmd_demux_001_src12_data),                      //          .data
		.sink1_startofpacket (cmd_demux_001_src12_startofpacket),             //          .startofpacket
		.sink1_endofpacket   (cmd_demux_001_src12_endofpacket)                //          .endofpacket
	);

	Computer_System_mm_interconnect_1_cmd_mux cmd_mux_013 (
		.clk                 (System_PLL_sys_clk_clk),                        //       clk.clk
		.reset               (n0_from_hps_reset_reset_bridge_in_reset_reset), // clk_reset.reset
		.src_ready           (cmd_mux_013_src_ready),                         //       src.ready
		.src_valid           (cmd_mux_013_src_valid),                         //          .valid
		.src_data            (cmd_mux_013_src_data),                          //          .data
		.src_channel         (cmd_mux_013_src_channel),                       //          .channel
		.src_startofpacket   (cmd_mux_013_src_startofpacket),                 //          .startofpacket
		.src_endofpacket     (cmd_mux_013_src_endofpacket),                   //          .endofpacket
		.sink0_ready         (cmd_demux_src13_ready),                         //     sink0.ready
		.sink0_valid         (cmd_demux_src13_valid),                         //          .valid
		.sink0_channel       (cmd_demux_src13_channel),                       //          .channel
		.sink0_data          (cmd_demux_src13_data),                          //          .data
		.sink0_startofpacket (cmd_demux_src13_startofpacket),                 //          .startofpacket
		.sink0_endofpacket   (cmd_demux_src13_endofpacket),                   //          .endofpacket
		.sink1_ready         (cmd_demux_001_src13_ready),                     //     sink1.ready
		.sink1_valid         (cmd_demux_001_src13_valid),                     //          .valid
		.sink1_channel       (cmd_demux_001_src13_channel),                   //          .channel
		.sink1_data          (cmd_demux_001_src13_data),                      //          .data
		.sink1_startofpacket (cmd_demux_001_src13_startofpacket),             //          .startofpacket
		.sink1_endofpacket   (cmd_demux_001_src13_endofpacket)                //          .endofpacket
	);

	Computer_System_mm_interconnect_1_cmd_mux cmd_mux_014 (
		.clk                 (System_PLL_sys_clk_clk),                        //       clk.clk
		.reset               (n0_from_hps_reset_reset_bridge_in_reset_reset), // clk_reset.reset
		.src_ready           (cmd_mux_014_src_ready),                         //       src.ready
		.src_valid           (cmd_mux_014_src_valid),                         //          .valid
		.src_data            (cmd_mux_014_src_data),                          //          .data
		.src_channel         (cmd_mux_014_src_channel),                       //          .channel
		.src_startofpacket   (cmd_mux_014_src_startofpacket),                 //          .startofpacket
		.src_endofpacket     (cmd_mux_014_src_endofpacket),                   //          .endofpacket
		.sink0_ready         (cmd_demux_src14_ready),                         //     sink0.ready
		.sink0_valid         (cmd_demux_src14_valid),                         //          .valid
		.sink0_channel       (cmd_demux_src14_channel),                       //          .channel
		.sink0_data          (cmd_demux_src14_data),                          //          .data
		.sink0_startofpacket (cmd_demux_src14_startofpacket),                 //          .startofpacket
		.sink0_endofpacket   (cmd_demux_src14_endofpacket),                   //          .endofpacket
		.sink1_ready         (cmd_demux_001_src14_ready),                     //     sink1.ready
		.sink1_valid         (cmd_demux_001_src14_valid),                     //          .valid
		.sink1_channel       (cmd_demux_001_src14_channel),                   //          .channel
		.sink1_data          (cmd_demux_001_src14_data),                      //          .data
		.sink1_startofpacket (cmd_demux_001_src14_startofpacket),             //          .startofpacket
		.sink1_endofpacket   (cmd_demux_001_src14_endofpacket)                //          .endofpacket
	);

	Computer_System_mm_interconnect_1_cmd_mux cmd_mux_015 (
		.clk                 (System_PLL_sys_clk_clk),                        //       clk.clk
		.reset               (n0_from_hps_reset_reset_bridge_in_reset_reset), // clk_reset.reset
		.src_ready           (cmd_mux_015_src_ready),                         //       src.ready
		.src_valid           (cmd_mux_015_src_valid),                         //          .valid
		.src_data            (cmd_mux_015_src_data),                          //          .data
		.src_channel         (cmd_mux_015_src_channel),                       //          .channel
		.src_startofpacket   (cmd_mux_015_src_startofpacket),                 //          .startofpacket
		.src_endofpacket     (cmd_mux_015_src_endofpacket),                   //          .endofpacket
		.sink0_ready         (cmd_demux_src15_ready),                         //     sink0.ready
		.sink0_valid         (cmd_demux_src15_valid),                         //          .valid
		.sink0_channel       (cmd_demux_src15_channel),                       //          .channel
		.sink0_data          (cmd_demux_src15_data),                          //          .data
		.sink0_startofpacket (cmd_demux_src15_startofpacket),                 //          .startofpacket
		.sink0_endofpacket   (cmd_demux_src15_endofpacket),                   //          .endofpacket
		.sink1_ready         (cmd_demux_001_src15_ready),                     //     sink1.ready
		.sink1_valid         (cmd_demux_001_src15_valid),                     //          .valid
		.sink1_channel       (cmd_demux_001_src15_channel),                   //          .channel
		.sink1_data          (cmd_demux_001_src15_data),                      //          .data
		.sink1_startofpacket (cmd_demux_001_src15_startofpacket),             //          .startofpacket
		.sink1_endofpacket   (cmd_demux_001_src15_endofpacket)                //          .endofpacket
	);

	Computer_System_mm_interconnect_1_cmd_mux cmd_mux_016 (
		.clk                 (System_PLL_sys_clk_clk),                        //       clk.clk
		.reset               (n0_from_hps_reset_reset_bridge_in_reset_reset), // clk_reset.reset
		.src_ready           (cmd_mux_016_src_ready),                         //       src.ready
		.src_valid           (cmd_mux_016_src_valid),                         //          .valid
		.src_data            (cmd_mux_016_src_data),                          //          .data
		.src_channel         (cmd_mux_016_src_channel),                       //          .channel
		.src_startofpacket   (cmd_mux_016_src_startofpacket),                 //          .startofpacket
		.src_endofpacket     (cmd_mux_016_src_endofpacket),                   //          .endofpacket
		.sink0_ready         (cmd_demux_src16_ready),                         //     sink0.ready
		.sink0_valid         (cmd_demux_src16_valid),                         //          .valid
		.sink0_channel       (cmd_demux_src16_channel),                       //          .channel
		.sink0_data          (cmd_demux_src16_data),                          //          .data
		.sink0_startofpacket (cmd_demux_src16_startofpacket),                 //          .startofpacket
		.sink0_endofpacket   (cmd_demux_src16_endofpacket),                   //          .endofpacket
		.sink1_ready         (cmd_demux_001_src16_ready),                     //     sink1.ready
		.sink1_valid         (cmd_demux_001_src16_valid),                     //          .valid
		.sink1_channel       (cmd_demux_001_src16_channel),                   //          .channel
		.sink1_data          (cmd_demux_001_src16_data),                      //          .data
		.sink1_startofpacket (cmd_demux_001_src16_startofpacket),             //          .startofpacket
		.sink1_endofpacket   (cmd_demux_001_src16_endofpacket)                //          .endofpacket
	);

	Computer_System_mm_interconnect_1_cmd_mux cmd_mux_017 (
		.clk                 (System_PLL_sys_clk_clk),                        //       clk.clk
		.reset               (n0_from_hps_reset_reset_bridge_in_reset_reset), // clk_reset.reset
		.src_ready           (cmd_mux_017_src_ready),                         //       src.ready
		.src_valid           (cmd_mux_017_src_valid),                         //          .valid
		.src_data            (cmd_mux_017_src_data),                          //          .data
		.src_channel         (cmd_mux_017_src_channel),                       //          .channel
		.src_startofpacket   (cmd_mux_017_src_startofpacket),                 //          .startofpacket
		.src_endofpacket     (cmd_mux_017_src_endofpacket),                   //          .endofpacket
		.sink0_ready         (cmd_demux_src17_ready),                         //     sink0.ready
		.sink0_valid         (cmd_demux_src17_valid),                         //          .valid
		.sink0_channel       (cmd_demux_src17_channel),                       //          .channel
		.sink0_data          (cmd_demux_src17_data),                          //          .data
		.sink0_startofpacket (cmd_demux_src17_startofpacket),                 //          .startofpacket
		.sink0_endofpacket   (cmd_demux_src17_endofpacket),                   //          .endofpacket
		.sink1_ready         (cmd_demux_001_src17_ready),                     //     sink1.ready
		.sink1_valid         (cmd_demux_001_src17_valid),                     //          .valid
		.sink1_channel       (cmd_demux_001_src17_channel),                   //          .channel
		.sink1_data          (cmd_demux_001_src17_data),                      //          .data
		.sink1_startofpacket (cmd_demux_001_src17_startofpacket),             //          .startofpacket
		.sink1_endofpacket   (cmd_demux_001_src17_endofpacket)                //          .endofpacket
	);

	Computer_System_mm_interconnect_1_cmd_mux cmd_mux_018 (
		.clk                 (System_PLL_sys_clk_clk),                        //       clk.clk
		.reset               (n0_from_hps_reset_reset_bridge_in_reset_reset), // clk_reset.reset
		.src_ready           (cmd_mux_018_src_ready),                         //       src.ready
		.src_valid           (cmd_mux_018_src_valid),                         //          .valid
		.src_data            (cmd_mux_018_src_data),                          //          .data
		.src_channel         (cmd_mux_018_src_channel),                       //          .channel
		.src_startofpacket   (cmd_mux_018_src_startofpacket),                 //          .startofpacket
		.src_endofpacket     (cmd_mux_018_src_endofpacket),                   //          .endofpacket
		.sink0_ready         (cmd_demux_src18_ready),                         //     sink0.ready
		.sink0_valid         (cmd_demux_src18_valid),                         //          .valid
		.sink0_channel       (cmd_demux_src18_channel),                       //          .channel
		.sink0_data          (cmd_demux_src18_data),                          //          .data
		.sink0_startofpacket (cmd_demux_src18_startofpacket),                 //          .startofpacket
		.sink0_endofpacket   (cmd_demux_src18_endofpacket),                   //          .endofpacket
		.sink1_ready         (cmd_demux_001_src18_ready),                     //     sink1.ready
		.sink1_valid         (cmd_demux_001_src18_valid),                     //          .valid
		.sink1_channel       (cmd_demux_001_src18_channel),                   //          .channel
		.sink1_data          (cmd_demux_001_src18_data),                      //          .data
		.sink1_startofpacket (cmd_demux_001_src18_startofpacket),             //          .startofpacket
		.sink1_endofpacket   (cmd_demux_001_src18_endofpacket)                //          .endofpacket
	);

	Computer_System_mm_interconnect_1_cmd_mux cmd_mux_019 (
		.clk                 (System_PLL_sys_clk_clk),                        //       clk.clk
		.reset               (n0_from_hps_reset_reset_bridge_in_reset_reset), // clk_reset.reset
		.src_ready           (cmd_mux_019_src_ready),                         //       src.ready
		.src_valid           (cmd_mux_019_src_valid),                         //          .valid
		.src_data            (cmd_mux_019_src_data),                          //          .data
		.src_channel         (cmd_mux_019_src_channel),                       //          .channel
		.src_startofpacket   (cmd_mux_019_src_startofpacket),                 //          .startofpacket
		.src_endofpacket     (cmd_mux_019_src_endofpacket),                   //          .endofpacket
		.sink0_ready         (cmd_demux_src19_ready),                         //     sink0.ready
		.sink0_valid         (cmd_demux_src19_valid),                         //          .valid
		.sink0_channel       (cmd_demux_src19_channel),                       //          .channel
		.sink0_data          (cmd_demux_src19_data),                          //          .data
		.sink0_startofpacket (cmd_demux_src19_startofpacket),                 //          .startofpacket
		.sink0_endofpacket   (cmd_demux_src19_endofpacket),                   //          .endofpacket
		.sink1_ready         (cmd_demux_001_src19_ready),                     //     sink1.ready
		.sink1_valid         (cmd_demux_001_src19_valid),                     //          .valid
		.sink1_channel       (cmd_demux_001_src19_channel),                   //          .channel
		.sink1_data          (cmd_demux_001_src19_data),                      //          .data
		.sink1_startofpacket (cmd_demux_001_src19_startofpacket),             //          .startofpacket
		.sink1_endofpacket   (cmd_demux_001_src19_endofpacket)                //          .endofpacket
	);

	Computer_System_mm_interconnect_1_cmd_mux cmd_mux_020 (
		.clk                 (System_PLL_sys_clk_clk),                        //       clk.clk
		.reset               (n0_from_hps_reset_reset_bridge_in_reset_reset), // clk_reset.reset
		.src_ready           (cmd_mux_020_src_ready),                         //       src.ready
		.src_valid           (cmd_mux_020_src_valid),                         //          .valid
		.src_data            (cmd_mux_020_src_data),                          //          .data
		.src_channel         (cmd_mux_020_src_channel),                       //          .channel
		.src_startofpacket   (cmd_mux_020_src_startofpacket),                 //          .startofpacket
		.src_endofpacket     (cmd_mux_020_src_endofpacket),                   //          .endofpacket
		.sink0_ready         (cmd_demux_src20_ready),                         //     sink0.ready
		.sink0_valid         (cmd_demux_src20_valid),                         //          .valid
		.sink0_channel       (cmd_demux_src20_channel),                       //          .channel
		.sink0_data          (cmd_demux_src20_data),                          //          .data
		.sink0_startofpacket (cmd_demux_src20_startofpacket),                 //          .startofpacket
		.sink0_endofpacket   (cmd_demux_src20_endofpacket),                   //          .endofpacket
		.sink1_ready         (cmd_demux_001_src20_ready),                     //     sink1.ready
		.sink1_valid         (cmd_demux_001_src20_valid),                     //          .valid
		.sink1_channel       (cmd_demux_001_src20_channel),                   //          .channel
		.sink1_data          (cmd_demux_001_src20_data),                      //          .data
		.sink1_startofpacket (cmd_demux_001_src20_startofpacket),             //          .startofpacket
		.sink1_endofpacket   (cmd_demux_001_src20_endofpacket)                //          .endofpacket
	);

	Computer_System_mm_interconnect_1_cmd_mux cmd_mux_021 (
		.clk                 (System_PLL_sys_clk_clk),                        //       clk.clk
		.reset               (n0_from_hps_reset_reset_bridge_in_reset_reset), // clk_reset.reset
		.src_ready           (cmd_mux_021_src_ready),                         //       src.ready
		.src_valid           (cmd_mux_021_src_valid),                         //          .valid
		.src_data            (cmd_mux_021_src_data),                          //          .data
		.src_channel         (cmd_mux_021_src_channel),                       //          .channel
		.src_startofpacket   (cmd_mux_021_src_startofpacket),                 //          .startofpacket
		.src_endofpacket     (cmd_mux_021_src_endofpacket),                   //          .endofpacket
		.sink0_ready         (cmd_demux_src21_ready),                         //     sink0.ready
		.sink0_valid         (cmd_demux_src21_valid),                         //          .valid
		.sink0_channel       (cmd_demux_src21_channel),                       //          .channel
		.sink0_data          (cmd_demux_src21_data),                          //          .data
		.sink0_startofpacket (cmd_demux_src21_startofpacket),                 //          .startofpacket
		.sink0_endofpacket   (cmd_demux_src21_endofpacket),                   //          .endofpacket
		.sink1_ready         (cmd_demux_001_src21_ready),                     //     sink1.ready
		.sink1_valid         (cmd_demux_001_src21_valid),                     //          .valid
		.sink1_channel       (cmd_demux_001_src21_channel),                   //          .channel
		.sink1_data          (cmd_demux_001_src21_data),                      //          .data
		.sink1_startofpacket (cmd_demux_001_src21_startofpacket),             //          .startofpacket
		.sink1_endofpacket   (cmd_demux_001_src21_endofpacket)                //          .endofpacket
	);

	Computer_System_mm_interconnect_1_cmd_mux cmd_mux_022 (
		.clk                 (System_PLL_sys_clk_clk),                        //       clk.clk
		.reset               (n0_from_hps_reset_reset_bridge_in_reset_reset), // clk_reset.reset
		.src_ready           (cmd_mux_022_src_ready),                         //       src.ready
		.src_valid           (cmd_mux_022_src_valid),                         //          .valid
		.src_data            (cmd_mux_022_src_data),                          //          .data
		.src_channel         (cmd_mux_022_src_channel),                       //          .channel
		.src_startofpacket   (cmd_mux_022_src_startofpacket),                 //          .startofpacket
		.src_endofpacket     (cmd_mux_022_src_endofpacket),                   //          .endofpacket
		.sink0_ready         (cmd_demux_src22_ready),                         //     sink0.ready
		.sink0_valid         (cmd_demux_src22_valid),                         //          .valid
		.sink0_channel       (cmd_demux_src22_channel),                       //          .channel
		.sink0_data          (cmd_demux_src22_data),                          //          .data
		.sink0_startofpacket (cmd_demux_src22_startofpacket),                 //          .startofpacket
		.sink0_endofpacket   (cmd_demux_src22_endofpacket),                   //          .endofpacket
		.sink1_ready         (cmd_demux_001_src22_ready),                     //     sink1.ready
		.sink1_valid         (cmd_demux_001_src22_valid),                     //          .valid
		.sink1_channel       (cmd_demux_001_src22_channel),                   //          .channel
		.sink1_data          (cmd_demux_001_src22_data),                      //          .data
		.sink1_startofpacket (cmd_demux_001_src22_startofpacket),             //          .startofpacket
		.sink1_endofpacket   (cmd_demux_001_src22_endofpacket)                //          .endofpacket
	);

	Computer_System_mm_interconnect_1_cmd_mux cmd_mux_023 (
		.clk                 (System_PLL_sys_clk_clk),                        //       clk.clk
		.reset               (n0_from_hps_reset_reset_bridge_in_reset_reset), // clk_reset.reset
		.src_ready           (cmd_mux_023_src_ready),                         //       src.ready
		.src_valid           (cmd_mux_023_src_valid),                         //          .valid
		.src_data            (cmd_mux_023_src_data),                          //          .data
		.src_channel         (cmd_mux_023_src_channel),                       //          .channel
		.src_startofpacket   (cmd_mux_023_src_startofpacket),                 //          .startofpacket
		.src_endofpacket     (cmd_mux_023_src_endofpacket),                   //          .endofpacket
		.sink0_ready         (cmd_demux_src23_ready),                         //     sink0.ready
		.sink0_valid         (cmd_demux_src23_valid),                         //          .valid
		.sink0_channel       (cmd_demux_src23_channel),                       //          .channel
		.sink0_data          (cmd_demux_src23_data),                          //          .data
		.sink0_startofpacket (cmd_demux_src23_startofpacket),                 //          .startofpacket
		.sink0_endofpacket   (cmd_demux_src23_endofpacket),                   //          .endofpacket
		.sink1_ready         (cmd_demux_001_src23_ready),                     //     sink1.ready
		.sink1_valid         (cmd_demux_001_src23_valid),                     //          .valid
		.sink1_channel       (cmd_demux_001_src23_channel),                   //          .channel
		.sink1_data          (cmd_demux_001_src23_data),                      //          .data
		.sink1_startofpacket (cmd_demux_001_src23_startofpacket),             //          .startofpacket
		.sink1_endofpacket   (cmd_demux_001_src23_endofpacket)                //          .endofpacket
	);

	Computer_System_mm_interconnect_1_cmd_mux cmd_mux_024 (
		.clk                 (System_PLL_sys_clk_clk),                        //       clk.clk
		.reset               (n0_from_hps_reset_reset_bridge_in_reset_reset), // clk_reset.reset
		.src_ready           (cmd_mux_024_src_ready),                         //       src.ready
		.src_valid           (cmd_mux_024_src_valid),                         //          .valid
		.src_data            (cmd_mux_024_src_data),                          //          .data
		.src_channel         (cmd_mux_024_src_channel),                       //          .channel
		.src_startofpacket   (cmd_mux_024_src_startofpacket),                 //          .startofpacket
		.src_endofpacket     (cmd_mux_024_src_endofpacket),                   //          .endofpacket
		.sink0_ready         (cmd_demux_src24_ready),                         //     sink0.ready
		.sink0_valid         (cmd_demux_src24_valid),                         //          .valid
		.sink0_channel       (cmd_demux_src24_channel),                       //          .channel
		.sink0_data          (cmd_demux_src24_data),                          //          .data
		.sink0_startofpacket (cmd_demux_src24_startofpacket),                 //          .startofpacket
		.sink0_endofpacket   (cmd_demux_src24_endofpacket),                   //          .endofpacket
		.sink1_ready         (cmd_demux_001_src24_ready),                     //     sink1.ready
		.sink1_valid         (cmd_demux_001_src24_valid),                     //          .valid
		.sink1_channel       (cmd_demux_001_src24_channel),                   //          .channel
		.sink1_data          (cmd_demux_001_src24_data),                      //          .data
		.sink1_startofpacket (cmd_demux_001_src24_startofpacket),             //          .startofpacket
		.sink1_endofpacket   (cmd_demux_001_src24_endofpacket)                //          .endofpacket
	);

	Computer_System_mm_interconnect_1_cmd_mux cmd_mux_025 (
		.clk                 (System_PLL_sys_clk_clk),                        //       clk.clk
		.reset               (n0_from_hps_reset_reset_bridge_in_reset_reset), // clk_reset.reset
		.src_ready           (cmd_mux_025_src_ready),                         //       src.ready
		.src_valid           (cmd_mux_025_src_valid),                         //          .valid
		.src_data            (cmd_mux_025_src_data),                          //          .data
		.src_channel         (cmd_mux_025_src_channel),                       //          .channel
		.src_startofpacket   (cmd_mux_025_src_startofpacket),                 //          .startofpacket
		.src_endofpacket     (cmd_mux_025_src_endofpacket),                   //          .endofpacket
		.sink0_ready         (cmd_demux_src25_ready),                         //     sink0.ready
		.sink0_valid         (cmd_demux_src25_valid),                         //          .valid
		.sink0_channel       (cmd_demux_src25_channel),                       //          .channel
		.sink0_data          (cmd_demux_src25_data),                          //          .data
		.sink0_startofpacket (cmd_demux_src25_startofpacket),                 //          .startofpacket
		.sink0_endofpacket   (cmd_demux_src25_endofpacket),                   //          .endofpacket
		.sink1_ready         (cmd_demux_001_src25_ready),                     //     sink1.ready
		.sink1_valid         (cmd_demux_001_src25_valid),                     //          .valid
		.sink1_channel       (cmd_demux_001_src25_channel),                   //          .channel
		.sink1_data          (cmd_demux_001_src25_data),                      //          .data
		.sink1_startofpacket (cmd_demux_001_src25_startofpacket),             //          .startofpacket
		.sink1_endofpacket   (cmd_demux_001_src25_endofpacket)                //          .endofpacket
	);

	Computer_System_mm_interconnect_1_cmd_mux cmd_mux_026 (
		.clk                 (System_PLL_sys_clk_clk),                      //       clk.clk
		.reset               (AV_Config_reset_reset_bridge_in_reset_reset), // clk_reset.reset
		.src_ready           (cmd_mux_026_src_ready),                       //       src.ready
		.src_valid           (cmd_mux_026_src_valid),                       //          .valid
		.src_data            (cmd_mux_026_src_data),                        //          .data
		.src_channel         (cmd_mux_026_src_channel),                     //          .channel
		.src_startofpacket   (cmd_mux_026_src_startofpacket),               //          .startofpacket
		.src_endofpacket     (cmd_mux_026_src_endofpacket),                 //          .endofpacket
		.sink0_ready         (cmd_demux_src26_ready),                       //     sink0.ready
		.sink0_valid         (cmd_demux_src26_valid),                       //          .valid
		.sink0_channel       (cmd_demux_src26_channel),                     //          .channel
		.sink0_data          (cmd_demux_src26_data),                        //          .data
		.sink0_startofpacket (cmd_demux_src26_startofpacket),               //          .startofpacket
		.sink0_endofpacket   (cmd_demux_src26_endofpacket),                 //          .endofpacket
		.sink1_ready         (cmd_demux_001_src26_ready),                   //     sink1.ready
		.sink1_valid         (cmd_demux_001_src26_valid),                   //          .valid
		.sink1_channel       (cmd_demux_001_src26_channel),                 //          .channel
		.sink1_data          (cmd_demux_001_src26_data),                    //          .data
		.sink1_startofpacket (cmd_demux_001_src26_startofpacket),           //          .startofpacket
		.sink1_endofpacket   (cmd_demux_001_src26_endofpacket)              //          .endofpacket
	);

	Computer_System_mm_interconnect_1_rsp_demux rsp_demux (
		.clk                (System_PLL_sys_clk_clk),                      //       clk.clk
		.reset              (AV_Config_reset_reset_bridge_in_reset_reset), // clk_reset.reset
		.sink_ready         (router_002_src_ready),                        //      sink.ready
		.sink_channel       (router_002_src_channel),                      //          .channel
		.sink_data          (router_002_src_data),                         //          .data
		.sink_startofpacket (router_002_src_startofpacket),                //          .startofpacket
		.sink_endofpacket   (router_002_src_endofpacket),                  //          .endofpacket
		.sink_valid         (router_002_src_valid),                        //          .valid
		.src0_ready         (rsp_demux_src0_ready),                        //      src0.ready
		.src0_valid         (rsp_demux_src0_valid),                        //          .valid
		.src0_data          (rsp_demux_src0_data),                         //          .data
		.src0_channel       (rsp_demux_src0_channel),                      //          .channel
		.src0_startofpacket (rsp_demux_src0_startofpacket),                //          .startofpacket
		.src0_endofpacket   (rsp_demux_src0_endofpacket),                  //          .endofpacket
		.src1_ready         (rsp_demux_src1_ready),                        //      src1.ready
		.src1_valid         (rsp_demux_src1_valid),                        //          .valid
		.src1_data          (rsp_demux_src1_data),                         //          .data
		.src1_channel       (rsp_demux_src1_channel),                      //          .channel
		.src1_startofpacket (rsp_demux_src1_startofpacket),                //          .startofpacket
		.src1_endofpacket   (rsp_demux_src1_endofpacket)                   //          .endofpacket
	);

	Computer_System_mm_interconnect_1_rsp_demux rsp_demux_001 (
		.clk                (System_PLL_sys_clk_clk),                      //       clk.clk
		.reset              (AV_Config_reset_reset_bridge_in_reset_reset), // clk_reset.reset
		.sink_ready         (router_003_src_ready),                        //      sink.ready
		.sink_channel       (router_003_src_channel),                      //          .channel
		.sink_data          (router_003_src_data),                         //          .data
		.sink_startofpacket (router_003_src_startofpacket),                //          .startofpacket
		.sink_endofpacket   (router_003_src_endofpacket),                  //          .endofpacket
		.sink_valid         (router_003_src_valid),                        //          .valid
		.src0_ready         (rsp_demux_001_src0_ready),                    //      src0.ready
		.src0_valid         (rsp_demux_001_src0_valid),                    //          .valid
		.src0_data          (rsp_demux_001_src0_data),                     //          .data
		.src0_channel       (rsp_demux_001_src0_channel),                  //          .channel
		.src0_startofpacket (rsp_demux_001_src0_startofpacket),            //          .startofpacket
		.src0_endofpacket   (rsp_demux_001_src0_endofpacket),              //          .endofpacket
		.src1_ready         (rsp_demux_001_src1_ready),                    //      src1.ready
		.src1_valid         (rsp_demux_001_src1_valid),                    //          .valid
		.src1_data          (rsp_demux_001_src1_data),                     //          .data
		.src1_channel       (rsp_demux_001_src1_channel),                  //          .channel
		.src1_startofpacket (rsp_demux_001_src1_startofpacket),            //          .startofpacket
		.src1_endofpacket   (rsp_demux_001_src1_endofpacket)               //          .endofpacket
	);

	Computer_System_mm_interconnect_1_rsp_demux rsp_demux_002 (
		.clk                (System_PLL_sys_clk_clk),                        //       clk.clk
		.reset              (n0_from_hps_reset_reset_bridge_in_reset_reset), // clk_reset.reset
		.sink_ready         (router_004_src_ready),                          //      sink.ready
		.sink_channel       (router_004_src_channel),                        //          .channel
		.sink_data          (router_004_src_data),                           //          .data
		.sink_startofpacket (router_004_src_startofpacket),                  //          .startofpacket
		.sink_endofpacket   (router_004_src_endofpacket),                    //          .endofpacket
		.sink_valid         (router_004_src_valid),                          //          .valid
		.src0_ready         (rsp_demux_002_src0_ready),                      //      src0.ready
		.src0_valid         (rsp_demux_002_src0_valid),                      //          .valid
		.src0_data          (rsp_demux_002_src0_data),                       //          .data
		.src0_channel       (rsp_demux_002_src0_channel),                    //          .channel
		.src0_startofpacket (rsp_demux_002_src0_startofpacket),              //          .startofpacket
		.src0_endofpacket   (rsp_demux_002_src0_endofpacket),                //          .endofpacket
		.src1_ready         (rsp_demux_002_src1_ready),                      //      src1.ready
		.src1_valid         (rsp_demux_002_src1_valid),                      //          .valid
		.src1_data          (rsp_demux_002_src1_data),                       //          .data
		.src1_channel       (rsp_demux_002_src1_channel),                    //          .channel
		.src1_startofpacket (rsp_demux_002_src1_startofpacket),              //          .startofpacket
		.src1_endofpacket   (rsp_demux_002_src1_endofpacket)                 //          .endofpacket
	);

	Computer_System_mm_interconnect_1_rsp_demux rsp_demux_003 (
		.clk                (System_PLL_sys_clk_clk),                        //       clk.clk
		.reset              (n0_from_hps_reset_reset_bridge_in_reset_reset), // clk_reset.reset
		.sink_ready         (router_005_src_ready),                          //      sink.ready
		.sink_channel       (router_005_src_channel),                        //          .channel
		.sink_data          (router_005_src_data),                           //          .data
		.sink_startofpacket (router_005_src_startofpacket),                  //          .startofpacket
		.sink_endofpacket   (router_005_src_endofpacket),                    //          .endofpacket
		.sink_valid         (router_005_src_valid),                          //          .valid
		.src0_ready         (rsp_demux_003_src0_ready),                      //      src0.ready
		.src0_valid         (rsp_demux_003_src0_valid),                      //          .valid
		.src0_data          (rsp_demux_003_src0_data),                       //          .data
		.src0_channel       (rsp_demux_003_src0_channel),                    //          .channel
		.src0_startofpacket (rsp_demux_003_src0_startofpacket),              //          .startofpacket
		.src0_endofpacket   (rsp_demux_003_src0_endofpacket),                //          .endofpacket
		.src1_ready         (rsp_demux_003_src1_ready),                      //      src1.ready
		.src1_valid         (rsp_demux_003_src1_valid),                      //          .valid
		.src1_data          (rsp_demux_003_src1_data),                       //          .data
		.src1_channel       (rsp_demux_003_src1_channel),                    //          .channel
		.src1_startofpacket (rsp_demux_003_src1_startofpacket),              //          .startofpacket
		.src1_endofpacket   (rsp_demux_003_src1_endofpacket)                 //          .endofpacket
	);

	Computer_System_mm_interconnect_1_rsp_demux rsp_demux_004 (
		.clk                (System_PLL_sys_clk_clk),                        //       clk.clk
		.reset              (n0_from_hps_reset_reset_bridge_in_reset_reset), // clk_reset.reset
		.sink_ready         (router_006_src_ready),                          //      sink.ready
		.sink_channel       (router_006_src_channel),                        //          .channel
		.sink_data          (router_006_src_data),                           //          .data
		.sink_startofpacket (router_006_src_startofpacket),                  //          .startofpacket
		.sink_endofpacket   (router_006_src_endofpacket),                    //          .endofpacket
		.sink_valid         (router_006_src_valid),                          //          .valid
		.src0_ready         (rsp_demux_004_src0_ready),                      //      src0.ready
		.src0_valid         (rsp_demux_004_src0_valid),                      //          .valid
		.src0_data          (rsp_demux_004_src0_data),                       //          .data
		.src0_channel       (rsp_demux_004_src0_channel),                    //          .channel
		.src0_startofpacket (rsp_demux_004_src0_startofpacket),              //          .startofpacket
		.src0_endofpacket   (rsp_demux_004_src0_endofpacket),                //          .endofpacket
		.src1_ready         (rsp_demux_004_src1_ready),                      //      src1.ready
		.src1_valid         (rsp_demux_004_src1_valid),                      //          .valid
		.src1_data          (rsp_demux_004_src1_data),                       //          .data
		.src1_channel       (rsp_demux_004_src1_channel),                    //          .channel
		.src1_startofpacket (rsp_demux_004_src1_startofpacket),              //          .startofpacket
		.src1_endofpacket   (rsp_demux_004_src1_endofpacket)                 //          .endofpacket
	);

	Computer_System_mm_interconnect_1_rsp_demux rsp_demux_005 (
		.clk                (System_PLL_sys_clk_clk),                        //       clk.clk
		.reset              (n0_from_hps_reset_reset_bridge_in_reset_reset), // clk_reset.reset
		.sink_ready         (router_007_src_ready),                          //      sink.ready
		.sink_channel       (router_007_src_channel),                        //          .channel
		.sink_data          (router_007_src_data),                           //          .data
		.sink_startofpacket (router_007_src_startofpacket),                  //          .startofpacket
		.sink_endofpacket   (router_007_src_endofpacket),                    //          .endofpacket
		.sink_valid         (router_007_src_valid),                          //          .valid
		.src0_ready         (rsp_demux_005_src0_ready),                      //      src0.ready
		.src0_valid         (rsp_demux_005_src0_valid),                      //          .valid
		.src0_data          (rsp_demux_005_src0_data),                       //          .data
		.src0_channel       (rsp_demux_005_src0_channel),                    //          .channel
		.src0_startofpacket (rsp_demux_005_src0_startofpacket),              //          .startofpacket
		.src0_endofpacket   (rsp_demux_005_src0_endofpacket),                //          .endofpacket
		.src1_ready         (rsp_demux_005_src1_ready),                      //      src1.ready
		.src1_valid         (rsp_demux_005_src1_valid),                      //          .valid
		.src1_data          (rsp_demux_005_src1_data),                       //          .data
		.src1_channel       (rsp_demux_005_src1_channel),                    //          .channel
		.src1_startofpacket (rsp_demux_005_src1_startofpacket),              //          .startofpacket
		.src1_endofpacket   (rsp_demux_005_src1_endofpacket)                 //          .endofpacket
	);

	Computer_System_mm_interconnect_1_rsp_demux rsp_demux_006 (
		.clk                (System_PLL_sys_clk_clk),                        //       clk.clk
		.reset              (n0_from_hps_reset_reset_bridge_in_reset_reset), // clk_reset.reset
		.sink_ready         (router_008_src_ready),                          //      sink.ready
		.sink_channel       (router_008_src_channel),                        //          .channel
		.sink_data          (router_008_src_data),                           //          .data
		.sink_startofpacket (router_008_src_startofpacket),                  //          .startofpacket
		.sink_endofpacket   (router_008_src_endofpacket),                    //          .endofpacket
		.sink_valid         (router_008_src_valid),                          //          .valid
		.src0_ready         (rsp_demux_006_src0_ready),                      //      src0.ready
		.src0_valid         (rsp_demux_006_src0_valid),                      //          .valid
		.src0_data          (rsp_demux_006_src0_data),                       //          .data
		.src0_channel       (rsp_demux_006_src0_channel),                    //          .channel
		.src0_startofpacket (rsp_demux_006_src0_startofpacket),              //          .startofpacket
		.src0_endofpacket   (rsp_demux_006_src0_endofpacket),                //          .endofpacket
		.src1_ready         (rsp_demux_006_src1_ready),                      //      src1.ready
		.src1_valid         (rsp_demux_006_src1_valid),                      //          .valid
		.src1_data          (rsp_demux_006_src1_data),                       //          .data
		.src1_channel       (rsp_demux_006_src1_channel),                    //          .channel
		.src1_startofpacket (rsp_demux_006_src1_startofpacket),              //          .startofpacket
		.src1_endofpacket   (rsp_demux_006_src1_endofpacket)                 //          .endofpacket
	);

	Computer_System_mm_interconnect_1_rsp_demux rsp_demux_007 (
		.clk                (System_PLL_sys_clk_clk),                        //       clk.clk
		.reset              (n0_from_hps_reset_reset_bridge_in_reset_reset), // clk_reset.reset
		.sink_ready         (router_009_src_ready),                          //      sink.ready
		.sink_channel       (router_009_src_channel),                        //          .channel
		.sink_data          (router_009_src_data),                           //          .data
		.sink_startofpacket (router_009_src_startofpacket),                  //          .startofpacket
		.sink_endofpacket   (router_009_src_endofpacket),                    //          .endofpacket
		.sink_valid         (router_009_src_valid),                          //          .valid
		.src0_ready         (rsp_demux_007_src0_ready),                      //      src0.ready
		.src0_valid         (rsp_demux_007_src0_valid),                      //          .valid
		.src0_data          (rsp_demux_007_src0_data),                       //          .data
		.src0_channel       (rsp_demux_007_src0_channel),                    //          .channel
		.src0_startofpacket (rsp_demux_007_src0_startofpacket),              //          .startofpacket
		.src0_endofpacket   (rsp_demux_007_src0_endofpacket),                //          .endofpacket
		.src1_ready         (rsp_demux_007_src1_ready),                      //      src1.ready
		.src1_valid         (rsp_demux_007_src1_valid),                      //          .valid
		.src1_data          (rsp_demux_007_src1_data),                       //          .data
		.src1_channel       (rsp_demux_007_src1_channel),                    //          .channel
		.src1_startofpacket (rsp_demux_007_src1_startofpacket),              //          .startofpacket
		.src1_endofpacket   (rsp_demux_007_src1_endofpacket)                 //          .endofpacket
	);

	Computer_System_mm_interconnect_1_rsp_demux rsp_demux_008 (
		.clk                (System_PLL_sys_clk_clk),                        //       clk.clk
		.reset              (n0_from_hps_reset_reset_bridge_in_reset_reset), // clk_reset.reset
		.sink_ready         (router_010_src_ready),                          //      sink.ready
		.sink_channel       (router_010_src_channel),                        //          .channel
		.sink_data          (router_010_src_data),                           //          .data
		.sink_startofpacket (router_010_src_startofpacket),                  //          .startofpacket
		.sink_endofpacket   (router_010_src_endofpacket),                    //          .endofpacket
		.sink_valid         (router_010_src_valid),                          //          .valid
		.src0_ready         (rsp_demux_008_src0_ready),                      //      src0.ready
		.src0_valid         (rsp_demux_008_src0_valid),                      //          .valid
		.src0_data          (rsp_demux_008_src0_data),                       //          .data
		.src0_channel       (rsp_demux_008_src0_channel),                    //          .channel
		.src0_startofpacket (rsp_demux_008_src0_startofpacket),              //          .startofpacket
		.src0_endofpacket   (rsp_demux_008_src0_endofpacket),                //          .endofpacket
		.src1_ready         (rsp_demux_008_src1_ready),                      //      src1.ready
		.src1_valid         (rsp_demux_008_src1_valid),                      //          .valid
		.src1_data          (rsp_demux_008_src1_data),                       //          .data
		.src1_channel       (rsp_demux_008_src1_channel),                    //          .channel
		.src1_startofpacket (rsp_demux_008_src1_startofpacket),              //          .startofpacket
		.src1_endofpacket   (rsp_demux_008_src1_endofpacket)                 //          .endofpacket
	);

	Computer_System_mm_interconnect_1_rsp_demux rsp_demux_009 (
		.clk                (System_PLL_sys_clk_clk),                        //       clk.clk
		.reset              (n0_from_hps_reset_reset_bridge_in_reset_reset), // clk_reset.reset
		.sink_ready         (router_011_src_ready),                          //      sink.ready
		.sink_channel       (router_011_src_channel),                        //          .channel
		.sink_data          (router_011_src_data),                           //          .data
		.sink_startofpacket (router_011_src_startofpacket),                  //          .startofpacket
		.sink_endofpacket   (router_011_src_endofpacket),                    //          .endofpacket
		.sink_valid         (router_011_src_valid),                          //          .valid
		.src0_ready         (rsp_demux_009_src0_ready),                      //      src0.ready
		.src0_valid         (rsp_demux_009_src0_valid),                      //          .valid
		.src0_data          (rsp_demux_009_src0_data),                       //          .data
		.src0_channel       (rsp_demux_009_src0_channel),                    //          .channel
		.src0_startofpacket (rsp_demux_009_src0_startofpacket),              //          .startofpacket
		.src0_endofpacket   (rsp_demux_009_src0_endofpacket),                //          .endofpacket
		.src1_ready         (rsp_demux_009_src1_ready),                      //      src1.ready
		.src1_valid         (rsp_demux_009_src1_valid),                      //          .valid
		.src1_data          (rsp_demux_009_src1_data),                       //          .data
		.src1_channel       (rsp_demux_009_src1_channel),                    //          .channel
		.src1_startofpacket (rsp_demux_009_src1_startofpacket),              //          .startofpacket
		.src1_endofpacket   (rsp_demux_009_src1_endofpacket)                 //          .endofpacket
	);

	Computer_System_mm_interconnect_1_rsp_demux rsp_demux_010 (
		.clk                (System_PLL_sys_clk_clk),                        //       clk.clk
		.reset              (n0_from_hps_reset_reset_bridge_in_reset_reset), // clk_reset.reset
		.sink_ready         (router_012_src_ready),                          //      sink.ready
		.sink_channel       (router_012_src_channel),                        //          .channel
		.sink_data          (router_012_src_data),                           //          .data
		.sink_startofpacket (router_012_src_startofpacket),                  //          .startofpacket
		.sink_endofpacket   (router_012_src_endofpacket),                    //          .endofpacket
		.sink_valid         (router_012_src_valid),                          //          .valid
		.src0_ready         (rsp_demux_010_src0_ready),                      //      src0.ready
		.src0_valid         (rsp_demux_010_src0_valid),                      //          .valid
		.src0_data          (rsp_demux_010_src0_data),                       //          .data
		.src0_channel       (rsp_demux_010_src0_channel),                    //          .channel
		.src0_startofpacket (rsp_demux_010_src0_startofpacket),              //          .startofpacket
		.src0_endofpacket   (rsp_demux_010_src0_endofpacket),                //          .endofpacket
		.src1_ready         (rsp_demux_010_src1_ready),                      //      src1.ready
		.src1_valid         (rsp_demux_010_src1_valid),                      //          .valid
		.src1_data          (rsp_demux_010_src1_data),                       //          .data
		.src1_channel       (rsp_demux_010_src1_channel),                    //          .channel
		.src1_startofpacket (rsp_demux_010_src1_startofpacket),              //          .startofpacket
		.src1_endofpacket   (rsp_demux_010_src1_endofpacket)                 //          .endofpacket
	);

	Computer_System_mm_interconnect_1_rsp_demux rsp_demux_011 (
		.clk                (System_PLL_sys_clk_clk),                        //       clk.clk
		.reset              (n0_from_hps_reset_reset_bridge_in_reset_reset), // clk_reset.reset
		.sink_ready         (router_013_src_ready),                          //      sink.ready
		.sink_channel       (router_013_src_channel),                        //          .channel
		.sink_data          (router_013_src_data),                           //          .data
		.sink_startofpacket (router_013_src_startofpacket),                  //          .startofpacket
		.sink_endofpacket   (router_013_src_endofpacket),                    //          .endofpacket
		.sink_valid         (router_013_src_valid),                          //          .valid
		.src0_ready         (rsp_demux_011_src0_ready),                      //      src0.ready
		.src0_valid         (rsp_demux_011_src0_valid),                      //          .valid
		.src0_data          (rsp_demux_011_src0_data),                       //          .data
		.src0_channel       (rsp_demux_011_src0_channel),                    //          .channel
		.src0_startofpacket (rsp_demux_011_src0_startofpacket),              //          .startofpacket
		.src0_endofpacket   (rsp_demux_011_src0_endofpacket),                //          .endofpacket
		.src1_ready         (rsp_demux_011_src1_ready),                      //      src1.ready
		.src1_valid         (rsp_demux_011_src1_valid),                      //          .valid
		.src1_data          (rsp_demux_011_src1_data),                       //          .data
		.src1_channel       (rsp_demux_011_src1_channel),                    //          .channel
		.src1_startofpacket (rsp_demux_011_src1_startofpacket),              //          .startofpacket
		.src1_endofpacket   (rsp_demux_011_src1_endofpacket)                 //          .endofpacket
	);

	Computer_System_mm_interconnect_1_rsp_demux rsp_demux_012 (
		.clk                (System_PLL_sys_clk_clk),                        //       clk.clk
		.reset              (n0_from_hps_reset_reset_bridge_in_reset_reset), // clk_reset.reset
		.sink_ready         (router_014_src_ready),                          //      sink.ready
		.sink_channel       (router_014_src_channel),                        //          .channel
		.sink_data          (router_014_src_data),                           //          .data
		.sink_startofpacket (router_014_src_startofpacket),                  //          .startofpacket
		.sink_endofpacket   (router_014_src_endofpacket),                    //          .endofpacket
		.sink_valid         (router_014_src_valid),                          //          .valid
		.src0_ready         (rsp_demux_012_src0_ready),                      //      src0.ready
		.src0_valid         (rsp_demux_012_src0_valid),                      //          .valid
		.src0_data          (rsp_demux_012_src0_data),                       //          .data
		.src0_channel       (rsp_demux_012_src0_channel),                    //          .channel
		.src0_startofpacket (rsp_demux_012_src0_startofpacket),              //          .startofpacket
		.src0_endofpacket   (rsp_demux_012_src0_endofpacket),                //          .endofpacket
		.src1_ready         (rsp_demux_012_src1_ready),                      //      src1.ready
		.src1_valid         (rsp_demux_012_src1_valid),                      //          .valid
		.src1_data          (rsp_demux_012_src1_data),                       //          .data
		.src1_channel       (rsp_demux_012_src1_channel),                    //          .channel
		.src1_startofpacket (rsp_demux_012_src1_startofpacket),              //          .startofpacket
		.src1_endofpacket   (rsp_demux_012_src1_endofpacket)                 //          .endofpacket
	);

	Computer_System_mm_interconnect_1_rsp_demux rsp_demux_013 (
		.clk                (System_PLL_sys_clk_clk),                        //       clk.clk
		.reset              (n0_from_hps_reset_reset_bridge_in_reset_reset), // clk_reset.reset
		.sink_ready         (router_015_src_ready),                          //      sink.ready
		.sink_channel       (router_015_src_channel),                        //          .channel
		.sink_data          (router_015_src_data),                           //          .data
		.sink_startofpacket (router_015_src_startofpacket),                  //          .startofpacket
		.sink_endofpacket   (router_015_src_endofpacket),                    //          .endofpacket
		.sink_valid         (router_015_src_valid),                          //          .valid
		.src0_ready         (rsp_demux_013_src0_ready),                      //      src0.ready
		.src0_valid         (rsp_demux_013_src0_valid),                      //          .valid
		.src0_data          (rsp_demux_013_src0_data),                       //          .data
		.src0_channel       (rsp_demux_013_src0_channel),                    //          .channel
		.src0_startofpacket (rsp_demux_013_src0_startofpacket),              //          .startofpacket
		.src0_endofpacket   (rsp_demux_013_src0_endofpacket),                //          .endofpacket
		.src1_ready         (rsp_demux_013_src1_ready),                      //      src1.ready
		.src1_valid         (rsp_demux_013_src1_valid),                      //          .valid
		.src1_data          (rsp_demux_013_src1_data),                       //          .data
		.src1_channel       (rsp_demux_013_src1_channel),                    //          .channel
		.src1_startofpacket (rsp_demux_013_src1_startofpacket),              //          .startofpacket
		.src1_endofpacket   (rsp_demux_013_src1_endofpacket)                 //          .endofpacket
	);

	Computer_System_mm_interconnect_1_rsp_demux rsp_demux_014 (
		.clk                (System_PLL_sys_clk_clk),                        //       clk.clk
		.reset              (n0_from_hps_reset_reset_bridge_in_reset_reset), // clk_reset.reset
		.sink_ready         (router_016_src_ready),                          //      sink.ready
		.sink_channel       (router_016_src_channel),                        //          .channel
		.sink_data          (router_016_src_data),                           //          .data
		.sink_startofpacket (router_016_src_startofpacket),                  //          .startofpacket
		.sink_endofpacket   (router_016_src_endofpacket),                    //          .endofpacket
		.sink_valid         (router_016_src_valid),                          //          .valid
		.src0_ready         (rsp_demux_014_src0_ready),                      //      src0.ready
		.src0_valid         (rsp_demux_014_src0_valid),                      //          .valid
		.src0_data          (rsp_demux_014_src0_data),                       //          .data
		.src0_channel       (rsp_demux_014_src0_channel),                    //          .channel
		.src0_startofpacket (rsp_demux_014_src0_startofpacket),              //          .startofpacket
		.src0_endofpacket   (rsp_demux_014_src0_endofpacket),                //          .endofpacket
		.src1_ready         (rsp_demux_014_src1_ready),                      //      src1.ready
		.src1_valid         (rsp_demux_014_src1_valid),                      //          .valid
		.src1_data          (rsp_demux_014_src1_data),                       //          .data
		.src1_channel       (rsp_demux_014_src1_channel),                    //          .channel
		.src1_startofpacket (rsp_demux_014_src1_startofpacket),              //          .startofpacket
		.src1_endofpacket   (rsp_demux_014_src1_endofpacket)                 //          .endofpacket
	);

	Computer_System_mm_interconnect_1_rsp_demux rsp_demux_015 (
		.clk                (System_PLL_sys_clk_clk),                        //       clk.clk
		.reset              (n0_from_hps_reset_reset_bridge_in_reset_reset), // clk_reset.reset
		.sink_ready         (router_017_src_ready),                          //      sink.ready
		.sink_channel       (router_017_src_channel),                        //          .channel
		.sink_data          (router_017_src_data),                           //          .data
		.sink_startofpacket (router_017_src_startofpacket),                  //          .startofpacket
		.sink_endofpacket   (router_017_src_endofpacket),                    //          .endofpacket
		.sink_valid         (router_017_src_valid),                          //          .valid
		.src0_ready         (rsp_demux_015_src0_ready),                      //      src0.ready
		.src0_valid         (rsp_demux_015_src0_valid),                      //          .valid
		.src0_data          (rsp_demux_015_src0_data),                       //          .data
		.src0_channel       (rsp_demux_015_src0_channel),                    //          .channel
		.src0_startofpacket (rsp_demux_015_src0_startofpacket),              //          .startofpacket
		.src0_endofpacket   (rsp_demux_015_src0_endofpacket),                //          .endofpacket
		.src1_ready         (rsp_demux_015_src1_ready),                      //      src1.ready
		.src1_valid         (rsp_demux_015_src1_valid),                      //          .valid
		.src1_data          (rsp_demux_015_src1_data),                       //          .data
		.src1_channel       (rsp_demux_015_src1_channel),                    //          .channel
		.src1_startofpacket (rsp_demux_015_src1_startofpacket),              //          .startofpacket
		.src1_endofpacket   (rsp_demux_015_src1_endofpacket)                 //          .endofpacket
	);

	Computer_System_mm_interconnect_1_rsp_demux rsp_demux_016 (
		.clk                (System_PLL_sys_clk_clk),                        //       clk.clk
		.reset              (n0_from_hps_reset_reset_bridge_in_reset_reset), // clk_reset.reset
		.sink_ready         (router_018_src_ready),                          //      sink.ready
		.sink_channel       (router_018_src_channel),                        //          .channel
		.sink_data          (router_018_src_data),                           //          .data
		.sink_startofpacket (router_018_src_startofpacket),                  //          .startofpacket
		.sink_endofpacket   (router_018_src_endofpacket),                    //          .endofpacket
		.sink_valid         (router_018_src_valid),                          //          .valid
		.src0_ready         (rsp_demux_016_src0_ready),                      //      src0.ready
		.src0_valid         (rsp_demux_016_src0_valid),                      //          .valid
		.src0_data          (rsp_demux_016_src0_data),                       //          .data
		.src0_channel       (rsp_demux_016_src0_channel),                    //          .channel
		.src0_startofpacket (rsp_demux_016_src0_startofpacket),              //          .startofpacket
		.src0_endofpacket   (rsp_demux_016_src0_endofpacket),                //          .endofpacket
		.src1_ready         (rsp_demux_016_src1_ready),                      //      src1.ready
		.src1_valid         (rsp_demux_016_src1_valid),                      //          .valid
		.src1_data          (rsp_demux_016_src1_data),                       //          .data
		.src1_channel       (rsp_demux_016_src1_channel),                    //          .channel
		.src1_startofpacket (rsp_demux_016_src1_startofpacket),              //          .startofpacket
		.src1_endofpacket   (rsp_demux_016_src1_endofpacket)                 //          .endofpacket
	);

	Computer_System_mm_interconnect_1_rsp_demux rsp_demux_017 (
		.clk                (System_PLL_sys_clk_clk),                        //       clk.clk
		.reset              (n0_from_hps_reset_reset_bridge_in_reset_reset), // clk_reset.reset
		.sink_ready         (router_019_src_ready),                          //      sink.ready
		.sink_channel       (router_019_src_channel),                        //          .channel
		.sink_data          (router_019_src_data),                           //          .data
		.sink_startofpacket (router_019_src_startofpacket),                  //          .startofpacket
		.sink_endofpacket   (router_019_src_endofpacket),                    //          .endofpacket
		.sink_valid         (router_019_src_valid),                          //          .valid
		.src0_ready         (rsp_demux_017_src0_ready),                      //      src0.ready
		.src0_valid         (rsp_demux_017_src0_valid),                      //          .valid
		.src0_data          (rsp_demux_017_src0_data),                       //          .data
		.src0_channel       (rsp_demux_017_src0_channel),                    //          .channel
		.src0_startofpacket (rsp_demux_017_src0_startofpacket),              //          .startofpacket
		.src0_endofpacket   (rsp_demux_017_src0_endofpacket),                //          .endofpacket
		.src1_ready         (rsp_demux_017_src1_ready),                      //      src1.ready
		.src1_valid         (rsp_demux_017_src1_valid),                      //          .valid
		.src1_data          (rsp_demux_017_src1_data),                       //          .data
		.src1_channel       (rsp_demux_017_src1_channel),                    //          .channel
		.src1_startofpacket (rsp_demux_017_src1_startofpacket),              //          .startofpacket
		.src1_endofpacket   (rsp_demux_017_src1_endofpacket)                 //          .endofpacket
	);

	Computer_System_mm_interconnect_1_rsp_demux rsp_demux_018 (
		.clk                (System_PLL_sys_clk_clk),                        //       clk.clk
		.reset              (n0_from_hps_reset_reset_bridge_in_reset_reset), // clk_reset.reset
		.sink_ready         (router_020_src_ready),                          //      sink.ready
		.sink_channel       (router_020_src_channel),                        //          .channel
		.sink_data          (router_020_src_data),                           //          .data
		.sink_startofpacket (router_020_src_startofpacket),                  //          .startofpacket
		.sink_endofpacket   (router_020_src_endofpacket),                    //          .endofpacket
		.sink_valid         (router_020_src_valid),                          //          .valid
		.src0_ready         (rsp_demux_018_src0_ready),                      //      src0.ready
		.src0_valid         (rsp_demux_018_src0_valid),                      //          .valid
		.src0_data          (rsp_demux_018_src0_data),                       //          .data
		.src0_channel       (rsp_demux_018_src0_channel),                    //          .channel
		.src0_startofpacket (rsp_demux_018_src0_startofpacket),              //          .startofpacket
		.src0_endofpacket   (rsp_demux_018_src0_endofpacket),                //          .endofpacket
		.src1_ready         (rsp_demux_018_src1_ready),                      //      src1.ready
		.src1_valid         (rsp_demux_018_src1_valid),                      //          .valid
		.src1_data          (rsp_demux_018_src1_data),                       //          .data
		.src1_channel       (rsp_demux_018_src1_channel),                    //          .channel
		.src1_startofpacket (rsp_demux_018_src1_startofpacket),              //          .startofpacket
		.src1_endofpacket   (rsp_demux_018_src1_endofpacket)                 //          .endofpacket
	);

	Computer_System_mm_interconnect_1_rsp_demux rsp_demux_019 (
		.clk                (System_PLL_sys_clk_clk),                        //       clk.clk
		.reset              (n0_from_hps_reset_reset_bridge_in_reset_reset), // clk_reset.reset
		.sink_ready         (router_021_src_ready),                          //      sink.ready
		.sink_channel       (router_021_src_channel),                        //          .channel
		.sink_data          (router_021_src_data),                           //          .data
		.sink_startofpacket (router_021_src_startofpacket),                  //          .startofpacket
		.sink_endofpacket   (router_021_src_endofpacket),                    //          .endofpacket
		.sink_valid         (router_021_src_valid),                          //          .valid
		.src0_ready         (rsp_demux_019_src0_ready),                      //      src0.ready
		.src0_valid         (rsp_demux_019_src0_valid),                      //          .valid
		.src0_data          (rsp_demux_019_src0_data),                       //          .data
		.src0_channel       (rsp_demux_019_src0_channel),                    //          .channel
		.src0_startofpacket (rsp_demux_019_src0_startofpacket),              //          .startofpacket
		.src0_endofpacket   (rsp_demux_019_src0_endofpacket),                //          .endofpacket
		.src1_ready         (rsp_demux_019_src1_ready),                      //      src1.ready
		.src1_valid         (rsp_demux_019_src1_valid),                      //          .valid
		.src1_data          (rsp_demux_019_src1_data),                       //          .data
		.src1_channel       (rsp_demux_019_src1_channel),                    //          .channel
		.src1_startofpacket (rsp_demux_019_src1_startofpacket),              //          .startofpacket
		.src1_endofpacket   (rsp_demux_019_src1_endofpacket)                 //          .endofpacket
	);

	Computer_System_mm_interconnect_1_rsp_demux rsp_demux_020 (
		.clk                (System_PLL_sys_clk_clk),                        //       clk.clk
		.reset              (n0_from_hps_reset_reset_bridge_in_reset_reset), // clk_reset.reset
		.sink_ready         (router_022_src_ready),                          //      sink.ready
		.sink_channel       (router_022_src_channel),                        //          .channel
		.sink_data          (router_022_src_data),                           //          .data
		.sink_startofpacket (router_022_src_startofpacket),                  //          .startofpacket
		.sink_endofpacket   (router_022_src_endofpacket),                    //          .endofpacket
		.sink_valid         (router_022_src_valid),                          //          .valid
		.src0_ready         (rsp_demux_020_src0_ready),                      //      src0.ready
		.src0_valid         (rsp_demux_020_src0_valid),                      //          .valid
		.src0_data          (rsp_demux_020_src0_data),                       //          .data
		.src0_channel       (rsp_demux_020_src0_channel),                    //          .channel
		.src0_startofpacket (rsp_demux_020_src0_startofpacket),              //          .startofpacket
		.src0_endofpacket   (rsp_demux_020_src0_endofpacket),                //          .endofpacket
		.src1_ready         (rsp_demux_020_src1_ready),                      //      src1.ready
		.src1_valid         (rsp_demux_020_src1_valid),                      //          .valid
		.src1_data          (rsp_demux_020_src1_data),                       //          .data
		.src1_channel       (rsp_demux_020_src1_channel),                    //          .channel
		.src1_startofpacket (rsp_demux_020_src1_startofpacket),              //          .startofpacket
		.src1_endofpacket   (rsp_demux_020_src1_endofpacket)                 //          .endofpacket
	);

	Computer_System_mm_interconnect_1_rsp_demux rsp_demux_021 (
		.clk                (System_PLL_sys_clk_clk),                        //       clk.clk
		.reset              (n0_from_hps_reset_reset_bridge_in_reset_reset), // clk_reset.reset
		.sink_ready         (router_023_src_ready),                          //      sink.ready
		.sink_channel       (router_023_src_channel),                        //          .channel
		.sink_data          (router_023_src_data),                           //          .data
		.sink_startofpacket (router_023_src_startofpacket),                  //          .startofpacket
		.sink_endofpacket   (router_023_src_endofpacket),                    //          .endofpacket
		.sink_valid         (router_023_src_valid),                          //          .valid
		.src0_ready         (rsp_demux_021_src0_ready),                      //      src0.ready
		.src0_valid         (rsp_demux_021_src0_valid),                      //          .valid
		.src0_data          (rsp_demux_021_src0_data),                       //          .data
		.src0_channel       (rsp_demux_021_src0_channel),                    //          .channel
		.src0_startofpacket (rsp_demux_021_src0_startofpacket),              //          .startofpacket
		.src0_endofpacket   (rsp_demux_021_src0_endofpacket),                //          .endofpacket
		.src1_ready         (rsp_demux_021_src1_ready),                      //      src1.ready
		.src1_valid         (rsp_demux_021_src1_valid),                      //          .valid
		.src1_data          (rsp_demux_021_src1_data),                       //          .data
		.src1_channel       (rsp_demux_021_src1_channel),                    //          .channel
		.src1_startofpacket (rsp_demux_021_src1_startofpacket),              //          .startofpacket
		.src1_endofpacket   (rsp_demux_021_src1_endofpacket)                 //          .endofpacket
	);

	Computer_System_mm_interconnect_1_rsp_demux rsp_demux_022 (
		.clk                (System_PLL_sys_clk_clk),                        //       clk.clk
		.reset              (n0_from_hps_reset_reset_bridge_in_reset_reset), // clk_reset.reset
		.sink_ready         (router_024_src_ready),                          //      sink.ready
		.sink_channel       (router_024_src_channel),                        //          .channel
		.sink_data          (router_024_src_data),                           //          .data
		.sink_startofpacket (router_024_src_startofpacket),                  //          .startofpacket
		.sink_endofpacket   (router_024_src_endofpacket),                    //          .endofpacket
		.sink_valid         (router_024_src_valid),                          //          .valid
		.src0_ready         (rsp_demux_022_src0_ready),                      //      src0.ready
		.src0_valid         (rsp_demux_022_src0_valid),                      //          .valid
		.src0_data          (rsp_demux_022_src0_data),                       //          .data
		.src0_channel       (rsp_demux_022_src0_channel),                    //          .channel
		.src0_startofpacket (rsp_demux_022_src0_startofpacket),              //          .startofpacket
		.src0_endofpacket   (rsp_demux_022_src0_endofpacket),                //          .endofpacket
		.src1_ready         (rsp_demux_022_src1_ready),                      //      src1.ready
		.src1_valid         (rsp_demux_022_src1_valid),                      //          .valid
		.src1_data          (rsp_demux_022_src1_data),                       //          .data
		.src1_channel       (rsp_demux_022_src1_channel),                    //          .channel
		.src1_startofpacket (rsp_demux_022_src1_startofpacket),              //          .startofpacket
		.src1_endofpacket   (rsp_demux_022_src1_endofpacket)                 //          .endofpacket
	);

	Computer_System_mm_interconnect_1_rsp_demux rsp_demux_023 (
		.clk                (System_PLL_sys_clk_clk),                        //       clk.clk
		.reset              (n0_from_hps_reset_reset_bridge_in_reset_reset), // clk_reset.reset
		.sink_ready         (router_025_src_ready),                          //      sink.ready
		.sink_channel       (router_025_src_channel),                        //          .channel
		.sink_data          (router_025_src_data),                           //          .data
		.sink_startofpacket (router_025_src_startofpacket),                  //          .startofpacket
		.sink_endofpacket   (router_025_src_endofpacket),                    //          .endofpacket
		.sink_valid         (router_025_src_valid),                          //          .valid
		.src0_ready         (rsp_demux_023_src0_ready),                      //      src0.ready
		.src0_valid         (rsp_demux_023_src0_valid),                      //          .valid
		.src0_data          (rsp_demux_023_src0_data),                       //          .data
		.src0_channel       (rsp_demux_023_src0_channel),                    //          .channel
		.src0_startofpacket (rsp_demux_023_src0_startofpacket),              //          .startofpacket
		.src0_endofpacket   (rsp_demux_023_src0_endofpacket),                //          .endofpacket
		.src1_ready         (rsp_demux_023_src1_ready),                      //      src1.ready
		.src1_valid         (rsp_demux_023_src1_valid),                      //          .valid
		.src1_data          (rsp_demux_023_src1_data),                       //          .data
		.src1_channel       (rsp_demux_023_src1_channel),                    //          .channel
		.src1_startofpacket (rsp_demux_023_src1_startofpacket),              //          .startofpacket
		.src1_endofpacket   (rsp_demux_023_src1_endofpacket)                 //          .endofpacket
	);

	Computer_System_mm_interconnect_1_rsp_demux rsp_demux_024 (
		.clk                (System_PLL_sys_clk_clk),                        //       clk.clk
		.reset              (n0_from_hps_reset_reset_bridge_in_reset_reset), // clk_reset.reset
		.sink_ready         (router_026_src_ready),                          //      sink.ready
		.sink_channel       (router_026_src_channel),                        //          .channel
		.sink_data          (router_026_src_data),                           //          .data
		.sink_startofpacket (router_026_src_startofpacket),                  //          .startofpacket
		.sink_endofpacket   (router_026_src_endofpacket),                    //          .endofpacket
		.sink_valid         (router_026_src_valid),                          //          .valid
		.src0_ready         (rsp_demux_024_src0_ready),                      //      src0.ready
		.src0_valid         (rsp_demux_024_src0_valid),                      //          .valid
		.src0_data          (rsp_demux_024_src0_data),                       //          .data
		.src0_channel       (rsp_demux_024_src0_channel),                    //          .channel
		.src0_startofpacket (rsp_demux_024_src0_startofpacket),              //          .startofpacket
		.src0_endofpacket   (rsp_demux_024_src0_endofpacket),                //          .endofpacket
		.src1_ready         (rsp_demux_024_src1_ready),                      //      src1.ready
		.src1_valid         (rsp_demux_024_src1_valid),                      //          .valid
		.src1_data          (rsp_demux_024_src1_data),                       //          .data
		.src1_channel       (rsp_demux_024_src1_channel),                    //          .channel
		.src1_startofpacket (rsp_demux_024_src1_startofpacket),              //          .startofpacket
		.src1_endofpacket   (rsp_demux_024_src1_endofpacket)                 //          .endofpacket
	);

	Computer_System_mm_interconnect_1_rsp_demux rsp_demux_025 (
		.clk                (System_PLL_sys_clk_clk),                        //       clk.clk
		.reset              (n0_from_hps_reset_reset_bridge_in_reset_reset), // clk_reset.reset
		.sink_ready         (router_027_src_ready),                          //      sink.ready
		.sink_channel       (router_027_src_channel),                        //          .channel
		.sink_data          (router_027_src_data),                           //          .data
		.sink_startofpacket (router_027_src_startofpacket),                  //          .startofpacket
		.sink_endofpacket   (router_027_src_endofpacket),                    //          .endofpacket
		.sink_valid         (router_027_src_valid),                          //          .valid
		.src0_ready         (rsp_demux_025_src0_ready),                      //      src0.ready
		.src0_valid         (rsp_demux_025_src0_valid),                      //          .valid
		.src0_data          (rsp_demux_025_src0_data),                       //          .data
		.src0_channel       (rsp_demux_025_src0_channel),                    //          .channel
		.src0_startofpacket (rsp_demux_025_src0_startofpacket),              //          .startofpacket
		.src0_endofpacket   (rsp_demux_025_src0_endofpacket),                //          .endofpacket
		.src1_ready         (rsp_demux_025_src1_ready),                      //      src1.ready
		.src1_valid         (rsp_demux_025_src1_valid),                      //          .valid
		.src1_data          (rsp_demux_025_src1_data),                       //          .data
		.src1_channel       (rsp_demux_025_src1_channel),                    //          .channel
		.src1_startofpacket (rsp_demux_025_src1_startofpacket),              //          .startofpacket
		.src1_endofpacket   (rsp_demux_025_src1_endofpacket)                 //          .endofpacket
	);

	Computer_System_mm_interconnect_1_rsp_demux rsp_demux_026 (
		.clk                (System_PLL_sys_clk_clk),                      //       clk.clk
		.reset              (AV_Config_reset_reset_bridge_in_reset_reset), // clk_reset.reset
		.sink_ready         (router_028_src_ready),                        //      sink.ready
		.sink_channel       (router_028_src_channel),                      //          .channel
		.sink_data          (router_028_src_data),                         //          .data
		.sink_startofpacket (router_028_src_startofpacket),                //          .startofpacket
		.sink_endofpacket   (router_028_src_endofpacket),                  //          .endofpacket
		.sink_valid         (router_028_src_valid),                        //          .valid
		.src0_ready         (rsp_demux_026_src0_ready),                    //      src0.ready
		.src0_valid         (rsp_demux_026_src0_valid),                    //          .valid
		.src0_data          (rsp_demux_026_src0_data),                     //          .data
		.src0_channel       (rsp_demux_026_src0_channel),                  //          .channel
		.src0_startofpacket (rsp_demux_026_src0_startofpacket),            //          .startofpacket
		.src0_endofpacket   (rsp_demux_026_src0_endofpacket),              //          .endofpacket
		.src1_ready         (rsp_demux_026_src1_ready),                    //      src1.ready
		.src1_valid         (rsp_demux_026_src1_valid),                    //          .valid
		.src1_data          (rsp_demux_026_src1_data),                     //          .data
		.src1_channel       (rsp_demux_026_src1_channel),                  //          .channel
		.src1_startofpacket (rsp_demux_026_src1_startofpacket),            //          .startofpacket
		.src1_endofpacket   (rsp_demux_026_src1_endofpacket)               //          .endofpacket
	);

	Computer_System_mm_interconnect_1_rsp_mux rsp_mux (
		.clk                  (System_PLL_sys_clk_clk),                                                   //       clk.clk
		.reset                (ARM_A9_HPS_h2f_lw_axi_master_agent_clk_reset_reset_bridge_in_reset_reset), // clk_reset.reset
		.src_ready            (rsp_mux_src_ready),                                                        //       src.ready
		.src_valid            (rsp_mux_src_valid),                                                        //          .valid
		.src_data             (rsp_mux_src_data),                                                         //          .data
		.src_channel          (rsp_mux_src_channel),                                                      //          .channel
		.src_startofpacket    (rsp_mux_src_startofpacket),                                                //          .startofpacket
		.src_endofpacket      (rsp_mux_src_endofpacket),                                                  //          .endofpacket
		.sink0_ready          (rsp_demux_src0_ready),                                                     //     sink0.ready
		.sink0_valid          (rsp_demux_src0_valid),                                                     //          .valid
		.sink0_channel        (rsp_demux_src0_channel),                                                   //          .channel
		.sink0_data           (rsp_demux_src0_data),                                                      //          .data
		.sink0_startofpacket  (rsp_demux_src0_startofpacket),                                             //          .startofpacket
		.sink0_endofpacket    (rsp_demux_src0_endofpacket),                                               //          .endofpacket
		.sink1_ready          (rsp_demux_001_src0_ready),                                                 //     sink1.ready
		.sink1_valid          (rsp_demux_001_src0_valid),                                                 //          .valid
		.sink1_channel        (rsp_demux_001_src0_channel),                                               //          .channel
		.sink1_data           (rsp_demux_001_src0_data),                                                  //          .data
		.sink1_startofpacket  (rsp_demux_001_src0_startofpacket),                                         //          .startofpacket
		.sink1_endofpacket    (rsp_demux_001_src0_endofpacket),                                           //          .endofpacket
		.sink2_ready          (rsp_demux_002_src0_ready),                                                 //     sink2.ready
		.sink2_valid          (rsp_demux_002_src0_valid),                                                 //          .valid
		.sink2_channel        (rsp_demux_002_src0_channel),                                               //          .channel
		.sink2_data           (rsp_demux_002_src0_data),                                                  //          .data
		.sink2_startofpacket  (rsp_demux_002_src0_startofpacket),                                         //          .startofpacket
		.sink2_endofpacket    (rsp_demux_002_src0_endofpacket),                                           //          .endofpacket
		.sink3_ready          (rsp_demux_003_src0_ready),                                                 //     sink3.ready
		.sink3_valid          (rsp_demux_003_src0_valid),                                                 //          .valid
		.sink3_channel        (rsp_demux_003_src0_channel),                                               //          .channel
		.sink3_data           (rsp_demux_003_src0_data),                                                  //          .data
		.sink3_startofpacket  (rsp_demux_003_src0_startofpacket),                                         //          .startofpacket
		.sink3_endofpacket    (rsp_demux_003_src0_endofpacket),                                           //          .endofpacket
		.sink4_ready          (rsp_demux_004_src0_ready),                                                 //     sink4.ready
		.sink4_valid          (rsp_demux_004_src0_valid),                                                 //          .valid
		.sink4_channel        (rsp_demux_004_src0_channel),                                               //          .channel
		.sink4_data           (rsp_demux_004_src0_data),                                                  //          .data
		.sink4_startofpacket  (rsp_demux_004_src0_startofpacket),                                         //          .startofpacket
		.sink4_endofpacket    (rsp_demux_004_src0_endofpacket),                                           //          .endofpacket
		.sink5_ready          (rsp_demux_005_src0_ready),                                                 //     sink5.ready
		.sink5_valid          (rsp_demux_005_src0_valid),                                                 //          .valid
		.sink5_channel        (rsp_demux_005_src0_channel),                                               //          .channel
		.sink5_data           (rsp_demux_005_src0_data),                                                  //          .data
		.sink5_startofpacket  (rsp_demux_005_src0_startofpacket),                                         //          .startofpacket
		.sink5_endofpacket    (rsp_demux_005_src0_endofpacket),                                           //          .endofpacket
		.sink6_ready          (rsp_demux_006_src0_ready),                                                 //     sink6.ready
		.sink6_valid          (rsp_demux_006_src0_valid),                                                 //          .valid
		.sink6_channel        (rsp_demux_006_src0_channel),                                               //          .channel
		.sink6_data           (rsp_demux_006_src0_data),                                                  //          .data
		.sink6_startofpacket  (rsp_demux_006_src0_startofpacket),                                         //          .startofpacket
		.sink6_endofpacket    (rsp_demux_006_src0_endofpacket),                                           //          .endofpacket
		.sink7_ready          (rsp_demux_007_src0_ready),                                                 //     sink7.ready
		.sink7_valid          (rsp_demux_007_src0_valid),                                                 //          .valid
		.sink7_channel        (rsp_demux_007_src0_channel),                                               //          .channel
		.sink7_data           (rsp_demux_007_src0_data),                                                  //          .data
		.sink7_startofpacket  (rsp_demux_007_src0_startofpacket),                                         //          .startofpacket
		.sink7_endofpacket    (rsp_demux_007_src0_endofpacket),                                           //          .endofpacket
		.sink8_ready          (rsp_demux_008_src0_ready),                                                 //     sink8.ready
		.sink8_valid          (rsp_demux_008_src0_valid),                                                 //          .valid
		.sink8_channel        (rsp_demux_008_src0_channel),                                               //          .channel
		.sink8_data           (rsp_demux_008_src0_data),                                                  //          .data
		.sink8_startofpacket  (rsp_demux_008_src0_startofpacket),                                         //          .startofpacket
		.sink8_endofpacket    (rsp_demux_008_src0_endofpacket),                                           //          .endofpacket
		.sink9_ready          (rsp_demux_009_src0_ready),                                                 //     sink9.ready
		.sink9_valid          (rsp_demux_009_src0_valid),                                                 //          .valid
		.sink9_channel        (rsp_demux_009_src0_channel),                                               //          .channel
		.sink9_data           (rsp_demux_009_src0_data),                                                  //          .data
		.sink9_startofpacket  (rsp_demux_009_src0_startofpacket),                                         //          .startofpacket
		.sink9_endofpacket    (rsp_demux_009_src0_endofpacket),                                           //          .endofpacket
		.sink10_ready         (rsp_demux_010_src0_ready),                                                 //    sink10.ready
		.sink10_valid         (rsp_demux_010_src0_valid),                                                 //          .valid
		.sink10_channel       (rsp_demux_010_src0_channel),                                               //          .channel
		.sink10_data          (rsp_demux_010_src0_data),                                                  //          .data
		.sink10_startofpacket (rsp_demux_010_src0_startofpacket),                                         //          .startofpacket
		.sink10_endofpacket   (rsp_demux_010_src0_endofpacket),                                           //          .endofpacket
		.sink11_ready         (rsp_demux_011_src0_ready),                                                 //    sink11.ready
		.sink11_valid         (rsp_demux_011_src0_valid),                                                 //          .valid
		.sink11_channel       (rsp_demux_011_src0_channel),                                               //          .channel
		.sink11_data          (rsp_demux_011_src0_data),                                                  //          .data
		.sink11_startofpacket (rsp_demux_011_src0_startofpacket),                                         //          .startofpacket
		.sink11_endofpacket   (rsp_demux_011_src0_endofpacket),                                           //          .endofpacket
		.sink12_ready         (rsp_demux_012_src0_ready),                                                 //    sink12.ready
		.sink12_valid         (rsp_demux_012_src0_valid),                                                 //          .valid
		.sink12_channel       (rsp_demux_012_src0_channel),                                               //          .channel
		.sink12_data          (rsp_demux_012_src0_data),                                                  //          .data
		.sink12_startofpacket (rsp_demux_012_src0_startofpacket),                                         //          .startofpacket
		.sink12_endofpacket   (rsp_demux_012_src0_endofpacket),                                           //          .endofpacket
		.sink13_ready         (rsp_demux_013_src0_ready),                                                 //    sink13.ready
		.sink13_valid         (rsp_demux_013_src0_valid),                                                 //          .valid
		.sink13_channel       (rsp_demux_013_src0_channel),                                               //          .channel
		.sink13_data          (rsp_demux_013_src0_data),                                                  //          .data
		.sink13_startofpacket (rsp_demux_013_src0_startofpacket),                                         //          .startofpacket
		.sink13_endofpacket   (rsp_demux_013_src0_endofpacket),                                           //          .endofpacket
		.sink14_ready         (rsp_demux_014_src0_ready),                                                 //    sink14.ready
		.sink14_valid         (rsp_demux_014_src0_valid),                                                 //          .valid
		.sink14_channel       (rsp_demux_014_src0_channel),                                               //          .channel
		.sink14_data          (rsp_demux_014_src0_data),                                                  //          .data
		.sink14_startofpacket (rsp_demux_014_src0_startofpacket),                                         //          .startofpacket
		.sink14_endofpacket   (rsp_demux_014_src0_endofpacket),                                           //          .endofpacket
		.sink15_ready         (rsp_demux_015_src0_ready),                                                 //    sink15.ready
		.sink15_valid         (rsp_demux_015_src0_valid),                                                 //          .valid
		.sink15_channel       (rsp_demux_015_src0_channel),                                               //          .channel
		.sink15_data          (rsp_demux_015_src0_data),                                                  //          .data
		.sink15_startofpacket (rsp_demux_015_src0_startofpacket),                                         //          .startofpacket
		.sink15_endofpacket   (rsp_demux_015_src0_endofpacket),                                           //          .endofpacket
		.sink16_ready         (rsp_demux_016_src0_ready),                                                 //    sink16.ready
		.sink16_valid         (rsp_demux_016_src0_valid),                                                 //          .valid
		.sink16_channel       (rsp_demux_016_src0_channel),                                               //          .channel
		.sink16_data          (rsp_demux_016_src0_data),                                                  //          .data
		.sink16_startofpacket (rsp_demux_016_src0_startofpacket),                                         //          .startofpacket
		.sink16_endofpacket   (rsp_demux_016_src0_endofpacket),                                           //          .endofpacket
		.sink17_ready         (rsp_demux_017_src0_ready),                                                 //    sink17.ready
		.sink17_valid         (rsp_demux_017_src0_valid),                                                 //          .valid
		.sink17_channel       (rsp_demux_017_src0_channel),                                               //          .channel
		.sink17_data          (rsp_demux_017_src0_data),                                                  //          .data
		.sink17_startofpacket (rsp_demux_017_src0_startofpacket),                                         //          .startofpacket
		.sink17_endofpacket   (rsp_demux_017_src0_endofpacket),                                           //          .endofpacket
		.sink18_ready         (rsp_demux_018_src0_ready),                                                 //    sink18.ready
		.sink18_valid         (rsp_demux_018_src0_valid),                                                 //          .valid
		.sink18_channel       (rsp_demux_018_src0_channel),                                               //          .channel
		.sink18_data          (rsp_demux_018_src0_data),                                                  //          .data
		.sink18_startofpacket (rsp_demux_018_src0_startofpacket),                                         //          .startofpacket
		.sink18_endofpacket   (rsp_demux_018_src0_endofpacket),                                           //          .endofpacket
		.sink19_ready         (rsp_demux_019_src0_ready),                                                 //    sink19.ready
		.sink19_valid         (rsp_demux_019_src0_valid),                                                 //          .valid
		.sink19_channel       (rsp_demux_019_src0_channel),                                               //          .channel
		.sink19_data          (rsp_demux_019_src0_data),                                                  //          .data
		.sink19_startofpacket (rsp_demux_019_src0_startofpacket),                                         //          .startofpacket
		.sink19_endofpacket   (rsp_demux_019_src0_endofpacket),                                           //          .endofpacket
		.sink20_ready         (rsp_demux_020_src0_ready),                                                 //    sink20.ready
		.sink20_valid         (rsp_demux_020_src0_valid),                                                 //          .valid
		.sink20_channel       (rsp_demux_020_src0_channel),                                               //          .channel
		.sink20_data          (rsp_demux_020_src0_data),                                                  //          .data
		.sink20_startofpacket (rsp_demux_020_src0_startofpacket),                                         //          .startofpacket
		.sink20_endofpacket   (rsp_demux_020_src0_endofpacket),                                           //          .endofpacket
		.sink21_ready         (rsp_demux_021_src0_ready),                                                 //    sink21.ready
		.sink21_valid         (rsp_demux_021_src0_valid),                                                 //          .valid
		.sink21_channel       (rsp_demux_021_src0_channel),                                               //          .channel
		.sink21_data          (rsp_demux_021_src0_data),                                                  //          .data
		.sink21_startofpacket (rsp_demux_021_src0_startofpacket),                                         //          .startofpacket
		.sink21_endofpacket   (rsp_demux_021_src0_endofpacket),                                           //          .endofpacket
		.sink22_ready         (rsp_demux_022_src0_ready),                                                 //    sink22.ready
		.sink22_valid         (rsp_demux_022_src0_valid),                                                 //          .valid
		.sink22_channel       (rsp_demux_022_src0_channel),                                               //          .channel
		.sink22_data          (rsp_demux_022_src0_data),                                                  //          .data
		.sink22_startofpacket (rsp_demux_022_src0_startofpacket),                                         //          .startofpacket
		.sink22_endofpacket   (rsp_demux_022_src0_endofpacket),                                           //          .endofpacket
		.sink23_ready         (rsp_demux_023_src0_ready),                                                 //    sink23.ready
		.sink23_valid         (rsp_demux_023_src0_valid),                                                 //          .valid
		.sink23_channel       (rsp_demux_023_src0_channel),                                               //          .channel
		.sink23_data          (rsp_demux_023_src0_data),                                                  //          .data
		.sink23_startofpacket (rsp_demux_023_src0_startofpacket),                                         //          .startofpacket
		.sink23_endofpacket   (rsp_demux_023_src0_endofpacket),                                           //          .endofpacket
		.sink24_ready         (rsp_demux_024_src0_ready),                                                 //    sink24.ready
		.sink24_valid         (rsp_demux_024_src0_valid),                                                 //          .valid
		.sink24_channel       (rsp_demux_024_src0_channel),                                               //          .channel
		.sink24_data          (rsp_demux_024_src0_data),                                                  //          .data
		.sink24_startofpacket (rsp_demux_024_src0_startofpacket),                                         //          .startofpacket
		.sink24_endofpacket   (rsp_demux_024_src0_endofpacket),                                           //          .endofpacket
		.sink25_ready         (rsp_demux_025_src0_ready),                                                 //    sink25.ready
		.sink25_valid         (rsp_demux_025_src0_valid),                                                 //          .valid
		.sink25_channel       (rsp_demux_025_src0_channel),                                               //          .channel
		.sink25_data          (rsp_demux_025_src0_data),                                                  //          .data
		.sink25_startofpacket (rsp_demux_025_src0_startofpacket),                                         //          .startofpacket
		.sink25_endofpacket   (rsp_demux_025_src0_endofpacket),                                           //          .endofpacket
		.sink26_ready         (rsp_demux_026_src0_ready),                                                 //    sink26.ready
		.sink26_valid         (rsp_demux_026_src0_valid),                                                 //          .valid
		.sink26_channel       (rsp_demux_026_src0_channel),                                               //          .channel
		.sink26_data          (rsp_demux_026_src0_data),                                                  //          .data
		.sink26_startofpacket (rsp_demux_026_src0_startofpacket),                                         //          .startofpacket
		.sink26_endofpacket   (rsp_demux_026_src0_endofpacket)                                            //          .endofpacket
	);

	Computer_System_mm_interconnect_1_rsp_mux rsp_mux_001 (
		.clk                  (System_PLL_sys_clk_clk),                                                   //       clk.clk
		.reset                (ARM_A9_HPS_h2f_lw_axi_master_agent_clk_reset_reset_bridge_in_reset_reset), // clk_reset.reset
		.src_ready            (rsp_mux_001_src_ready),                                                    //       src.ready
		.src_valid            (rsp_mux_001_src_valid),                                                    //          .valid
		.src_data             (rsp_mux_001_src_data),                                                     //          .data
		.src_channel          (rsp_mux_001_src_channel),                                                  //          .channel
		.src_startofpacket    (rsp_mux_001_src_startofpacket),                                            //          .startofpacket
		.src_endofpacket      (rsp_mux_001_src_endofpacket),                                              //          .endofpacket
		.sink0_ready          (rsp_demux_src1_ready),                                                     //     sink0.ready
		.sink0_valid          (rsp_demux_src1_valid),                                                     //          .valid
		.sink0_channel        (rsp_demux_src1_channel),                                                   //          .channel
		.sink0_data           (rsp_demux_src1_data),                                                      //          .data
		.sink0_startofpacket  (rsp_demux_src1_startofpacket),                                             //          .startofpacket
		.sink0_endofpacket    (rsp_demux_src1_endofpacket),                                               //          .endofpacket
		.sink1_ready          (rsp_demux_001_src1_ready),                                                 //     sink1.ready
		.sink1_valid          (rsp_demux_001_src1_valid),                                                 //          .valid
		.sink1_channel        (rsp_demux_001_src1_channel),                                               //          .channel
		.sink1_data           (rsp_demux_001_src1_data),                                                  //          .data
		.sink1_startofpacket  (rsp_demux_001_src1_startofpacket),                                         //          .startofpacket
		.sink1_endofpacket    (rsp_demux_001_src1_endofpacket),                                           //          .endofpacket
		.sink2_ready          (rsp_demux_002_src1_ready),                                                 //     sink2.ready
		.sink2_valid          (rsp_demux_002_src1_valid),                                                 //          .valid
		.sink2_channel        (rsp_demux_002_src1_channel),                                               //          .channel
		.sink2_data           (rsp_demux_002_src1_data),                                                  //          .data
		.sink2_startofpacket  (rsp_demux_002_src1_startofpacket),                                         //          .startofpacket
		.sink2_endofpacket    (rsp_demux_002_src1_endofpacket),                                           //          .endofpacket
		.sink3_ready          (rsp_demux_003_src1_ready),                                                 //     sink3.ready
		.sink3_valid          (rsp_demux_003_src1_valid),                                                 //          .valid
		.sink3_channel        (rsp_demux_003_src1_channel),                                               //          .channel
		.sink3_data           (rsp_demux_003_src1_data),                                                  //          .data
		.sink3_startofpacket  (rsp_demux_003_src1_startofpacket),                                         //          .startofpacket
		.sink3_endofpacket    (rsp_demux_003_src1_endofpacket),                                           //          .endofpacket
		.sink4_ready          (rsp_demux_004_src1_ready),                                                 //     sink4.ready
		.sink4_valid          (rsp_demux_004_src1_valid),                                                 //          .valid
		.sink4_channel        (rsp_demux_004_src1_channel),                                               //          .channel
		.sink4_data           (rsp_demux_004_src1_data),                                                  //          .data
		.sink4_startofpacket  (rsp_demux_004_src1_startofpacket),                                         //          .startofpacket
		.sink4_endofpacket    (rsp_demux_004_src1_endofpacket),                                           //          .endofpacket
		.sink5_ready          (rsp_demux_005_src1_ready),                                                 //     sink5.ready
		.sink5_valid          (rsp_demux_005_src1_valid),                                                 //          .valid
		.sink5_channel        (rsp_demux_005_src1_channel),                                               //          .channel
		.sink5_data           (rsp_demux_005_src1_data),                                                  //          .data
		.sink5_startofpacket  (rsp_demux_005_src1_startofpacket),                                         //          .startofpacket
		.sink5_endofpacket    (rsp_demux_005_src1_endofpacket),                                           //          .endofpacket
		.sink6_ready          (rsp_demux_006_src1_ready),                                                 //     sink6.ready
		.sink6_valid          (rsp_demux_006_src1_valid),                                                 //          .valid
		.sink6_channel        (rsp_demux_006_src1_channel),                                               //          .channel
		.sink6_data           (rsp_demux_006_src1_data),                                                  //          .data
		.sink6_startofpacket  (rsp_demux_006_src1_startofpacket),                                         //          .startofpacket
		.sink6_endofpacket    (rsp_demux_006_src1_endofpacket),                                           //          .endofpacket
		.sink7_ready          (rsp_demux_007_src1_ready),                                                 //     sink7.ready
		.sink7_valid          (rsp_demux_007_src1_valid),                                                 //          .valid
		.sink7_channel        (rsp_demux_007_src1_channel),                                               //          .channel
		.sink7_data           (rsp_demux_007_src1_data),                                                  //          .data
		.sink7_startofpacket  (rsp_demux_007_src1_startofpacket),                                         //          .startofpacket
		.sink7_endofpacket    (rsp_demux_007_src1_endofpacket),                                           //          .endofpacket
		.sink8_ready          (rsp_demux_008_src1_ready),                                                 //     sink8.ready
		.sink8_valid          (rsp_demux_008_src1_valid),                                                 //          .valid
		.sink8_channel        (rsp_demux_008_src1_channel),                                               //          .channel
		.sink8_data           (rsp_demux_008_src1_data),                                                  //          .data
		.sink8_startofpacket  (rsp_demux_008_src1_startofpacket),                                         //          .startofpacket
		.sink8_endofpacket    (rsp_demux_008_src1_endofpacket),                                           //          .endofpacket
		.sink9_ready          (rsp_demux_009_src1_ready),                                                 //     sink9.ready
		.sink9_valid          (rsp_demux_009_src1_valid),                                                 //          .valid
		.sink9_channel        (rsp_demux_009_src1_channel),                                               //          .channel
		.sink9_data           (rsp_demux_009_src1_data),                                                  //          .data
		.sink9_startofpacket  (rsp_demux_009_src1_startofpacket),                                         //          .startofpacket
		.sink9_endofpacket    (rsp_demux_009_src1_endofpacket),                                           //          .endofpacket
		.sink10_ready         (rsp_demux_010_src1_ready),                                                 //    sink10.ready
		.sink10_valid         (rsp_demux_010_src1_valid),                                                 //          .valid
		.sink10_channel       (rsp_demux_010_src1_channel),                                               //          .channel
		.sink10_data          (rsp_demux_010_src1_data),                                                  //          .data
		.sink10_startofpacket (rsp_demux_010_src1_startofpacket),                                         //          .startofpacket
		.sink10_endofpacket   (rsp_demux_010_src1_endofpacket),                                           //          .endofpacket
		.sink11_ready         (rsp_demux_011_src1_ready),                                                 //    sink11.ready
		.sink11_valid         (rsp_demux_011_src1_valid),                                                 //          .valid
		.sink11_channel       (rsp_demux_011_src1_channel),                                               //          .channel
		.sink11_data          (rsp_demux_011_src1_data),                                                  //          .data
		.sink11_startofpacket (rsp_demux_011_src1_startofpacket),                                         //          .startofpacket
		.sink11_endofpacket   (rsp_demux_011_src1_endofpacket),                                           //          .endofpacket
		.sink12_ready         (rsp_demux_012_src1_ready),                                                 //    sink12.ready
		.sink12_valid         (rsp_demux_012_src1_valid),                                                 //          .valid
		.sink12_channel       (rsp_demux_012_src1_channel),                                               //          .channel
		.sink12_data          (rsp_demux_012_src1_data),                                                  //          .data
		.sink12_startofpacket (rsp_demux_012_src1_startofpacket),                                         //          .startofpacket
		.sink12_endofpacket   (rsp_demux_012_src1_endofpacket),                                           //          .endofpacket
		.sink13_ready         (rsp_demux_013_src1_ready),                                                 //    sink13.ready
		.sink13_valid         (rsp_demux_013_src1_valid),                                                 //          .valid
		.sink13_channel       (rsp_demux_013_src1_channel),                                               //          .channel
		.sink13_data          (rsp_demux_013_src1_data),                                                  //          .data
		.sink13_startofpacket (rsp_demux_013_src1_startofpacket),                                         //          .startofpacket
		.sink13_endofpacket   (rsp_demux_013_src1_endofpacket),                                           //          .endofpacket
		.sink14_ready         (rsp_demux_014_src1_ready),                                                 //    sink14.ready
		.sink14_valid         (rsp_demux_014_src1_valid),                                                 //          .valid
		.sink14_channel       (rsp_demux_014_src1_channel),                                               //          .channel
		.sink14_data          (rsp_demux_014_src1_data),                                                  //          .data
		.sink14_startofpacket (rsp_demux_014_src1_startofpacket),                                         //          .startofpacket
		.sink14_endofpacket   (rsp_demux_014_src1_endofpacket),                                           //          .endofpacket
		.sink15_ready         (rsp_demux_015_src1_ready),                                                 //    sink15.ready
		.sink15_valid         (rsp_demux_015_src1_valid),                                                 //          .valid
		.sink15_channel       (rsp_demux_015_src1_channel),                                               //          .channel
		.sink15_data          (rsp_demux_015_src1_data),                                                  //          .data
		.sink15_startofpacket (rsp_demux_015_src1_startofpacket),                                         //          .startofpacket
		.sink15_endofpacket   (rsp_demux_015_src1_endofpacket),                                           //          .endofpacket
		.sink16_ready         (rsp_demux_016_src1_ready),                                                 //    sink16.ready
		.sink16_valid         (rsp_demux_016_src1_valid),                                                 //          .valid
		.sink16_channel       (rsp_demux_016_src1_channel),                                               //          .channel
		.sink16_data          (rsp_demux_016_src1_data),                                                  //          .data
		.sink16_startofpacket (rsp_demux_016_src1_startofpacket),                                         //          .startofpacket
		.sink16_endofpacket   (rsp_demux_016_src1_endofpacket),                                           //          .endofpacket
		.sink17_ready         (rsp_demux_017_src1_ready),                                                 //    sink17.ready
		.sink17_valid         (rsp_demux_017_src1_valid),                                                 //          .valid
		.sink17_channel       (rsp_demux_017_src1_channel),                                               //          .channel
		.sink17_data          (rsp_demux_017_src1_data),                                                  //          .data
		.sink17_startofpacket (rsp_demux_017_src1_startofpacket),                                         //          .startofpacket
		.sink17_endofpacket   (rsp_demux_017_src1_endofpacket),                                           //          .endofpacket
		.sink18_ready         (rsp_demux_018_src1_ready),                                                 //    sink18.ready
		.sink18_valid         (rsp_demux_018_src1_valid),                                                 //          .valid
		.sink18_channel       (rsp_demux_018_src1_channel),                                               //          .channel
		.sink18_data          (rsp_demux_018_src1_data),                                                  //          .data
		.sink18_startofpacket (rsp_demux_018_src1_startofpacket),                                         //          .startofpacket
		.sink18_endofpacket   (rsp_demux_018_src1_endofpacket),                                           //          .endofpacket
		.sink19_ready         (rsp_demux_019_src1_ready),                                                 //    sink19.ready
		.sink19_valid         (rsp_demux_019_src1_valid),                                                 //          .valid
		.sink19_channel       (rsp_demux_019_src1_channel),                                               //          .channel
		.sink19_data          (rsp_demux_019_src1_data),                                                  //          .data
		.sink19_startofpacket (rsp_demux_019_src1_startofpacket),                                         //          .startofpacket
		.sink19_endofpacket   (rsp_demux_019_src1_endofpacket),                                           //          .endofpacket
		.sink20_ready         (rsp_demux_020_src1_ready),                                                 //    sink20.ready
		.sink20_valid         (rsp_demux_020_src1_valid),                                                 //          .valid
		.sink20_channel       (rsp_demux_020_src1_channel),                                               //          .channel
		.sink20_data          (rsp_demux_020_src1_data),                                                  //          .data
		.sink20_startofpacket (rsp_demux_020_src1_startofpacket),                                         //          .startofpacket
		.sink20_endofpacket   (rsp_demux_020_src1_endofpacket),                                           //          .endofpacket
		.sink21_ready         (rsp_demux_021_src1_ready),                                                 //    sink21.ready
		.sink21_valid         (rsp_demux_021_src1_valid),                                                 //          .valid
		.sink21_channel       (rsp_demux_021_src1_channel),                                               //          .channel
		.sink21_data          (rsp_demux_021_src1_data),                                                  //          .data
		.sink21_startofpacket (rsp_demux_021_src1_startofpacket),                                         //          .startofpacket
		.sink21_endofpacket   (rsp_demux_021_src1_endofpacket),                                           //          .endofpacket
		.sink22_ready         (rsp_demux_022_src1_ready),                                                 //    sink22.ready
		.sink22_valid         (rsp_demux_022_src1_valid),                                                 //          .valid
		.sink22_channel       (rsp_demux_022_src1_channel),                                               //          .channel
		.sink22_data          (rsp_demux_022_src1_data),                                                  //          .data
		.sink22_startofpacket (rsp_demux_022_src1_startofpacket),                                         //          .startofpacket
		.sink22_endofpacket   (rsp_demux_022_src1_endofpacket),                                           //          .endofpacket
		.sink23_ready         (rsp_demux_023_src1_ready),                                                 //    sink23.ready
		.sink23_valid         (rsp_demux_023_src1_valid),                                                 //          .valid
		.sink23_channel       (rsp_demux_023_src1_channel),                                               //          .channel
		.sink23_data          (rsp_demux_023_src1_data),                                                  //          .data
		.sink23_startofpacket (rsp_demux_023_src1_startofpacket),                                         //          .startofpacket
		.sink23_endofpacket   (rsp_demux_023_src1_endofpacket),                                           //          .endofpacket
		.sink24_ready         (rsp_demux_024_src1_ready),                                                 //    sink24.ready
		.sink24_valid         (rsp_demux_024_src1_valid),                                                 //          .valid
		.sink24_channel       (rsp_demux_024_src1_channel),                                               //          .channel
		.sink24_data          (rsp_demux_024_src1_data),                                                  //          .data
		.sink24_startofpacket (rsp_demux_024_src1_startofpacket),                                         //          .startofpacket
		.sink24_endofpacket   (rsp_demux_024_src1_endofpacket),                                           //          .endofpacket
		.sink25_ready         (rsp_demux_025_src1_ready),                                                 //    sink25.ready
		.sink25_valid         (rsp_demux_025_src1_valid),                                                 //          .valid
		.sink25_channel       (rsp_demux_025_src1_channel),                                               //          .channel
		.sink25_data          (rsp_demux_025_src1_data),                                                  //          .data
		.sink25_startofpacket (rsp_demux_025_src1_startofpacket),                                         //          .startofpacket
		.sink25_endofpacket   (rsp_demux_025_src1_endofpacket),                                           //          .endofpacket
		.sink26_ready         (rsp_demux_026_src1_ready),                                                 //    sink26.ready
		.sink26_valid         (rsp_demux_026_src1_valid),                                                 //          .valid
		.sink26_channel       (rsp_demux_026_src1_channel),                                               //          .channel
		.sink26_data          (rsp_demux_026_src1_data),                                                  //          .data
		.sink26_startofpacket (rsp_demux_026_src1_startofpacket),                                         //          .startofpacket
		.sink26_endofpacket   (rsp_demux_026_src1_endofpacket)                                            //          .endofpacket
	);

	Computer_System_mm_interconnect_1_avalon_st_adapter #(
		.inBitsPerSymbol (34),
		.inUsePackets    (0),
		.inDataWidth     (34),
		.inChannelWidth  (0),
		.inErrorWidth    (0),
		.inUseEmptyPort  (0),
		.inUseValid      (1),
		.inUseReady      (1),
		.inReadyLatency  (0),
		.outDataWidth    (34),
		.outChannelWidth (0),
		.outErrorWidth   (1),
		.outUseEmptyPort (0),
		.outUseValid     (1),
		.outUseReady     (1),
		.outReadyLatency (0)
	) avalon_st_adapter (
		.in_clk_0_clk   (System_PLL_sys_clk_clk),                                      // in_clk_0.clk
		.in_rst_0_reset (AV_Config_reset_reset_bridge_in_reset_reset),                 // in_rst_0.reset
		.in_0_data      (av_config_avalon_av_config_slave_agent_rdata_fifo_out_data),  //     in_0.data
		.in_0_valid     (av_config_avalon_av_config_slave_agent_rdata_fifo_out_valid), //         .valid
		.in_0_ready     (av_config_avalon_av_config_slave_agent_rdata_fifo_out_ready), //         .ready
		.out_0_data     (avalon_st_adapter_out_0_data),                                //    out_0.data
		.out_0_valid    (avalon_st_adapter_out_0_valid),                               //         .valid
		.out_0_ready    (avalon_st_adapter_out_0_ready),                               //         .ready
		.out_0_error    (avalon_st_adapter_out_0_error)                                //         .error
	);

	Computer_System_mm_interconnect_1_avalon_st_adapter #(
		.inBitsPerSymbol (34),
		.inUsePackets    (0),
		.inDataWidth     (34),
		.inChannelWidth  (0),
		.inErrorWidth    (0),
		.inUseEmptyPort  (0),
		.inUseValid      (1),
		.inUseReady      (1),
		.inReadyLatency  (0),
		.outDataWidth    (34),
		.outChannelWidth (0),
		.outErrorWidth   (1),
		.outUseEmptyPort (0),
		.outUseValid     (1),
		.outUseReady     (1),
		.outReadyLatency (0)
	) avalon_st_adapter_001 (
		.in_clk_0_clk   (System_PLL_sys_clk_clk),                                             // in_clk_0.clk
		.in_rst_0_reset (AV_Config_reset_reset_bridge_in_reset_reset),                        // in_rst_0.reset
		.in_0_data      (vga_subsystem_char_buffer_control_slave_agent_rdata_fifo_out_data),  //     in_0.data
		.in_0_valid     (vga_subsystem_char_buffer_control_slave_agent_rdata_fifo_out_valid), //         .valid
		.in_0_ready     (vga_subsystem_char_buffer_control_slave_agent_rdata_fifo_out_ready), //         .ready
		.out_0_data     (avalon_st_adapter_001_out_0_data),                                   //    out_0.data
		.out_0_valid    (avalon_st_adapter_001_out_0_valid),                                  //         .valid
		.out_0_ready    (avalon_st_adapter_001_out_0_ready),                                  //         .ready
		.out_0_error    (avalon_st_adapter_001_out_0_error)                                   //         .error
	);

	Computer_System_mm_interconnect_1_avalon_st_adapter #(
		.inBitsPerSymbol (34),
		.inUsePackets    (0),
		.inDataWidth     (34),
		.inChannelWidth  (0),
		.inErrorWidth    (0),
		.inUseEmptyPort  (0),
		.inUseValid      (1),
		.inUseReady      (1),
		.inReadyLatency  (0),
		.outDataWidth    (34),
		.outChannelWidth (0),
		.outErrorWidth   (1),
		.outUseEmptyPort (0),
		.outUseValid     (1),
		.outUseReady     (1),
		.outReadyLatency (0)
	) avalon_st_adapter_002 (
		.in_clk_0_clk   (System_PLL_sys_clk_clk),                        // in_clk_0.clk
		.in_rst_0_reset (n0_from_hps_reset_reset_bridge_in_reset_reset), // in_rst_0.reset
		.in_0_data      (n0_from_hps_s1_agent_rdata_fifo_out_data),      //     in_0.data
		.in_0_valid     (n0_from_hps_s1_agent_rdata_fifo_out_valid),     //         .valid
		.in_0_ready     (n0_from_hps_s1_agent_rdata_fifo_out_ready),     //         .ready
		.out_0_data     (avalon_st_adapter_002_out_0_data),              //    out_0.data
		.out_0_valid    (avalon_st_adapter_002_out_0_valid),             //         .valid
		.out_0_ready    (avalon_st_adapter_002_out_0_ready),             //         .ready
		.out_0_error    (avalon_st_adapter_002_out_0_error)              //         .error
	);

	Computer_System_mm_interconnect_1_avalon_st_adapter #(
		.inBitsPerSymbol (34),
		.inUsePackets    (0),
		.inDataWidth     (34),
		.inChannelWidth  (0),
		.inErrorWidth    (0),
		.inUseEmptyPort  (0),
		.inUseValid      (1),
		.inUseReady      (1),
		.inReadyLatency  (0),
		.outDataWidth    (34),
		.outChannelWidth (0),
		.outErrorWidth   (1),
		.outUseEmptyPort (0),
		.outUseValid     (1),
		.outUseReady     (1),
		.outReadyLatency (0)
	) avalon_st_adapter_003 (
		.in_clk_0_clk   (System_PLL_sys_clk_clk),                        // in_clk_0.clk
		.in_rst_0_reset (n0_from_hps_reset_reset_bridge_in_reset_reset), // in_rst_0.reset
		.in_0_data      (nn_from_hps_s1_agent_rdata_fifo_out_data),      //     in_0.data
		.in_0_valid     (nn_from_hps_s1_agent_rdata_fifo_out_valid),     //         .valid
		.in_0_ready     (nn_from_hps_s1_agent_rdata_fifo_out_ready),     //         .ready
		.out_0_data     (avalon_st_adapter_003_out_0_data),              //    out_0.data
		.out_0_valid    (avalon_st_adapter_003_out_0_valid),             //         .valid
		.out_0_ready    (avalon_st_adapter_003_out_0_ready),             //         .ready
		.out_0_error    (avalon_st_adapter_003_out_0_error)              //         .error
	);

	Computer_System_mm_interconnect_1_avalon_st_adapter #(
		.inBitsPerSymbol (34),
		.inUsePackets    (0),
		.inDataWidth     (34),
		.inChannelWidth  (0),
		.inErrorWidth    (0),
		.inUseEmptyPort  (0),
		.inUseValid      (1),
		.inUseReady      (1),
		.inReadyLatency  (0),
		.outDataWidth    (34),
		.outChannelWidth (0),
		.outErrorWidth   (1),
		.outUseEmptyPort (0),
		.outUseValid     (1),
		.outUseReady     (1),
		.outReadyLatency (0)
	) avalon_st_adapter_004 (
		.in_clk_0_clk   (System_PLL_sys_clk_clk),                        // in_clk_0.clk
		.in_rst_0_reset (n0_from_hps_reset_reset_bridge_in_reset_reset), // in_rst_0.reset
		.in_0_data      (ns_from_hps_s1_agent_rdata_fifo_out_data),      //     in_0.data
		.in_0_valid     (ns_from_hps_s1_agent_rdata_fifo_out_valid),     //         .valid
		.in_0_ready     (ns_from_hps_s1_agent_rdata_fifo_out_ready),     //         .ready
		.out_0_data     (avalon_st_adapter_004_out_0_data),              //    out_0.data
		.out_0_valid    (avalon_st_adapter_004_out_0_valid),             //         .valid
		.out_0_ready    (avalon_st_adapter_004_out_0_ready),             //         .ready
		.out_0_error    (avalon_st_adapter_004_out_0_error)              //         .error
	);

	Computer_System_mm_interconnect_1_avalon_st_adapter #(
		.inBitsPerSymbol (34),
		.inUsePackets    (0),
		.inDataWidth     (34),
		.inChannelWidth  (0),
		.inErrorWidth    (0),
		.inUseEmptyPort  (0),
		.inUseValid      (1),
		.inUseReady      (1),
		.inReadyLatency  (0),
		.outDataWidth    (34),
		.outChannelWidth (0),
		.outErrorWidth   (1),
		.outUseEmptyPort (0),
		.outUseValid     (1),
		.outUseReady     (1),
		.outReadyLatency (0)
	) avalon_st_adapter_005 (
		.in_clk_0_clk   (System_PLL_sys_clk_clk),                        // in_clk_0.clk
		.in_rst_0_reset (n0_from_hps_reset_reset_bridge_in_reset_reset), // in_rst_0.reset
		.in_0_data      (nw_from_hps_s1_agent_rdata_fifo_out_data),      //     in_0.data
		.in_0_valid     (nw_from_hps_s1_agent_rdata_fifo_out_valid),     //         .valid
		.in_0_ready     (nw_from_hps_s1_agent_rdata_fifo_out_ready),     //         .ready
		.out_0_data     (avalon_st_adapter_005_out_0_data),              //    out_0.data
		.out_0_valid    (avalon_st_adapter_005_out_0_valid),             //         .valid
		.out_0_ready    (avalon_st_adapter_005_out_0_ready),             //         .ready
		.out_0_error    (avalon_st_adapter_005_out_0_error)              //         .error
	);

	Computer_System_mm_interconnect_1_avalon_st_adapter #(
		.inBitsPerSymbol (34),
		.inUsePackets    (0),
		.inDataWidth     (34),
		.inChannelWidth  (0),
		.inErrorWidth    (0),
		.inUseEmptyPort  (0),
		.inUseValid      (1),
		.inUseReady      (1),
		.inReadyLatency  (0),
		.outDataWidth    (34),
		.outChannelWidth (0),
		.outErrorWidth   (1),
		.outUseEmptyPort (0),
		.outUseValid     (1),
		.outUseReady     (1),
		.outReadyLatency (0)
	) avalon_st_adapter_006 (
		.in_clk_0_clk   (System_PLL_sys_clk_clk),                        // in_clk_0.clk
		.in_rst_0_reset (n0_from_hps_reset_reset_bridge_in_reset_reset), // in_rst_0.reset
		.in_0_data      (ne_from_hps_s1_agent_rdata_fifo_out_data),      //     in_0.data
		.in_0_valid     (ne_from_hps_s1_agent_rdata_fifo_out_valid),     //         .valid
		.in_0_ready     (ne_from_hps_s1_agent_rdata_fifo_out_ready),     //         .ready
		.out_0_data     (avalon_st_adapter_006_out_0_data),              //    out_0.data
		.out_0_valid    (avalon_st_adapter_006_out_0_valid),             //         .valid
		.out_0_ready    (avalon_st_adapter_006_out_0_ready),             //         .ready
		.out_0_error    (avalon_st_adapter_006_out_0_error)              //         .error
	);

	Computer_System_mm_interconnect_1_avalon_st_adapter #(
		.inBitsPerSymbol (34),
		.inUsePackets    (0),
		.inDataWidth     (34),
		.inChannelWidth  (0),
		.inErrorWidth    (0),
		.inUseEmptyPort  (0),
		.inUseValid      (1),
		.inUseReady      (1),
		.inReadyLatency  (0),
		.outDataWidth    (34),
		.outChannelWidth (0),
		.outErrorWidth   (1),
		.outUseEmptyPort (0),
		.outUseValid     (1),
		.outUseReady     (1),
		.outReadyLatency (0)
	) avalon_st_adapter_007 (
		.in_clk_0_clk   (System_PLL_sys_clk_clk),                        // in_clk_0.clk
		.in_rst_0_reset (n0_from_hps_reset_reset_bridge_in_reset_reset), // in_rst_0.reset
		.in_0_data      (nnw_from_hps_s1_agent_rdata_fifo_out_data),     //     in_0.data
		.in_0_valid     (nnw_from_hps_s1_agent_rdata_fifo_out_valid),    //         .valid
		.in_0_ready     (nnw_from_hps_s1_agent_rdata_fifo_out_ready),    //         .ready
		.out_0_data     (avalon_st_adapter_007_out_0_data),              //    out_0.data
		.out_0_valid    (avalon_st_adapter_007_out_0_valid),             //         .valid
		.out_0_ready    (avalon_st_adapter_007_out_0_ready),             //         .ready
		.out_0_error    (avalon_st_adapter_007_out_0_error)              //         .error
	);

	Computer_System_mm_interconnect_1_avalon_st_adapter #(
		.inBitsPerSymbol (34),
		.inUsePackets    (0),
		.inDataWidth     (34),
		.inChannelWidth  (0),
		.inErrorWidth    (0),
		.inUseEmptyPort  (0),
		.inUseValid      (1),
		.inUseReady      (1),
		.inReadyLatency  (0),
		.outDataWidth    (34),
		.outChannelWidth (0),
		.outErrorWidth   (1),
		.outUseEmptyPort (0),
		.outUseValid     (1),
		.outUseReady     (1),
		.outReadyLatency (0)
	) avalon_st_adapter_008 (
		.in_clk_0_clk   (System_PLL_sys_clk_clk),                        // in_clk_0.clk
		.in_rst_0_reset (n0_from_hps_reset_reset_bridge_in_reset_reset), // in_rst_0.reset
		.in_0_data      (nne_from_hps_s1_agent_rdata_fifo_out_data),     //     in_0.data
		.in_0_valid     (nne_from_hps_s1_agent_rdata_fifo_out_valid),    //         .valid
		.in_0_ready     (nne_from_hps_s1_agent_rdata_fifo_out_ready),    //         .ready
		.out_0_data     (avalon_st_adapter_008_out_0_data),              //    out_0.data
		.out_0_valid    (avalon_st_adapter_008_out_0_valid),             //         .valid
		.out_0_ready    (avalon_st_adapter_008_out_0_ready),             //         .ready
		.out_0_error    (avalon_st_adapter_008_out_0_error)              //         .error
	);

	Computer_System_mm_interconnect_1_avalon_st_adapter #(
		.inBitsPerSymbol (34),
		.inUsePackets    (0),
		.inDataWidth     (34),
		.inChannelWidth  (0),
		.inErrorWidth    (0),
		.inUseEmptyPort  (0),
		.inUseValid      (1),
		.inUseReady      (1),
		.inReadyLatency  (0),
		.outDataWidth    (34),
		.outChannelWidth (0),
		.outErrorWidth   (1),
		.outUseEmptyPort (0),
		.outUseValid     (1),
		.outUseReady     (1),
		.outReadyLatency (0)
	) avalon_st_adapter_009 (
		.in_clk_0_clk   (System_PLL_sys_clk_clk),                        // in_clk_0.clk
		.in_rst_0_reset (n0_from_hps_reset_reset_bridge_in_reset_reset), // in_rst_0.reset
		.in_0_data      (nsw_from_hps_s1_agent_rdata_fifo_out_data),     //     in_0.data
		.in_0_valid     (nsw_from_hps_s1_agent_rdata_fifo_out_valid),    //         .valid
		.in_0_ready     (nsw_from_hps_s1_agent_rdata_fifo_out_ready),    //         .ready
		.out_0_data     (avalon_st_adapter_009_out_0_data),              //    out_0.data
		.out_0_valid    (avalon_st_adapter_009_out_0_valid),             //         .valid
		.out_0_ready    (avalon_st_adapter_009_out_0_ready),             //         .ready
		.out_0_error    (avalon_st_adapter_009_out_0_error)              //         .error
	);

	Computer_System_mm_interconnect_1_avalon_st_adapter #(
		.inBitsPerSymbol (34),
		.inUsePackets    (0),
		.inDataWidth     (34),
		.inChannelWidth  (0),
		.inErrorWidth    (0),
		.inUseEmptyPort  (0),
		.inUseValid      (1),
		.inUseReady      (1),
		.inReadyLatency  (0),
		.outDataWidth    (34),
		.outChannelWidth (0),
		.outErrorWidth   (1),
		.outUseEmptyPort (0),
		.outUseValid     (1),
		.outUseReady     (1),
		.outReadyLatency (0)
	) avalon_st_adapter_010 (
		.in_clk_0_clk   (System_PLL_sys_clk_clk),                        // in_clk_0.clk
		.in_rst_0_reset (n0_from_hps_reset_reset_bridge_in_reset_reset), // in_rst_0.reset
		.in_0_data      (nse_from_hps_s1_agent_rdata_fifo_out_data),     //     in_0.data
		.in_0_valid     (nse_from_hps_s1_agent_rdata_fifo_out_valid),    //         .valid
		.in_0_ready     (nse_from_hps_s1_agent_rdata_fifo_out_ready),    //         .ready
		.out_0_data     (avalon_st_adapter_010_out_0_data),              //    out_0.data
		.out_0_valid    (avalon_st_adapter_010_out_0_valid),             //         .valid
		.out_0_ready    (avalon_st_adapter_010_out_0_ready),             //         .ready
		.out_0_error    (avalon_st_adapter_010_out_0_error)              //         .error
	);

	Computer_System_mm_interconnect_1_avalon_st_adapter #(
		.inBitsPerSymbol (34),
		.inUsePackets    (0),
		.inDataWidth     (34),
		.inChannelWidth  (0),
		.inErrorWidth    (0),
		.inUseEmptyPort  (0),
		.inUseValid      (1),
		.inUseReady      (1),
		.inReadyLatency  (0),
		.outDataWidth    (34),
		.outChannelWidth (0),
		.outErrorWidth   (1),
		.outUseEmptyPort (0),
		.outUseValid     (1),
		.outUseReady     (1),
		.outReadyLatency (0)
	) avalon_st_adapter_011 (
		.in_clk_0_clk   (System_PLL_sys_clk_clk),                        // in_clk_0.clk
		.in_rst_0_reset (n0_from_hps_reset_reset_bridge_in_reset_reset), // in_rst_0.reset
		.in_0_data      (n0_from_fpga_s1_agent_rdata_fifo_out_data),     //     in_0.data
		.in_0_valid     (n0_from_fpga_s1_agent_rdata_fifo_out_valid),    //         .valid
		.in_0_ready     (n0_from_fpga_s1_agent_rdata_fifo_out_ready),    //         .ready
		.out_0_data     (avalon_st_adapter_011_out_0_data),              //    out_0.data
		.out_0_valid    (avalon_st_adapter_011_out_0_valid),             //         .valid
		.out_0_ready    (avalon_st_adapter_011_out_0_ready),             //         .ready
		.out_0_error    (avalon_st_adapter_011_out_0_error)              //         .error
	);

	Computer_System_mm_interconnect_1_avalon_st_adapter #(
		.inBitsPerSymbol (34),
		.inUsePackets    (0),
		.inDataWidth     (34),
		.inChannelWidth  (0),
		.inErrorWidth    (0),
		.inUseEmptyPort  (0),
		.inUseValid      (1),
		.inUseReady      (1),
		.inReadyLatency  (0),
		.outDataWidth    (34),
		.outChannelWidth (0),
		.outErrorWidth   (1),
		.outUseEmptyPort (0),
		.outUseValid     (1),
		.outUseReady     (1),
		.outReadyLatency (0)
	) avalon_st_adapter_012 (
		.in_clk_0_clk   (System_PLL_sys_clk_clk),                        // in_clk_0.clk
		.in_rst_0_reset (n0_from_hps_reset_reset_bridge_in_reset_reset), // in_rst_0.reset
		.in_0_data      (nn_from_fpga_s1_agent_rdata_fifo_out_data),     //     in_0.data
		.in_0_valid     (nn_from_fpga_s1_agent_rdata_fifo_out_valid),    //         .valid
		.in_0_ready     (nn_from_fpga_s1_agent_rdata_fifo_out_ready),    //         .ready
		.out_0_data     (avalon_st_adapter_012_out_0_data),              //    out_0.data
		.out_0_valid    (avalon_st_adapter_012_out_0_valid),             //         .valid
		.out_0_ready    (avalon_st_adapter_012_out_0_ready),             //         .ready
		.out_0_error    (avalon_st_adapter_012_out_0_error)              //         .error
	);

	Computer_System_mm_interconnect_1_avalon_st_adapter #(
		.inBitsPerSymbol (34),
		.inUsePackets    (0),
		.inDataWidth     (34),
		.inChannelWidth  (0),
		.inErrorWidth    (0),
		.inUseEmptyPort  (0),
		.inUseValid      (1),
		.inUseReady      (1),
		.inReadyLatency  (0),
		.outDataWidth    (34),
		.outChannelWidth (0),
		.outErrorWidth   (1),
		.outUseEmptyPort (0),
		.outUseValid     (1),
		.outUseReady     (1),
		.outReadyLatency (0)
	) avalon_st_adapter_013 (
		.in_clk_0_clk   (System_PLL_sys_clk_clk),                        // in_clk_0.clk
		.in_rst_0_reset (n0_from_hps_reset_reset_bridge_in_reset_reset), // in_rst_0.reset
		.in_0_data      (ns_from_fpga_s1_agent_rdata_fifo_out_data),     //     in_0.data
		.in_0_valid     (ns_from_fpga_s1_agent_rdata_fifo_out_valid),    //         .valid
		.in_0_ready     (ns_from_fpga_s1_agent_rdata_fifo_out_ready),    //         .ready
		.out_0_data     (avalon_st_adapter_013_out_0_data),              //    out_0.data
		.out_0_valid    (avalon_st_adapter_013_out_0_valid),             //         .valid
		.out_0_ready    (avalon_st_adapter_013_out_0_ready),             //         .ready
		.out_0_error    (avalon_st_adapter_013_out_0_error)              //         .error
	);

	Computer_System_mm_interconnect_1_avalon_st_adapter #(
		.inBitsPerSymbol (34),
		.inUsePackets    (0),
		.inDataWidth     (34),
		.inChannelWidth  (0),
		.inErrorWidth    (0),
		.inUseEmptyPort  (0),
		.inUseValid      (1),
		.inUseReady      (1),
		.inReadyLatency  (0),
		.outDataWidth    (34),
		.outChannelWidth (0),
		.outErrorWidth   (1),
		.outUseEmptyPort (0),
		.outUseValid     (1),
		.outUseReady     (1),
		.outReadyLatency (0)
	) avalon_st_adapter_014 (
		.in_clk_0_clk   (System_PLL_sys_clk_clk),                        // in_clk_0.clk
		.in_rst_0_reset (n0_from_hps_reset_reset_bridge_in_reset_reset), // in_rst_0.reset
		.in_0_data      (nw_from_fpga_s1_agent_rdata_fifo_out_data),     //     in_0.data
		.in_0_valid     (nw_from_fpga_s1_agent_rdata_fifo_out_valid),    //         .valid
		.in_0_ready     (nw_from_fpga_s1_agent_rdata_fifo_out_ready),    //         .ready
		.out_0_data     (avalon_st_adapter_014_out_0_data),              //    out_0.data
		.out_0_valid    (avalon_st_adapter_014_out_0_valid),             //         .valid
		.out_0_ready    (avalon_st_adapter_014_out_0_ready),             //         .ready
		.out_0_error    (avalon_st_adapter_014_out_0_error)              //         .error
	);

	Computer_System_mm_interconnect_1_avalon_st_adapter #(
		.inBitsPerSymbol (34),
		.inUsePackets    (0),
		.inDataWidth     (34),
		.inChannelWidth  (0),
		.inErrorWidth    (0),
		.inUseEmptyPort  (0),
		.inUseValid      (1),
		.inUseReady      (1),
		.inReadyLatency  (0),
		.outDataWidth    (34),
		.outChannelWidth (0),
		.outErrorWidth   (1),
		.outUseEmptyPort (0),
		.outUseValid     (1),
		.outUseReady     (1),
		.outReadyLatency (0)
	) avalon_st_adapter_015 (
		.in_clk_0_clk   (System_PLL_sys_clk_clk),                        // in_clk_0.clk
		.in_rst_0_reset (n0_from_hps_reset_reset_bridge_in_reset_reset), // in_rst_0.reset
		.in_0_data      (ne_from_fpga_s1_agent_rdata_fifo_out_data),     //     in_0.data
		.in_0_valid     (ne_from_fpga_s1_agent_rdata_fifo_out_valid),    //         .valid
		.in_0_ready     (ne_from_fpga_s1_agent_rdata_fifo_out_ready),    //         .ready
		.out_0_data     (avalon_st_adapter_015_out_0_data),              //    out_0.data
		.out_0_valid    (avalon_st_adapter_015_out_0_valid),             //         .valid
		.out_0_ready    (avalon_st_adapter_015_out_0_ready),             //         .ready
		.out_0_error    (avalon_st_adapter_015_out_0_error)              //         .error
	);

	Computer_System_mm_interconnect_1_avalon_st_adapter #(
		.inBitsPerSymbol (34),
		.inUsePackets    (0),
		.inDataWidth     (34),
		.inChannelWidth  (0),
		.inErrorWidth    (0),
		.inUseEmptyPort  (0),
		.inUseValid      (1),
		.inUseReady      (1),
		.inReadyLatency  (0),
		.outDataWidth    (34),
		.outChannelWidth (0),
		.outErrorWidth   (1),
		.outUseEmptyPort (0),
		.outUseValid     (1),
		.outUseReady     (1),
		.outReadyLatency (0)
	) avalon_st_adapter_016 (
		.in_clk_0_clk   (System_PLL_sys_clk_clk),                        // in_clk_0.clk
		.in_rst_0_reset (n0_from_hps_reset_reset_bridge_in_reset_reset), // in_rst_0.reset
		.in_0_data      (nnw_from_fpga_s1_agent_rdata_fifo_out_data),    //     in_0.data
		.in_0_valid     (nnw_from_fpga_s1_agent_rdata_fifo_out_valid),   //         .valid
		.in_0_ready     (nnw_from_fpga_s1_agent_rdata_fifo_out_ready),   //         .ready
		.out_0_data     (avalon_st_adapter_016_out_0_data),              //    out_0.data
		.out_0_valid    (avalon_st_adapter_016_out_0_valid),             //         .valid
		.out_0_ready    (avalon_st_adapter_016_out_0_ready),             //         .ready
		.out_0_error    (avalon_st_adapter_016_out_0_error)              //         .error
	);

	Computer_System_mm_interconnect_1_avalon_st_adapter #(
		.inBitsPerSymbol (34),
		.inUsePackets    (0),
		.inDataWidth     (34),
		.inChannelWidth  (0),
		.inErrorWidth    (0),
		.inUseEmptyPort  (0),
		.inUseValid      (1),
		.inUseReady      (1),
		.inReadyLatency  (0),
		.outDataWidth    (34),
		.outChannelWidth (0),
		.outErrorWidth   (1),
		.outUseEmptyPort (0),
		.outUseValid     (1),
		.outUseReady     (1),
		.outReadyLatency (0)
	) avalon_st_adapter_017 (
		.in_clk_0_clk   (System_PLL_sys_clk_clk),                        // in_clk_0.clk
		.in_rst_0_reset (n0_from_hps_reset_reset_bridge_in_reset_reset), // in_rst_0.reset
		.in_0_data      (nne_from_fpga_s1_agent_rdata_fifo_out_data),    //     in_0.data
		.in_0_valid     (nne_from_fpga_s1_agent_rdata_fifo_out_valid),   //         .valid
		.in_0_ready     (nne_from_fpga_s1_agent_rdata_fifo_out_ready),   //         .ready
		.out_0_data     (avalon_st_adapter_017_out_0_data),              //    out_0.data
		.out_0_valid    (avalon_st_adapter_017_out_0_valid),             //         .valid
		.out_0_ready    (avalon_st_adapter_017_out_0_ready),             //         .ready
		.out_0_error    (avalon_st_adapter_017_out_0_error)              //         .error
	);

	Computer_System_mm_interconnect_1_avalon_st_adapter #(
		.inBitsPerSymbol (34),
		.inUsePackets    (0),
		.inDataWidth     (34),
		.inChannelWidth  (0),
		.inErrorWidth    (0),
		.inUseEmptyPort  (0),
		.inUseValid      (1),
		.inUseReady      (1),
		.inReadyLatency  (0),
		.outDataWidth    (34),
		.outChannelWidth (0),
		.outErrorWidth   (1),
		.outUseEmptyPort (0),
		.outUseValid     (1),
		.outUseReady     (1),
		.outReadyLatency (0)
	) avalon_st_adapter_018 (
		.in_clk_0_clk   (System_PLL_sys_clk_clk),                        // in_clk_0.clk
		.in_rst_0_reset (n0_from_hps_reset_reset_bridge_in_reset_reset), // in_rst_0.reset
		.in_0_data      (nsw_from_fpga_s1_agent_rdata_fifo_out_data),    //     in_0.data
		.in_0_valid     (nsw_from_fpga_s1_agent_rdata_fifo_out_valid),   //         .valid
		.in_0_ready     (nsw_from_fpga_s1_agent_rdata_fifo_out_ready),   //         .ready
		.out_0_data     (avalon_st_adapter_018_out_0_data),              //    out_0.data
		.out_0_valid    (avalon_st_adapter_018_out_0_valid),             //         .valid
		.out_0_ready    (avalon_st_adapter_018_out_0_ready),             //         .ready
		.out_0_error    (avalon_st_adapter_018_out_0_error)              //         .error
	);

	Computer_System_mm_interconnect_1_avalon_st_adapter #(
		.inBitsPerSymbol (34),
		.inUsePackets    (0),
		.inDataWidth     (34),
		.inChannelWidth  (0),
		.inErrorWidth    (0),
		.inUseEmptyPort  (0),
		.inUseValid      (1),
		.inUseReady      (1),
		.inReadyLatency  (0),
		.outDataWidth    (34),
		.outChannelWidth (0),
		.outErrorWidth   (1),
		.outUseEmptyPort (0),
		.outUseValid     (1),
		.outUseReady     (1),
		.outReadyLatency (0)
	) avalon_st_adapter_019 (
		.in_clk_0_clk   (System_PLL_sys_clk_clk),                        // in_clk_0.clk
		.in_rst_0_reset (n0_from_hps_reset_reset_bridge_in_reset_reset), // in_rst_0.reset
		.in_0_data      (nse_from_fpga_s1_agent_rdata_fifo_out_data),    //     in_0.data
		.in_0_valid     (nse_from_fpga_s1_agent_rdata_fifo_out_valid),   //         .valid
		.in_0_ready     (nse_from_fpga_s1_agent_rdata_fifo_out_ready),   //         .ready
		.out_0_data     (avalon_st_adapter_019_out_0_data),              //    out_0.data
		.out_0_valid    (avalon_st_adapter_019_out_0_valid),             //         .valid
		.out_0_ready    (avalon_st_adapter_019_out_0_ready),             //         .ready
		.out_0_error    (avalon_st_adapter_019_out_0_error)              //         .error
	);

	Computer_System_mm_interconnect_1_avalon_st_adapter #(
		.inBitsPerSymbol (34),
		.inUsePackets    (0),
		.inDataWidth     (34),
		.inChannelWidth  (0),
		.inErrorWidth    (0),
		.inUseEmptyPort  (0),
		.inUseValid      (1),
		.inUseReady      (1),
		.inReadyLatency  (0),
		.outDataWidth    (34),
		.outChannelWidth (0),
		.outErrorWidth   (1),
		.outUseEmptyPort (0),
		.outUseValid     (1),
		.outUseReady     (1),
		.outReadyLatency (0)
	) avalon_st_adapter_020 (
		.in_clk_0_clk   (System_PLL_sys_clk_clk),                        // in_clk_0.clk
		.in_rst_0_reset (n0_from_hps_reset_reset_bridge_in_reset_reset), // in_rst_0.reset
		.in_0_data      (one9th_s1_agent_rdata_fifo_out_data),           //     in_0.data
		.in_0_valid     (one9th_s1_agent_rdata_fifo_out_valid),          //         .valid
		.in_0_ready     (one9th_s1_agent_rdata_fifo_out_ready),          //         .ready
		.out_0_data     (avalon_st_adapter_020_out_0_data),              //    out_0.data
		.out_0_valid    (avalon_st_adapter_020_out_0_valid),             //         .valid
		.out_0_ready    (avalon_st_adapter_020_out_0_ready),             //         .ready
		.out_0_error    (avalon_st_adapter_020_out_0_error)              //         .error
	);

	Computer_System_mm_interconnect_1_avalon_st_adapter #(
		.inBitsPerSymbol (34),
		.inUsePackets    (0),
		.inDataWidth     (34),
		.inChannelWidth  (0),
		.inErrorWidth    (0),
		.inUseEmptyPort  (0),
		.inUseValid      (1),
		.inUseReady      (1),
		.inReadyLatency  (0),
		.outDataWidth    (34),
		.outChannelWidth (0),
		.outErrorWidth   (1),
		.outUseEmptyPort (0),
		.outUseValid     (1),
		.outUseReady     (1),
		.outReadyLatency (0)
	) avalon_st_adapter_021 (
		.in_clk_0_clk   (System_PLL_sys_clk_clk),                        // in_clk_0.clk
		.in_rst_0_reset (n0_from_hps_reset_reset_bridge_in_reset_reset), // in_rst_0.reset
		.in_0_data      (one36th_s1_agent_rdata_fifo_out_data),          //     in_0.data
		.in_0_valid     (one36th_s1_agent_rdata_fifo_out_valid),         //         .valid
		.in_0_ready     (one36th_s1_agent_rdata_fifo_out_ready),         //         .ready
		.out_0_data     (avalon_st_adapter_021_out_0_data),              //    out_0.data
		.out_0_valid    (avalon_st_adapter_021_out_0_valid),             //         .valid
		.out_0_ready    (avalon_st_adapter_021_out_0_ready),             //         .ready
		.out_0_error    (avalon_st_adapter_021_out_0_error)              //         .error
	);

	Computer_System_mm_interconnect_1_avalon_st_adapter #(
		.inBitsPerSymbol (34),
		.inUsePackets    (0),
		.inDataWidth     (34),
		.inChannelWidth  (0),
		.inErrorWidth    (0),
		.inUseEmptyPort  (0),
		.inUseValid      (1),
		.inUseReady      (1),
		.inReadyLatency  (0),
		.outDataWidth    (34),
		.outChannelWidth (0),
		.outErrorWidth   (1),
		.outUseEmptyPort (0),
		.outUseValid     (1),
		.outUseReady     (1),
		.outReadyLatency (0)
	) avalon_st_adapter_022 (
		.in_clk_0_clk   (System_PLL_sys_clk_clk),                        // in_clk_0.clk
		.in_rst_0_reset (n0_from_hps_reset_reset_bridge_in_reset_reset), // in_rst_0.reset
		.in_0_data      (omega_s1_agent_rdata_fifo_out_data),            //     in_0.data
		.in_0_valid     (omega_s1_agent_rdata_fifo_out_valid),           //         .valid
		.in_0_ready     (omega_s1_agent_rdata_fifo_out_ready),           //         .ready
		.out_0_data     (avalon_st_adapter_022_out_0_data),              //    out_0.data
		.out_0_valid    (avalon_st_adapter_022_out_0_valid),             //         .valid
		.out_0_ready    (avalon_st_adapter_022_out_0_ready),             //         .ready
		.out_0_error    (avalon_st_adapter_022_out_0_error)              //         .error
	);

	Computer_System_mm_interconnect_1_avalon_st_adapter #(
		.inBitsPerSymbol (34),
		.inUsePackets    (0),
		.inDataWidth     (34),
		.inChannelWidth  (0),
		.inErrorWidth    (0),
		.inUseEmptyPort  (0),
		.inUseValid      (1),
		.inUseReady      (1),
		.inReadyLatency  (0),
		.outDataWidth    (34),
		.outChannelWidth (0),
		.outErrorWidth   (1),
		.outUseEmptyPort (0),
		.outUseValid     (1),
		.outUseReady     (1),
		.outReadyLatency (0)
	) avalon_st_adapter_023 (
		.in_clk_0_clk   (System_PLL_sys_clk_clk),                        // in_clk_0.clk
		.in_rst_0_reset (n0_from_hps_reset_reset_bridge_in_reset_reset), // in_rst_0.reset
		.in_0_data      (ux_s1_agent_rdata_fifo_out_data),               //     in_0.data
		.in_0_valid     (ux_s1_agent_rdata_fifo_out_valid),              //         .valid
		.in_0_ready     (ux_s1_agent_rdata_fifo_out_ready),              //         .ready
		.out_0_data     (avalon_st_adapter_023_out_0_data),              //    out_0.data
		.out_0_valid    (avalon_st_adapter_023_out_0_valid),             //         .valid
		.out_0_ready    (avalon_st_adapter_023_out_0_ready),             //         .ready
		.out_0_error    (avalon_st_adapter_023_out_0_error)              //         .error
	);

	Computer_System_mm_interconnect_1_avalon_st_adapter #(
		.inBitsPerSymbol (34),
		.inUsePackets    (0),
		.inDataWidth     (34),
		.inChannelWidth  (0),
		.inErrorWidth    (0),
		.inUseEmptyPort  (0),
		.inUseValid      (1),
		.inUseReady      (1),
		.inReadyLatency  (0),
		.outDataWidth    (34),
		.outChannelWidth (0),
		.outErrorWidth   (1),
		.outUseEmptyPort (0),
		.outUseValid     (1),
		.outUseReady     (1),
		.outReadyLatency (0)
	) avalon_st_adapter_024 (
		.in_clk_0_clk   (System_PLL_sys_clk_clk),                        // in_clk_0.clk
		.in_rst_0_reset (n0_from_hps_reset_reset_bridge_in_reset_reset), // in_rst_0.reset
		.in_0_data      (uy_s1_agent_rdata_fifo_out_data),               //     in_0.data
		.in_0_valid     (uy_s1_agent_rdata_fifo_out_valid),              //         .valid
		.in_0_ready     (uy_s1_agent_rdata_fifo_out_ready),              //         .ready
		.out_0_data     (avalon_st_adapter_024_out_0_data),              //    out_0.data
		.out_0_valid    (avalon_st_adapter_024_out_0_valid),             //         .valid
		.out_0_ready    (avalon_st_adapter_024_out_0_ready),             //         .ready
		.out_0_error    (avalon_st_adapter_024_out_0_error)              //         .error
	);

	Computer_System_mm_interconnect_1_avalon_st_adapter #(
		.inBitsPerSymbol (34),
		.inUsePackets    (0),
		.inDataWidth     (34),
		.inChannelWidth  (0),
		.inErrorWidth    (0),
		.inUseEmptyPort  (0),
		.inUseValid      (1),
		.inUseReady      (1),
		.inReadyLatency  (0),
		.outDataWidth    (34),
		.outChannelWidth (0),
		.outErrorWidth   (1),
		.outUseEmptyPort (0),
		.outUseValid     (1),
		.outUseReady     (1),
		.outReadyLatency (0)
	) avalon_st_adapter_025 (
		.in_clk_0_clk   (System_PLL_sys_clk_clk),                        // in_clk_0.clk
		.in_rst_0_reset (n0_from_hps_reset_reset_bridge_in_reset_reset), // in_rst_0.reset
		.in_0_data      (pipes_s1_agent_rdata_fifo_out_data),            //     in_0.data
		.in_0_valid     (pipes_s1_agent_rdata_fifo_out_valid),           //         .valid
		.in_0_ready     (pipes_s1_agent_rdata_fifo_out_ready),           //         .ready
		.out_0_data     (avalon_st_adapter_025_out_0_data),              //    out_0.data
		.out_0_valid    (avalon_st_adapter_025_out_0_valid),             //         .valid
		.out_0_ready    (avalon_st_adapter_025_out_0_ready),             //         .ready
		.out_0_error    (avalon_st_adapter_025_out_0_error)              //         .error
	);

	Computer_System_mm_interconnect_1_avalon_st_adapter #(
		.inBitsPerSymbol (34),
		.inUsePackets    (0),
		.inDataWidth     (34),
		.inChannelWidth  (0),
		.inErrorWidth    (0),
		.inUseEmptyPort  (0),
		.inUseValid      (1),
		.inUseReady      (1),
		.inReadyLatency  (0),
		.outDataWidth    (34),
		.outChannelWidth (0),
		.outErrorWidth   (1),
		.outUseEmptyPort (0),
		.outUseValid     (1),
		.outUseReady     (1),
		.outReadyLatency (0)
	) avalon_st_adapter_026 (
		.in_clk_0_clk   (System_PLL_sys_clk_clk),                                      // in_clk_0.clk
		.in_rst_0_reset (AV_Config_reset_reset_bridge_in_reset_reset),                 // in_rst_0.reset
		.in_0_data      (pixel_dma_addr_translation_slave_agent_rdata_fifo_out_data),  //     in_0.data
		.in_0_valid     (pixel_dma_addr_translation_slave_agent_rdata_fifo_out_valid), //         .valid
		.in_0_ready     (pixel_dma_addr_translation_slave_agent_rdata_fifo_out_ready), //         .ready
		.out_0_data     (avalon_st_adapter_026_out_0_data),                            //    out_0.data
		.out_0_valid    (avalon_st_adapter_026_out_0_valid),                           //         .valid
		.out_0_ready    (avalon_st_adapter_026_out_0_ready),                           //         .ready
		.out_0_error    (avalon_st_adapter_026_out_0_error)                            //         .error
	);

endmodule
